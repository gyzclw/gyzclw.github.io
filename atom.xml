<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识之野</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-24T02:23:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>huang jingui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java reflect的应用</title>
    <link href="http://yoursite.com/2017/03/24/Java%20reflect%20%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/24/Java reflect 的应用/</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2017-03-24T02:23:54.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Java reflect 的应用</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 获取参数</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = object.getClass().getDeclaredFields();<span class="comment">//get private Fields</span></span><br><span class="line">Field[] fields = object.getClass().getFields();  <span class="comment">//get Public Fields</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 获取方法</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] methods = object.getClass().getMethods();</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 获取参数的getter值</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">value=method.invoke(request);</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> 应用例子</h3>
<div class="outline-text-3" id="text-1-4">
<p>
将class的的值格式为： “a=b&amp;a=c”;
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>    String <span class="title">getSignature</span><span class="params">(Object request)</span></span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Field[] fields=request.getClass().getDeclaredFields();</span><br><span class="line">  Method[] methods=request.getClass().getMethods();</span><br><span class="line">  TreeMap&amp;lt;String,String&amp;gt; requestMap = <span class="keyword">new</span> TreeMap&amp;lt;&amp;gt;();</span><br><span class="line">  <span class="keyword">for</span> (Field f: fields) {</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">      Object value;</span><br><span class="line">      <span class="keyword">if</span> (method.getName().contains(f.getName())&amp;amp;&amp;amp; !method.getName().contains(<span class="string">"set"</span>)){</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> {</span><br><span class="line"></span><br><span class="line">	  value=method.invoke(request);</span><br><span class="line">	  <span class="keyword">if</span> (value==<span class="keyword">null</span>) {</span><br><span class="line">	    value=<span class="string">""</span>;</span><br><span class="line">	    requestMap.put(f.getName(), (String) value);</span><br><span class="line">	  }<span class="keyword">else</span> {</span><br><span class="line">	    requestMap.put(f.getName(), (String) value);</span><br><span class="line">	  }</span><br><span class="line">	} <span class="keyword">catch</span> (IllegalAccessException e) {</span><br><span class="line">	  e.printStackTrace();</span><br><span class="line">	} <span class="keyword">catch</span> (InvocationTargetException e) {</span><br><span class="line">	  e.printStackTrace();</span><br><span class="line">	}</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">    requestMap.remove(<span class="string">"Signature"</span>);</span><br><span class="line">    Set&amp;lt;String&amp;gt; keys=requestMap.keySet();</span><br><span class="line">    Iterator&amp;lt;String&amp;gt; iterable=keys.iterator();</span><br><span class="line">    String signature=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (iterable.hasNext()){</span><br><span class="line">     String key= iterable.next();</span><br><span class="line">      String value= key+<span class="string">"="</span>+requestMap.get(key);</span><br><span class="line">      signature+=value+<span class="string">"&amp;amp;"</span>;</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">return</span> signature.substring(<span class="number">0</span>,signature.length()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-03-24 Fri 10:23.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Java reflect 的应用&lt;/h2&gt;
&lt;div cla
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="reflect" scheme="http://yoursite.com/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>Head First HTML CSS &amp; XHTML 读书笔记</title>
    <link href="http://yoursite.com/2017/03/19/Head_First_HTML_CSS_XHTML%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/19/Head_First_HTML_CSS_XHTML 读书笔记/</id>
    <published>2017-03-18T16:00:00.000Z</published>
    <updated>2017-03-20T07:29:52.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Head First HTML  CSS &amp; XHTML Reading Note</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> getting to know HTML</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<b>HTML</b> 是超文本标记语言，所以HTML的功能 是让你通过tag 告诉浏览器你的文本是什么结构的.
</p>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> Meet the style element</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
   &lt;style&gt; tag also requires an attribute, called type, which tells the brower the kind of style you're using.
Attribute give you a way to provide additional information about an element.
</p>
</div>
</div>
<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2"><span class="section-number-4">1.1.2</span> Giving Starbuzz some style</h4>
<div class="outline-text-4" id="text-1-1-2">
<div class="org-src-container">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">body</span> <span class="rules">{</span><br><span class="line">     <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#d2b48c</span></span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">20%</span></span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">20%</span></span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1</span> px dotted gray</span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span></span></span>;</span><br><span class="line">     <span class="rule"><span class="attribute">font-family</span>:<span class="value"> sans-serif</span></span>;</span><br><span class="line">}</span></span><br></pre></td></tr></table></figure>
</div>
<p>
CSS uses a synatax that is totally different from HTML.
</p>

<p>
CSS does different jobs from HTML, like English with Math.
</p>

<p>
You use CSS to create style , HTML to create struture.
</p>

<p>
#d2b48c is a "hex code".
</p>

<p>
The body in the CSS means that all the CSS between in "{"  and "}" applies
to the content with the HTML &lt;body&gt;  element.
</p>

<blockquote>
<ul class="org-ul">
<li>HTML is an abbreviation for HyperText Markup Language and is used to structure your web page
</li>
<li>CSS is an abbreviation for Cascading Style Sheets, and is used to control the presentation of your HTML.
</li>
<li>what yout put into body is what u see in your brower.
</li>
<li>CSS can be added to an HTML Web page by putting the CSS rules inside the &lt;style&gt; elements. the &lt;styles&gt; should always be insde the &lt;head&gt; element
</li>
<li>Most whtespaces are ignored in the brower.
</li>
</ul>
</blockquote>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> going further, with hyper text</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> Creating the new lounge</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
The type attribute specifies which style language we're using in this CSS.
</p>

<p>
The href attribute tells us the destination of a hyperlink.
</p>

<p>
the src attribute specifies the filename of the picture an imag tag displays.
</p>

<blockquote>
<ul class="org-ul">
<li>When you want to link  from one page to another, use the &lt;a&gt; element.
</li>
<li>The href attribute of the of element link 的目的地.
</li>
<li>&lt;a&gt; 标签的内容是在网页上看到的内容，默认是有下划线提醒你点击。
</li>
<li>".." means "parent folder"
</li>
<li>Don't use spaces in names when you're choosing names for files and folders for your web site.
</li>
</ul>
</blockquote>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> building blocks</h3>
<div class="outline-text-3" id="text-1-3">
<p>
&lt;q&gt; element is just add the double quote the information,it means the text of an actual quote.
</p>
<div class="org-src-container">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;lt;p&amp;gt;According to Mozilla's website,</span><br><span class="line">&amp;lt;q</span><br><span class="line">cite="https://www.mozilla.org/en-US/about/history/details/"&amp;gt;Firefox 1.0</span><br><span class="line">was released in 2004 and became a big success.&amp;lt;/q&amp;gt;&amp;lt;/p&amp;gt;</span><br></pre></td></tr></table></figure>
</div>
<p>
<span class="underline">According to Mozilla's website, "Firefox 1.0 was released in 2004 and became a big success".</span>
</p>

<p>
you ll be able to style quotes to look just the way you wanted.
</p>

<ol class="org-ol">
<li>&lt;q&gt; use when short, pithy quotes
</li>
<li>&lt;blockquote&gt; use in longer quotes, often memorizing complete passages from books or poems.
</li>
</ol>

<p>
&lt;q&gt; is the part of the existing paragraph, the &lt;blockquote&gt; 要单独一段长句。
</p>

<blockquote>
<p>
&lt;blockquote&gt; element is a block element.
</p>

<p>
&lt;q&gt; is an inline element.
</p>
</blockquote>

<p>
the &lt;br&gt; element is an element that doesn't have any content. it‘s  just meant to be a linebreak.
</p>

<p>
&lt;li&gt; element to create list. &lt;li&gt; is ordered list, &lt;ol&gt; is unordered list.
</p>

<p>
&lt;dl&gt; &lt;dd&gt; for definition list.
</p>

<p>
&lt;em&gt; 意味者强调，在浏览器中会表现为斜体.
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> getting connected</h3>
<div class="outline-text-3" id="text-1-4">
<p>
use &lt;a&gt; to link to create a destination.
</p>

<div class="org-src-container">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;lt;a id = "chai"&amp;gt;</span><br><span class="line"></span><br><span class="line">&amp;lt;a href = "index.html#chai"&amp;gt; See Chai Tea&amp;lt;/a&amp;gt;</span><br></pre></td></tr></table></figure>
</div>

<p>
use <span class="underline">target=”<sub>blank”</sub></span> to open a new windown.
</p>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> adding images to your pages</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1"><span class="section-number-4">1.5.1</span> How the browser display images</h4>
<div class="outline-text-4" id="text-1-5-1">
<ol class="org-ol">
<li>First the browser 取回 elixir.html 文件，
</li>
<li>然后 browser reads the "elixir.html", display it .
</li>
<li>然后发现存在&lt;imag&gt; element，取回image并展示，再取回下一个imgae。
</li>
</ol>
</div>
</div>
</div>
</div>

Last Updated 2017-03-20 Mon 15:29.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Head First HTML  CSS &amp;amp; XHT
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Android mvvm 使用</title>
    <link href="http://yoursite.com/2017/03/12/Android%20mvvm%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/12/Android mvvm 使用/</id>
    <published>2017-03-11T16:00:00.000Z</published>
    <updated>2017-03-12T10:29:35.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android mvvm 使用</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> ViewModel的职责</h3>
<div class="outline-text-3" id="text-1-1">
<p>
viewModel负责model 和view的通信。
先创建一个ViewModel接口,只包括Destory函数
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModel</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line">   }</span><br></pre></td></tr></table></figure>
</div>
<p>
然后创建一个SunViewModel实现该接口
</p>
<pre class="example">
public class SunViewModel implement ViewModel{
 private DataListener dataListener;
 private Context context;
 public SunViewModel(Context context, DataListener datalistener){
  this.dataListener = dataListener;
    this.context = context;
 }
 public void LoadData(){
  if(datalistener!=null){
    datalistener.OnSunresponse(data);
  }
}
 }
public interface DataListener{
   void OnSunResponse(String data);
}

@Override public void Destroy(){
   context=null;
   dataListener=null;
}
</pre>
<p>
Sunviewmodel 中存在LoadData函数来处理来自Model数据。通过DataListener接口让View获取
处理后的数据.
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> View 调用ViewModel</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class View implement SunViewModel.DataListener{</span><br><span class="line"> <span class="keyword">private</span> SunViewmodel viewModel;</span><br><span class="line"> <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">  viewModel = <span class="keyword">new</span> ProvidentFundNativeDetailViewModel(<span class="keyword">this</span>,<span class="keyword">this</span>);</span><br><span class="line">  viewModel.getData();</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"> <span class="annotation">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    viewModel.Destroy();</span><br><span class="line">  }</span><br><span class="line"> <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSunresponse</span><span class="params">(String data)</span></span>{</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-03-12 Sun 18:29.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android mvvm 使用&lt;/h2&gt;
&lt;div clas
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="mvvm" scheme="http://yoursite.com/tags/mvvm/"/>
    
  </entry>
  
  <entry>
    <title>java 多态重构if else</title>
    <link href="http://yoursite.com/2017/03/09/java%E5%A4%9A%E6%80%81%E9%87%8D%E6%9E%84if%20else/"/>
    <id>http://yoursite.com/2017/03/09/java多态重构if else/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-03-09T02:58:04.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> java 多态重构if else</h2>
<div class="outline-text-2" id="text-1">
<p>
过多的if else 会造成代码可读性下降,所以有时候可以使用java多态来重构代码，使得代码可读性提高。
原始代码如下:
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = gvTaskHome.getAdapter().getItem(arg2);</span><br><span class="line">				HashMap&amp;lt;String, Object&amp;gt; map = (HashMap&amp;lt;String, Object&amp;gt;) obj;</span><br><span class="line">				String str = (String) map.get(<span class="string">"itemText"</span>);</span><br><span class="line">				Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"办卡申请"</span>))</span><br><span class="line">				{</span><br><span class="line">					<span class="keyword">if</span> (FileTools.isSDCardReady())</span><br><span class="line">					{</span><br><span class="line">						Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">						List&amp;lt;Card&amp;gt; list = <span class="keyword">new</span> ArrayList&amp;lt;Card&amp;gt;();</span><br><span class="line">						<span class="keyword">try</span></span><br><span class="line">						{</span><br><span class="line">							list = XmlTools.readCardTypeXmlOut(MyConstants.CONFIG_PATH+MyConstants.getConfigFileName());</span><br><span class="line">							bundle.putSerializable(<span class="string">"card"</span>, (Serializable)list);</span><br><span class="line">							intent.putExtras(bundle);</span><br><span class="line">							intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, CardChooseActivity.class);</span><br><span class="line">							startActivity(intent);</span><br><span class="line">						} <span class="keyword">catch</span> (IOException e)</span><br><span class="line">						{</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							System.out.println(e);</span><br><span class="line">							UITools.getTools().showToast(<span class="string">"配置文件出错！"</span>, <span class="keyword">true</span>, UITools.BAD);</span><br><span class="line">						} <span class="keyword">catch</span> (DocumentException e)</span><br><span class="line">						{</span><br><span class="line">							<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">							System.out.println(e);</span><br><span class="line">							UITools.getTools().showToast(<span class="string">"配置文件出错！"</span>, <span class="keyword">true</span>, UITools.BAD);</span><br><span class="line">						}</span><br><span class="line"><span class="comment">//                                              list.addAll(list);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">					}</span><br><span class="line">					<span class="keyword">else</span> {</span><br><span class="line">						UITools.getTools().showToast(<span class="string">"未发现存储卡或内置存储"</span>, <span class="keyword">true</span>, UITools.SAD);</span><br><span class="line">					}</span><br><span class="line"></span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"资料预览"</span>))</span><br><span class="line">				{</span><br><span class="line">					intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, MsgPreViewActivity.class);</span><br><span class="line">					startActivity(intent);</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"手动补件"</span>))</span><br><span class="line">				{</span><br><span class="line">					intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, RePhotoActivity.class);</span><br><span class="line">					startActivity(intent);</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"补打回单"</span>))</span><br><span class="line">				{</span><br><span class="line"><span class="comment">//                                      UITools.getTools().showToast("此功能尚未开通", true);</span></span><br><span class="line">					intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, MsgPreViewActivity.class);</span><br><span class="line">					startActivity(intent);</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"卡激活"</span>))</span><br><span class="line">				{</span><br><span class="line"><span class="comment">//                                      UITools.getTools().showToast("此功能尚未开通", true);</span></span><br><span class="line">					intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, KnowledgeActivity.class);</span><br><span class="line">					startActivity(intent);</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (str.equals(<span class="string">"问卷调查"</span>))</span><br><span class="line">				{</span><br><span class="line"><span class="comment">//                                      String macAddress = null;</span></span><br><span class="line"><span class="comment">//                                      WifiManager wifiMgr = (WifiManager)getSystemService(Context.WIFI_SERVICE);</span></span><br><span class="line"><span class="comment">//                                      WifiInfo info = (null == wifiMgr ? null : wifiMgr.getConnectionInfo());</span></span><br><span class="line"><span class="comment">//                                      if (null != info) {</span></span><br><span class="line"><span class="comment">//                                          macAddress = info.getMacAddress();</span></span><br><span class="line"><span class="comment">//                                      }</span></span><br><span class="line"><span class="comment">//                                                String[] strArr = macAddress.split(":");</span></span><br><span class="line"><span class="comment">//                                                StringBuffer sBuffer = new StringBuffer();</span></span><br><span class="line"><span class="comment">//                                                for(int i = 0;i &amp;lt; strArr.length; i++){</span></span><br><span class="line"><span class="comment">//                                                 sBuffer.append(strArr[i]);</span></span><br><span class="line"><span class="comment">//                                                }</span></span><br><span class="line"><span class="comment">//                                              System.out.println("mac:" + sBuffer);</span></span><br><span class="line"><span class="comment">//                                      UITools.getTools().showToast("mac:" + sBuffer, true);</span></span><br><span class="line"><span class="comment">//                                      UITools.getTools().showToast("此功能尚未开通", true);</span></span><br><span class="line">					intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, SaleActivity.class);</span><br><span class="line">					startActivity(intent);</span><br><span class="line">				}</span><br><span class="line">			}</span><br></pre></td></tr></table></figure>
</div>
<p>
因为过多的if else 使得代码阅读起来比较困难，接下来我门开始重构
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 创建BaseIntent 接口</h2>
<div class="outline-text-2" id="text-2">
<p>
接口只包括一个excuse函数
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseIntent</span> </span>{</span><br><span class="line">	 Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"></span><br><span class="line">	 <span class="function"><span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span></span>;</span><br><span class="line">	 }</span><br></pre></td></tr></table></figure>
</div>
<p>
接下来通过实现该接口创建不同的类
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CardChoose</span> <span class="keyword">implements</span> <span class="title">BaseIntent</span></span>{</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="keyword">if</span> (FileTools.isSDCardReady())</span><br><span class="line">		{</span><br><span class="line">			Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">			List&amp;lt;Card&amp;gt; list;</span><br><span class="line">			<span class="keyword">try</span></span><br><span class="line">			{</span><br><span class="line">				list = XmlTools.readCardTypeXmlOut(MyConstants.CONFIG_PATH+MyConstants.getConfigFileName());</span><br><span class="line">				bundle.putSerializable(<span class="string">"card"</span>, (Serializable)list);</span><br><span class="line">				intent.putExtras(bundle);</span><br><span class="line">				intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, CardChooseActivity.class);</span><br><span class="line">				startActivity(intent);</span><br><span class="line">			} <span class="keyword">catch</span> (IOException e)</span><br><span class="line">			{</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				System.out.println(e);</span><br><span class="line">				UITools.getTools().showToast(<span class="string">"配置文件出错！"</span>, <span class="keyword">true</span>, UITools.BAD);</span><br><span class="line">			} <span class="keyword">catch</span> (DocumentException e)</span><br><span class="line">			{</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				System.out.println(e);</span><br><span class="line">				UITools.getTools().showToast(<span class="string">"配置文件出错！"</span>, <span class="keyword">true</span>, UITools.BAD);</span><br><span class="line">			}</span><br><span class="line">			<span class="comment">//                                              list.addAll(list);</span></span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">else</span> {</span><br><span class="line">			UITools.getTools().showToast(<span class="string">"未发现存储卡或内置存储"</span>, <span class="keyword">true</span>, UITools.SAD);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgPreView</span> <span class="keyword">implements</span> <span class="title">BaseIntent</span></span>{</span><br><span class="line">	<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line">		intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, MsgPreViewActivity.class);</span><br><span class="line">		startActivity(intent);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RePhoto</span> <span class="keyword">implements</span> <span class="title">BaseIntent</span></span>{</span><br><span class="line">	<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line">		intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, RePhotoActivity.class);</span><br><span class="line">		startActivity(intent);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Knowledge</span> <span class="keyword">implements</span> <span class="title">BaseIntent</span></span>{</span><br><span class="line">	<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="comment">//UITools.getTools().showToast("此功能尚未开通", true);</span></span><br><span class="line">		intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, KnowledgeActivity.class);</span><br><span class="line">		startActivity(intent);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Questionnaire</span> <span class="keyword">implements</span> <span class="title">BaseIntent</span></span>{</span><br><span class="line">	<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line">		<span class="comment">//String macAddress = null;</span></span><br><span class="line">		<span class="comment">//                                      WifiManager wifiMgr = (WifiManager)getSystemService(Context.WIFI_SERVICE);</span></span><br><span class="line">		<span class="comment">//                                      WifiInfo info = (null == wifiMgr ? null : wifiMgr.getConnectionInfo());</span></span><br><span class="line">		<span class="comment">//                                      if (null != info) {</span></span><br><span class="line">		<span class="comment">//                                          macAddress = info.getMacAddress();</span></span><br><span class="line">		<span class="comment">//                                      }</span></span><br><span class="line">		<span class="comment">//                                                String[] strArr = macAddress.split(":");</span></span><br><span class="line">		<span class="comment">//                                                StringBuffer sBuffer = new StringBuffer();</span></span><br><span class="line">		<span class="comment">//                                                for(int i = 0;i &amp;lt; strArr.length; i++){</span></span><br><span class="line">		<span class="comment">//                                                 sBuffer.append(strArr[i]);</span></span><br><span class="line">		<span class="comment">//                                                }</span></span><br><span class="line">		<span class="comment">//                                              System.out.println("mac:" + sBuffer);</span></span><br><span class="line">		<span class="comment">//                                      UITools.getTools().showToast("mac:" + sBuffer, true);</span></span><br><span class="line">		<span class="comment">//                                      UITools.getTools().showToast("此功能尚未开通", true);</span></span><br><span class="line">		intent.setClass(TaskHomeActivity.<span class="keyword">this</span>, SaleActivity.class);</span><br><span class="line">		startActivity(intent);</span><br><span class="line">		}</span><br><span class="line">		}</span><br></pre></td></tr></table></figure>
</div>
<p>
最后在创建一个private函数来判断
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> BaseIntent <span class="title">gvTaskHomeOnClick</span><span class="params">(String str)</span></span>{</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"办卡申请"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> CardChoose();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"资料预览"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> MsgPreView();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"手动补件"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> RePhoto();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"补打回单"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> MsgPreView();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"卡激活"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> Knowledge();</span><br><span class="line">		<span class="keyword">if</span> (str.equals(<span class="string">"问卷调查"</span>)) <span class="keyword">return</span> <span class="keyword">new</span> Questionnaire();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> BaseIntent() {</span><br><span class="line">			<span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuse</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">			}</span><br><span class="line">		};</span><br><span class="line">	}</span><br></pre></td></tr></table></figure>
</div>
<p>
最后运行函数
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gvTaskHomeOnClick(str).excuse();</span><br></pre></td></tr></table></figure>
</div>
<p>
这样代码逻辑就清晰了，而且扩展起来也比较方便。
</p>
</div>
</div>

Last Updated 2017-03-09 Thu 10:58.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; java 多态重构if else&lt;/h2&gt;
&lt;div cla
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="重构" scheme="http://yoursite.com/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>android studio 快捷键</title>
    <link href="http://yoursite.com/2017/03/04/android%20studio(emacs%20keyboad)%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/03/04/android studio(emacs keyboad)快捷键/</id>
    <published>2017-03-03T16:00:00.000Z</published>
    <updated>2017-03-04T06:58:19.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android studio 快捷键</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left">

<col class="left">
</colgroup>
<thead>
<tr>
<th scope="col" class="left">快捷键</th>
<th scope="col" class="left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Ctrl+alt+G</td>
<td class="left">jump to class</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">alt + G</td>
<td class="left">line jump</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">alt + .</td>
<td class="left">show declaration</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

Last Updated 2017-03-04 Sat 14:58.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android studio 快捷键&lt;/h2&gt;
&lt;div c
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发遇到的问题</title>
    <link href="http://yoursite.com/2017/03/01/Android%20%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/01/Android 开发遇到的问题/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-03-01T06:42:04.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android 开发遇到的问题</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Fresco 的使用</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> 图片不显示</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
使用base64的uri 时,在api&lt;19是无法显示图片。
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"data:mime/type;base64,"</span>+code.getCheckCode();</span><br><span class="line">       DraweeController controller = Fresco.newDraweeControllerBuilder()</span><br><span class="line">	   .setUri(s)</span><br><span class="line">	   .setTapToRetryEnabled(<span class="keyword">true</span>)</span><br><span class="line">	   .setOldController(mVerifiCationCode.getController())</span><br><span class="line">	   .build();</span><br><span class="line">	   mVerifiCationCode.setController(controller);</span><br></pre></td></tr></table></figure>
</div>
<p>
解决方法: 将服务器的图片格式改成png。
</p>
</div>
</div>
</div>
</div>

Last Updated 2017-03-01 Wed 14:42.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android 开发遇到的问题&lt;/h2&gt;
&lt;div clas
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="problem" scheme="http://yoursite.com/tags/problem/"/>
    
  </entry>
  
  <entry>
    <title>Android Retrofit 和Rxjava的使用</title>
    <link href="http://yoursite.com/2017/02/28/Android%20Retrofit%20%E5%92%8CRxjava%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/28/Android Retrofit 和Rxjava 的使用/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2017-03-06T09:28:27.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android Retrofit 和Rxjava的使用</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> install adapter-rxjava</h3>
<div class="outline-text-3" id="text-1-1">
<p>
在build.gradle 中
</p>
<div class="org-src-container">

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.0.2'</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> How to use adapter-rxjava</h3>
<div class="outline-text-3" id="text-1-2">
<p>
在MegaServier中的返回值Call&lt;?&gt;改为Observable&lt;?&gt;
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@GET</span>(<span class="string">"servlet"</span>) Observable&amp;lt;Code&amp;gt; listCodeRepo(<span class="annotation">@Query</span>(<span class="string">"parm"</span>) String user);</span><br></pre></td></tr></table></figure>
</div>
<p>
在setBefore() 中添加RxjavaCallAdapter
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(apiUri)</span><br><span class="line">	  .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">	  .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">	  .build();</span><br></pre></td></tr></table></figure>
</div>
<p>
最后的返回值就变成Observable
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service.listCodeRepo(<span class="string">"code"</span>)</span><br><span class="line">	.subscribeOn(Schedulers.io())</span><br><span class="line">	.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">	.subscribe(<span class="keyword">new</span> Action1&amp;lt;Code&amp;gt;() {</span><br><span class="line">	  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Code code)</span> </span>{</span><br><span class="line">	    mcode[<span class="number">0</span>] = code.getCheckCode();</span><br><span class="line">	  }</span><br><span class="line">	});</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> better to use rxjava with retrofit</h3>
<div class="outline-text-3" id="text-1-3">
<p>
add a HttpMehtod
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethods</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String BASE_URL;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TIMEOUT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Retrofit retrofit;</span><br><span class="line">  <span class="keyword">private</span> HebeiService movieService;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//构造方法私有</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">HttpMethods</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//手动创建一个OkHttpClient并设置超时时间</span></span><br><span class="line">    OkHttpClient.Builder httpClientBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">    httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    retrofit = <span class="keyword">new</span> Retrofit.Builder().client(httpClientBuilder.build())</span><br><span class="line">	.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">	.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">	.baseUrl(BASE_URL)</span><br><span class="line">	.build();</span><br><span class="line"></span><br><span class="line">    movieService = retrofit.create(HebeiService.class);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在访问HttpMethods时创建单例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpMethods INSTANCE = <span class="keyword">new</span> HttpMethods();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取单例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpMethods <span class="title">getInstance</span><span class="params">(String BASE_URL)</span> </span>{</span><br><span class="line">    HttpMethods.BASE_URL = BASE_URL;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDevice</span><span class="params">(Subscriber&amp;lt;DeviceResponse&amp;gt; subscriber, String code, DeviceRequestBody requestBody)</span> </span>{</span><br><span class="line">    movieService.postDevice(code,requestBody)</span><br><span class="line">	.subscribeOn(Schedulers.io())</span><br><span class="line">	.unsubscribeOn(Schedulers.io())</span><br><span class="line">	.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">	.subscribe(subscriber);</span><br><span class="line">  }</span><br></pre></td></tr></table></figure>
</div>
<p>
创建 DeviceRequestBody
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceRequestBody</span> </span>{</span><br><span class="line">  String DeviceNum ;</span><br><span class="line">  String Signature;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DeviceRequestBody</span><span class="params">(String deviceNum, String signature)</span> </span>{</span><br><span class="line">    DeviceNum = deviceNum;</span><br><span class="line">    Signature = signature;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
<p>
再创建一个 DeviceResponse
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Generated</span>(<span class="string">"com.robohorse.robopojogenerator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceResponse</span></span>{</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@SerializedName</span>(<span class="string">"uniqueCode"</span>)</span><br><span class="line">	<span class="annotation">@Expose</span></span><br><span class="line">	<span class="keyword">private</span> String uniqueCode;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@SerializedName</span>(<span class="string">"signature"</span>)</span><br><span class="line">	<span class="annotation">@Expose</span></span><br><span class="line">	<span class="keyword">private</span> String signature;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@SerializedName</span>(<span class="string">"response"</span>)</span><br><span class="line">	<span class="annotation">@Expose</span></span><br><span class="line">	<span class="keyword">private</span> String response;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUniqueCode</span><span class="params">(String uniqueCode)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.uniqueCode = uniqueCode;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUniqueCode</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span> uniqueCode;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSignature</span><span class="params">(String signature)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.signature = signature;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSignature</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span> signature;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(String response)</span></span>{</span><br><span class="line">		<span class="keyword">this</span>.response = response;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getResponse</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">			<span class="string">"DeviceResponse{"</span> +</span><br><span class="line">			<span class="string">"uniqueCode = '"</span> + uniqueCode + <span class="string">'\''</span> +</span><br><span class="line">			<span class="string">",signature = '"</span> + signature + <span class="string">'\''</span> +</span><br><span class="line">			<span class="string">",response = '"</span> + response + <span class="string">'\''</span> +</span><br><span class="line">			<span class="string">"}"</span>;</span><br><span class="line">			}</span><br></pre></td></tr></table></figure>
</div>
<p>
最后的调用
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> DeviceRequestBody requestBody = <span class="keyword">new</span> DeviceRequestBody();</span><br><span class="line">Subscriber&amp;lt;DeviceResponse&amp;gt; subscriber = <span class="keyword">new</span> Subscriber&amp;lt;DeviceResponse&amp;gt;() {</span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>{</span><br><span class="line">	e.fillInStackTrace();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(DeviceResponse deviceResponse)</span> </span>{</span><br><span class="line">	   }</span><br><span class="line">    };</span><br><span class="line">    HttpMethods.getInstance(HebeiService.ENDPOINT).postDevice(subscriber,<span class="string">""</span>,requestBody);</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-03-06 Mon 17:28.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android Retrofit 和Rxjava的使用&lt;/h
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="retrofit" scheme="http://yoursite.com/tags/retrofit/"/>
    
      <category term="rxjava" scheme="http://yoursite.com/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Android Retrofit 使用</title>
    <link href="http://yoursite.com/2017/02/24/Android%20Retrofit%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/02/24/Android Retrofit 使用/</id>
    <published>2017-02-23T16:00:00.000Z</published>
    <updated>2017-02-24T06:13:06.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android Retrofit 使用</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Install&#x2026;&#x2026;..</h3>
<div class="outline-text-3" id="text-1-1">
<p>
在build.gradle 中加入下面代码
</p>
<div class="org-src-container">

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.2.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:okhttp:3.5.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> How to use do a get request</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> add interface MegaService</h4>
<div class="outline-text-4" id="text-1-2-1">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MegaService</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@GET</span>(<span class="string">"servlet"</span>) Call&amp;lt;Code&amp;gt; listCodeRepo(<span class="annotation">@Query</span>(<span class="string">"parm"</span>) String user);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
如果api类似于:<a href="http://192.168.1.106:8080/httpclient_gjj/servlet?parm=code" target="_blank" rel="external">http://192.168.1.106:8080/httpclient_gjj/servlet?parm=code</a> 需要
使用@Query注解.
</p>
</blockquote>
</div>
</div>
<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> add Gson support</h4>
<div class="outline-text-4" id="text-1-2-2">
</div><ol class="org-ol"><li><a id="sec-1-2-2-1" name="sec-1-2-2-1"></a>install&#x2026;. Gson conventer<br><div class="outline-text-5" id="text-1-2-2-1">
<p>
在build.gradle 中
</p>
<div class="org-src-container">

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</li>

<li><a id="sec-1-2-2-2" name="sec-1-2-2-2"></a>create gson model<br><div class="outline-text-5" id="text-1-2-2-2">
<p>
response数据如下:
</p>
<div class="org-src-container">

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">{"<span class="attribute">CheckCode</span>":<span class="value"><span class="string">"/9j/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAx\nNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy\nMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAAUCAAUADwEASIAAhEBAxEBBCIA/8QAHwAAAQUB\nAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEG\nE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW\nV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLD\nxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAA\nAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKR\nobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp\nanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU\n1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADgQBAAIRAxEEAAA/APcElDGLEjcsB16/d6/N0/8A\nrdc/Ng3Gq6xa+VeyrbJam7WEWpLGVkJVA28SEZJIYLt6cZyed5JQxixI3LAdev3evzdP/rdc/Nzc\nEl/c6vHdajpl9IIpytqiSQmGMAgCQ5m3Fip6443ADOTvzqN3SR2YRRu3K1l3td+Su/x3XTs/f6KK\nKlvL/WoNRsLW3vbKZ7mb/VG2dSsQ27mZvOPTKgcfMSOzcrZ63Leax9nXV9OjC3JiW0KlppFXAPPn\ncZw3O09O+eblrFO3iK4vJWYQGGGCD5gc4OX/AIiQCWX64HXPzZU1pfXwt7FtOit9mpLci8hZBGQH\nV94UuW8wjg5GCWJDEH5p1T/4f+vM6abpSXLK2y193rrt1torLXcKKKKs2ety3msfZ11fTowtyYlt\nCpaaRVwDz53GcNztPTvnneSUMYsSNywHXr93r83T/wCt1z83MTWl9fC3sW06K32aktyLyFkEZAdX\n3hS5bzCODkYJYkMQfm6dJQxixI3LAdev3evzdP8A63XPzVTvbU5sWoLlcLeit99137PVBRRRQkoY\nxYkblgOvX7vX5un/ANbrn5rFq4eIkEnkDk+w9z/n16mukoYxYkblgOvX7vX5un/1uufmsWrh4iQS\neQOT7D3P+fXqdDjCiiiqUdw7GLkjlc/M3OfL9/8Aa/zk5I7h2MXJHK5+Zuc+X7/7X+cnJRQAUUUU\nR3DsYuSOVz8zc58v3/2v85OSO4djFyRyufmbnPl+/wDtf5yclFABRRRRHcOxi5I5XPzNzny/f/a/\nzk5I7h2MXJHK5+Zuc+X7/wC1/nJyUUAFFFFEdw7GLkjlc/M3OfL9/wDa/wA5ObVjKZYSzf7Pcnqi\nnufeiigAooor/9k="</span></span>}</span><br></pre></td></tr></table></figure>
</div>
<p>
则model为:
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * CheckCode : "fsadfs"</span><br><span class="line">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String CheckCode;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getCheckCode</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> CheckCode;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCheckCode</span><span class="params">(String CheckCode)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.CheckCode = CheckCode;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3"><span class="section-number-4">1.2.3</span> Retrofit 操作</h4>
<div class="outline-text-4" id="text-1-2-3">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(apiUri)</span><br><span class="line">	.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">	.build();</span><br><span class="line">MegaService service = retrofit.create(MegaService.class);</span><br><span class="line"></span><br><span class="line">Call&amp;lt;Code&amp;gt; call = service.listCodeRepo(<span class="string">"code"</span>);</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> How to use to do a post request</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1"><span class="section-number-4">1.3.1</span> update interface MegaService</h4>
<div class="outline-text-4" id="text-1-3-1">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@FormUrlEncoded</span> <span class="annotation">@POST</span>(<span class="string">"servlet"</span>) Call&amp;lt;ProvidentFund&amp;gt; postData(<span class="annotation">@Query</span>(<span class="string">"parm"</span>) String user,</span><br><span class="line">      <span class="annotation">@Field</span>(<span class="string">"UserType"</span>) String type, <span class="annotation">@Field</span>(<span class="string">"UserId"</span>) String id, <span class="annotation">@Field</span>(<span class="string">"UserPwd"</span>) String psd,</span><br><span class="line">      <span class="annotation">@Field</span>(<span class="string">"CheckCode"</span>) String code);</span><br></pre></td></tr></table></figure>
</div>
<ol class="org-ol">
<li>Illegal Argument Exception - @Field parameters can only be used with form encoding
</li>
</ol>
<blockquote>
<p>
使用@Filed 注解需要添加@FormUrlEncoded注解在方法前面
</p>
</blockquote>
</div>
</div>
<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2"><span class="section-number-4">1.3.2</span> Retrofit 操作</h4>
<div class="outline-text-4" id="text-1-3-2">
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Call&amp;lt;ProvidentFund&amp;gt; call = service.postData(<span class="string">"login"</span>, <span class="string">"10"</span>, mUserName.getText().toString(),</span><br><span class="line">	mUserPsd.getText().toString(), mProvidentCode.getText().toString());</span><br><span class="line">call.execute()</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
</div>

Last Updated 2017-02-24 Fri 14:13.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android Retrofit 使用&lt;/h2&gt;
&lt;div 
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView.ItemDecoration的用法</title>
    <link href="http://yoursite.com/2017/02/23/RecylcerView.ItemDecoration%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/02/23/RecylcerView.ItemDecoration的用法/</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2017-02-23T03:15:20.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> RecylerView.Itemdecoration的用法</h2>
<div class="outline-text-2" id="text-1">
<p>
Itemdecoration 顾名思义是item的装饰器,用来自定义childView,有三个方法:
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getItemOffsets(Rect outRect, View view, Recylerview parant, Recylerview.State state){}</span><br><span class="line">onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {}</span><br><span class="line">onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state){}</span><br></pre></td></tr></table></figure>
</div>
</div>
<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> getItemoffsets的作用</h3>
<div class="outline-text-3" id="text-1-1">
<p>
设置item 的偏移量,就是给item添加padding,如outRect.bottom = 30 就是添加padding 30
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outRect.bottom = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-02-23 Thu 11:15.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; RecylerView.Itemdecoration的用法&lt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="recyclerview" scheme="http://yoursite.com/tags/recyclerview/"/>
    
  </entry>
  
  <entry>
    <title>Android 单元测试框架Robolectric</title>
    <link href="http://yoursite.com/2017/02/23/Android%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6Robolectric/"/>
    <id>http://yoursite.com/2017/02/23/Android单元测试框架Robolectric/</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2017-02-23T14:59:31.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android 单元测试框架robolectric</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Robolectric‘s install</h3>
<div class="outline-text-3" id="text-1-1">
<p>
在build.gralde 中
</p>
<div class="org-src-container">

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">  testCompile <span class="string">"org.robolectric:robolectric:3.2.2"</span></span><br><span class="line">  testCompile <span class="string">'org.assertj:assertj-core:1.7.1'</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 测试 Activity</h3>
<div class="outline-text-3" id="text-1-2">
<p>
constants = BuildConfig.class ,Robolectric 通过constants 来计算gradle编译程序需要的输出值。
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@RunWith</span>(RobolectricTestRunner.class)</span><br><span class="line"><span class="annotation">@Config</span>(constants = BuildConfig.class, sdk = <span class="number">21</span>, packageName = <span class="string">"com.mega.ui.activity"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvidentFundNativeActivityTest</span> </span>{</span><br><span class="line">  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testActivity</span><span class="params">()</span> </span>{</span><br><span class="line">    ProvidentFundNativeActivity activity =</span><br><span class="line">    Robolectric.setupActivity(ProvidentFundNativeActivity.class);</span><br><span class="line"></span><br><span class="line">    EditText user = (EditText) activity.findViewById(R.id.providentUser);</span><br><span class="line">    EditText psd = (EditText) activity.findViewById(R.id.providentPsd);</span><br><span class="line">    EditText code = (EditText) activity.findViewById(R.id.providentCode);</span><br><span class="line">    CheckBox mRbAgreement = (CheckBox) activity.findViewById(R.id.rbAgreement);</span><br><span class="line">    user.setText(<span class="string">"1"</span>);</span><br><span class="line">    psd.setText(<span class="string">"1"</span>);</span><br><span class="line">    code.setText(<span class="string">"1"</span>);</span><br><span class="line">    mRbAgreement.setChecked(<span class="keyword">true</span>);</span><br><span class="line">    activity.findViewById(R.id.btn_login).performClick();</span><br><span class="line">    Intent expectedIntent = <span class="keyword">new</span> Intent(activity, ProvidentFundNativeDetailActivity.class);</span><br><span class="line">    Intent actualIntent = ShadowApplication.getInstance().getNextStartedActivity();</span><br><span class="line">    assertTrue(actualIntent.filterEquals(expectedIntent));</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 遇到的问题</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>java.lang.NoClassDefFoundError: javax/microedition/khronos/opengles/GL
<span class="underline">是Config{sdk = 21}SDK版本问题,降低版本号。</span>
</li>
<li>assertThat(actualIntent).isEqualTo(expectedIntent)报java.lang.AssertionError:
</li>
</ul>
<blockquote>
<p>
java.lang.AssertionError:
Expecting:
 &lt;"Intent { cmp=com.mega.ui.activity/.ProvidentFundNativeDetailActivity } (Intent@3966c679)"&gt;
to be equal to:
 &lt;"Intent { cmp=com.mega.ui.activity/.ProvidentFundNativeDetailActivity } (Intent@66a99584)"&gt;
but was not.
</p>
</blockquote>
<p>
修改为:
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertTrue(actualIntent.filterEquals(expectedIntent));</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-02-23 Thu 22:59.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android 单元测试框架robolectric&lt;/h2&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="robolectric" scheme="http://yoursite.com/tags/robolectric/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView (1)打开和关闭二级列表,(2) 添加分割线</title>
    <link href="http://yoursite.com/2017/02/21/AndroidRecyclerView%E6%89%93%E5%BC%80%E5%92%8C%E5%85%B3%E9%97%AD%E4%BA%8C%E7%BA%A7%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/02/21/AndroidRecyclerView打开和关闭二级列表/</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-02-22T01:31:22.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android Recyclerview 打开和关闭二级列表</h2>
<div class="outline-text-2" id="text-1">
<p>
思路: 就是更新RecyclerView 的 数据集合 List&lt;Object&gt; mItems, 通过判断当前父item
对应的开闭状态更新mItems.
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&amp;lt;Integer&amp;gt; fatherStatue = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line"><span class="comment">// 父item 的点击事件更新mItems</span></span><br><span class="line">vh.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">     <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line"></span><br><span class="line">       List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; datas = items.get(mitems.get(position));</span><br><span class="line">       <span class="keyword">if</span> (fatherStatus.get(position) == FATHER_CLOSE) {</span><br><span class="line">	 fatherStatus.set(position, FATHER_OPEN);</span><br><span class="line">	 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; datas.size(); i++) {</span><br><span class="line">	   mitems.add(position + i + <span class="number">1</span>, datas.get(i));</span><br><span class="line">	   mitemType.add(position + i + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	   fatherStatus.add(position + i + <span class="number">1</span>, FATHER_OPEN);</span><br><span class="line">	 }</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">	 fatherStatus.set(position, FATHER_CLOSE);</span><br><span class="line">	 <span class="keyword">for</span> (<span class="keyword">int</span> i = datas.size(); i &amp;gt; <span class="number">0</span>; i--) {</span><br><span class="line">	   mitems.remove(position + i);</span><br><span class="line">	   mitemType.remove(position + i);</span><br><span class="line">	   fatherStatus.remove(position + i);</span><br><span class="line">	 }</span><br><span class="line">       }</span><br><span class="line">       notifyDataSetChanged();</span><br><span class="line">     }</span><br><span class="line">   });</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Android Recyclerview 添加分割线</h2>
<div class="outline-text-2" id="text-2">
<p>
通过DividerItemDecoration 实现分割线
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DividerItemDecoration mDividerItemDecoration =</span><br><span class="line">    <span class="keyword">new</span> DividerItemDecoration(binding.providentRecycler.getContext(),</span><br><span class="line">	mLayoutManager.getOrientation());</span><br><span class="line">binding.providentRecycler.addItemDecoration(mDividerItemDecoration);</span><br></pre></td></tr></table></figure>
</div>
<p>
<b>Divideritemdecoration 在android resposible library 25 才存在</b>
</p>
</div>
</div>

Last Updated 2017-02-22 Wed 09:31.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android Recyclerview 打开和关闭二级列表
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="recyclerview" scheme="http://yoursite.com/tags/recyclerview/"/>
    
  </entry>
  
  <entry>
    <title>chatnote</title>
    <link href="http://yoursite.com/2017/02/19/chatnote/"/>
    <id>http://yoursite.com/2017/02/19/chatnote/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 资料</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> WhatsApp 通信协议</h3>
<div class="outline-text-3" id="text-1-1">
<p>
WhatesApp服务器池使用了SSL Socket, 在客户端重新连接对消息进行检索之,所有消息都会
在服务器上排队。消息的成功检索会发回给WhatsApp服务器，它将会被重新转发给原始发送者
一旦客户端成功接收消息，它就会在服务器存储中擦除。
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 思路</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 服务端</h3>
<div class="outline-text-3" id="text-2-1">
<p>
客户端发送消息到服务器，服务器接收消息，检查对方是否在线，这时候存在两种情况
</p>
<ol class="org-ol">
<li>在线，将消息推送到客户端
</li>
<li>不在线，保存消息到数据库，当客户端上线，将消息推送到客户端。
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 客户端</h3>
<div class="outline-text-3" id="text-2-2">
<p>
保持在线，检查服务端消息。用户上线检查服务器是否有消息，有消息展现消息。
</p>
</div>
</div>
</div>

Last Updated 2017-02-20 Mon 14:28.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 资料&lt;/h2&gt;
&lt;div class=&quot;outline-te
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="chatnote" scheme="http://yoursite.com/tags/chatnote/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView add header and child view</title>
    <link href="http://yoursite.com/2017/02/19/Android%20RecyclerView%E6%B7%BB%E5%8A%A0header%E5%92%8Cchild%20view/"/>
    <id>http://yoursite.com/2017/02/19/Android RecyclerView添加header和child view/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-03-20T07:00:01.000Z</updated>
    
    <content type="html"><![CDATA[


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Android RecyclerView</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Add Header for RecyclerView</h3>
<div class="outline-text-3" id="text-1-1">
<p>
   继承RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; 自定义一个
ProvidentFundDetailAdater.onCreateviewholder()创建新的RecyclerView.ViewHolder 和初始化一些RecyclerView使用的private filed。
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span> <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent,</span><br><span class="line"><span class="keyword">int</span> viewType)</span> </span>{</span><br><span class="line"> View v;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (viewType == HEADER_VIEW) {</span><br><span class="line">     v = LayoutInflater.from(parent.getContext())</span><br><span class="line">	 .inflate(R.layout.header_provident, parent, <span class="keyword">false</span>);</span><br><span class="line">     HeaderFooterViewHolder vh = <span class="keyword">new</span> HeaderFooterViewHolder(v);</span><br><span class="line">     <span class="keyword">return</span> vh;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span> (viewType == FOOTER_VIEW) {</span><br><span class="line"></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   v = LayoutInflater.from(parent.getContext()).</span><br><span class="line">	  inflate(R.layout.normal_provident, parent, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">   NormalViewHolder vh = <span class="keyword">new</span> NormalViewHolder(v);</span><br><span class="line">   <span class="keyword">return</span> vh;</span><br><span class="line">   }</span><br></pre></td></tr></table></figure>
</div>
<p>
   而创建Header View 需要创建它的ViewHoder ,我们需要一些状态来标识是Header View 还是
Normal View;
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL_VIEW = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEADER_VIEW = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FOOTER_VIEW = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> List&amp;lt;View&amp;gt; headers = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line"><span class="keyword">private</span> List&amp;lt;String&amp;gt; items = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line"><span class="keyword">private</span> List&amp;lt;View&amp;gt; footers = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br></pre></td></tr></table></figure>
</div>
<p>
通过判断position 和headers items 的size 大小判断 itemtype
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">       <span class="comment">//check what type our position is, based on the</span></span><br><span class="line">       <span class="comment">//assumption that the order is headers &amp;gt; items &amp;gt; footers</span></span><br><span class="line">       <span class="keyword">if</span>(position &amp;lt; headers.size()){</span><br><span class="line">	   <span class="keyword">return</span> TYPE_HEADER;</span><br><span class="line">	 }<span class="keyword">else</span> <span class="keyword">if</span>(position &amp;gt;= headers.size() + items.size()){</span><br><span class="line">	   <span class="keyword">return</span> TYPE_FOOTER;</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> TYPE_ITEM;</span><br><span class="line">   }</span><br></pre></td></tr></table></figure>
</div>
<p>
判断来View Type 就可以在onBindViewHolder()中bind itemview
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder vh,</span><br><span class="line">  <span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">   <span class="keyword">if</span> (position &amp;lt; headers.size()) {</span><br><span class="line">     View v = headers.get(position);</span><br><span class="line">     <span class="comment">//add our view to a header view and display it</span></span><br><span class="line">     prepareHeaderFooter((HeaderFooterViewHolder) vh, v);</span><br><span class="line">   } <span class="keyword">else</span> <span class="keyword">if</span> (position &amp;gt;= headers.size() + items.size()) {</span><br><span class="line">     View v = footers.get(position - items.size() - headers.size());</span><br><span class="line">     <span class="comment">//add oru view to a footer view and display it</span></span><br><span class="line">     prepareHeaderFooter((HeaderFooterViewHolder) vh, v);</span><br><span class="line">   } <span class="keyword">else</span> {</span><br><span class="line">     <span class="comment">//it's one of our items, display as required</span></span><br><span class="line">     prepareGeneric((NormalViewHolder) vh, position - headers.size());</span><br><span class="line">   }</span><br><span class="line"> }</span><br></pre></td></tr></table></figure>
</div>
<p>
通过addHeader(View header)向集合headers 中添加item
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(View header)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (!headers.contains(header)) {</span><br><span class="line">    headers.add(header);</span><br><span class="line">    <span class="comment">//animate</span></span><br><span class="line">    notifyItemInserted(headers.size() - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Android RecyclerView</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Add child view for RecyclerView</h3>
<div class="outline-text-3" id="text-2-1">
<p>
首先是List&lt;Interger&gt; mitemType 存储item的类型: 0代表NORMAL VIEW, 1代表CHILD VIEW。
和List&lt;String&gt; mitems 存储总的数据.
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> HashMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; items = <span class="keyword">new</span> HashMap&amp;lt;&amp;gt;();</span><br><span class="line"> List&amp;lt;String&amp;gt; item = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line"> item.add(<span class="string">"hello"</span>);</span><br><span class="line"> item.add(<span class="string">"hello"</span>);</span><br><span class="line"> item.add(<span class="string">"hello"</span>);</span><br><span class="line"> items.put(<span class="string">"2001"</span>, item);</span><br><span class="line"> items.put(<span class="string">"2002"</span>, item);</span><br><span class="line"> items.put(<span class="string">"2003"</span>, item);</span><br><span class="line"> List&amp;lt;String&amp;gt; mitems = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line"> List&amp;lt;Integer&amp;gt; mitemType = <span class="keyword">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class="line">Iterator i = items.keySet().iterator();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (i.hasNext()) {</span><br><span class="line">   String key = (String) i.next();</span><br><span class="line">   mitemType.add(<span class="number">0</span>);</span><br><span class="line">   mitems.add(key);</span><br><span class="line">   List&amp;lt;String&amp;gt; datas = items.get(key);</span><br><span class="line">   <span class="keyword">for</span> (String data : datas) {</span><br><span class="line">     mitems.add(data);</span><br><span class="line">     mitemType.add(<span class="number">1</span>);</span><br><span class="line">   }</span><br><span class="line"> }</span><br></pre></td></tr></table></figure>
</div>
<p>
然后就是和add header 一样, 在getItemType中判断item的类型
</p>
<div class="org-src-container">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (position &amp;lt; headers.size()) {</span><br><span class="line">    <span class="keyword">return</span> HEADER_VIEW;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (position &amp;gt;= headers.size() + mitems.size()) {</span><br><span class="line">    <span class="keyword">return</span> FOOTER_VIEW;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (mitemType.get(position - headers.size() - footers.size()) == <span class="number">0</span>) {</span><br><span class="line">    <span class="keyword">return</span> NORMAL_VIEW;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> CHILD_VIEW;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>

Last Updated 2017-03-20 Mon 15:00.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Android RecyclerView&lt;/h2&gt;
&lt;di
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="journal" scheme="http://yoursite.com/tags/journal/"/>
    
      <category term="recyclerview" scheme="http://yoursite.com/tags/recyclerview/"/>
    
  </entry>
  
  <entry>
    <title>MVVM之DataBinding</title>
    <link href="http://yoursite.com/2016/08/14/MVVM%E4%B9%8BDataBinding/"/>
    <id>http://yoursite.com/2016/08/14/MVVM之DataBinding/</id>
    <published>2016-08-14T13:58:17.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>android DataBinding 的使用，注意：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">       <span class="attr">name</span>=<span class="string">"viewModel"</span></div><div class="line">       <span class="attr">type</span>=<span class="string">"com.mega.viewmodel.UserViewModel"</span>/&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/login"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_below</span>=<span class="string">"@+id/user_password"</span></div><div class="line">       <span class="attr">android:background</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">       <span class="attr">android:onClick</span>=<span class="string">"@&#123;viewModel.setLogin&#125;"</span></div><div class="line">       <span class="attr">android:text</span>=<span class="string">"Login"</span></div><div class="line">       <span class="attr">android:textColor</span>=<span class="string">"@color/wild_sand"</span></div><div class="line">       /&gt;</div></pre></td></tr></table></figure></p>
<p>要使用viewModel的 onclick生效必须在View中绑定ViewModel<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ActivityLoginBinding loginBinding;</div><div class="line">loginBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_login);</div><div class="line">loginBinding.setViewModel(<span class="keyword">new</span> UserViewModel());</div></pre></td></tr></table></figure></p>
<h2 id="viewModel-的作用"><a href="#viewModel-的作用" class="headerlink" title="viewModel 的作用"></a>viewModel 的作用</h2><p>The presenter only interacts with the view interface，get data from Model,<br>It retrieves data from the model and returns it formatted to the view. But unlike the typical MVC, it also decides what happens when you interact with the view.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;android DataBinding 的使用，注意：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自定义view之圆形头像</title>
    <link href="http://yoursite.com/2016/08/13/%E8%87%AA%E5%AE%9A%E4%B9%89view%E4%B9%8B%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F/"/>
    <id>http://yoursite.com/2016/08/13/自定义view之圆形头像/</id>
    <published>2016-08-13T14:47:03.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现的思路"><a href="#实现的思路" class="headerlink" title="实现的思路"></a>实现的思路</h1><pre><code>在开发中需要实现头像功能，本来是直接从网上找到开源图片库，不过我觉得需要提升自己的。所以开始自定义view 的功能，
先分析一下实现的思路，android 自带的ImageView 是显示图片是长方形，而我们需要实现的是圆形的展示图片，所以实际上就是将长方形变成圆形，而圆形显示需要先求出圆的半径r。
</code></pre><p>新建一个长方形，然后大小设置为自定义View的大小，圆的半径就等于宽和高中较短的<br>一半。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    mBorderPaint.setStrokeWidth(mBorderWidth);</div><div class="line">    mBitmapWidth = mBitmap.getWidth();</div><div class="line">    mBitmapHeight = mBitmap.getHeight();</div><div class="line">    mBorderRect.set(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">    mBorderRadius = Math.min((mBorderRect.width() - mBorderWidth) / <span class="number">2</span>,</div><div class="line">        (mBorderRect.height() - mBorderWidth) / <span class="number">2</span>);</div><div class="line">    mDrawableRect.set(<span class="number">0</span>, <span class="number">0</span>, mBorderRect.width() - mBitmapWidth,</div><div class="line">        mBorderRect.height() - mBitmapWidth);</div><div class="line">    mDrawableRadius = Math.min(mDrawableRect.width() / <span class="number">2</span>, mDrawableRect.height() / <span class="number">2</span>);</div><div class="line">    updateShaderMatrix();</div><div class="line">    invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来获取圆点的坐标<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = getWidth()  / <span class="number">2</span> </div><div class="line">y = getHeight() / <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>通过Paint来绘制图片。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mBitmapShader = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Paint mBitmapPaint = <span class="keyword">new</span> Paint();</div><div class="line">mBitmapPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">mBitmapPaint.setShader(mBitmapShader);</div></pre></td></tr></table></figure></p>
<p>重写onDraw()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, mDrawableRadius, mBitmapPaint);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现的思路&quot;&gt;&lt;a href=&quot;#实现的思路&quot; class=&quot;headerlink&quot; title=&quot;实现的思路&quot;&gt;&lt;/a&gt;实现的思路&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;在开发中需要实现头像功能，本来是直接从网上找到开源图片库，不过我觉得需要提升自己的。所以开始自定义v
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>angular笔记</title>
    <link href="http://yoursite.com/2016/03/18/angular%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/03/18/angular笔记/</id>
    <published>2016-03-18T06:52:55.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-and-scope"><a href="#this-and-scope" class="headerlink" title="this and $scope"></a>this and $scope</h1><p>$scope 是全局的，可以直接使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ACtrl</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">                   $scope.test = <span class="string">"一个例子"</span>; <span class="comment">//在$scope对象中加入test</span></div><div class="line">               &#125;</div></pre></td></tr></table></figure>
<p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ACtrl"</span>&gt;</span></div><div class="line">                    &#123;&#123;test&#125;&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>this 则只能在当前controllers中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ACtrl</span>(<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="keyword">var</span> vm = <span class="keyword">this</span> ;   </div><div class="line">              <span class="keyword">this</span>.test = <span class="string">"一个例子"</span>; <span class="comment">//在$scope对象中加入test</span></div><div class="line">               &#125;</div></pre></td></tr></table></figure></p>
<p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ACtrl as a"</span>&gt;</span></div><div class="line">                    &#123;&#123;a.test&#125;&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;this-and-scope&quot;&gt;&lt;a href=&quot;#this-and-scope&quot; class=&quot;headerlink&quot; title=&quot;this and $scope&quot;&gt;&lt;/a&gt;this and $scope&lt;/h1&gt;&lt;p&gt;$scope 是全局的，可以直接使用&lt;/
    
    </summary>
    
      <category term="Angularjs" scheme="http://yoursite.com/categories/Angularjs/"/>
    
    
      <category term="Angularjs" scheme="http://yoursite.com/tags/Angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Ruby_Style_Guide</title>
    <link href="http://yoursite.com/2016/01/08/Ruby-Style-Guide/"/>
    <id>http://yoursite.com/2016/01/08/Ruby-Style-Guide/</id>
    <published>2016-01-08T06:40:20.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ruby-Style-Guide"><a href="#Ruby-Style-Guide" class="headerlink" title="Ruby Style Guide"></a>Ruby Style Guide</h1><p>This is Airbnb’s Ruby Style Guide.</p>
<p>It was inspired by <a href="https://github.com/styleguide/ruby" target="_blank" rel="external">Github’s guide</a> and <a href="https://github.com/bbatsov/ruby-style-guide" target="_blank" rel="external">Bozhidar Batsov’s guide</a>.</p>
<p>Airbnb also maintains a <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">JavaScript Style Guide</a>.</p>
<p>)</p>
<h2 id="Whitespace"><a href="#Whitespace" class="headerlink" title="Whitespace"></a>Whitespace</h2><h3 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h3><ul>
<li><p>Use soft-tabs with a two space-indent.</p>
</li>
<li><p>Indent <code>when</code> as deep as <code>case</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span></div><div class="line"><span class="keyword">when</span> song.name == <span class="string">'Misty'</span></div><div class="line">  puts <span class="string">'Not again!'</span></div><div class="line"><span class="keyword">when</span> song.duration &gt; <span class="number">120</span></div><div class="line">  puts <span class="string">'Too long!'</span></div><div class="line"><span class="keyword">when</span> Time.now.hour &gt; <span class="number">21</span></div><div class="line">  puts <span class="string">"It's too late"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  song.play</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">kind = <span class="keyword">case</span> year</div><div class="line">       <span class="keyword">when</span> <span class="number">1850</span>..<span class="number">1889</span> <span class="keyword">then</span> <span class="string">'Blues'</span></div><div class="line">       <span class="keyword">when</span> <span class="number">1890</span>..<span class="number">1909</span> <span class="keyword">then</span> <span class="string">'Ragtime'</span></div><div class="line">       <span class="keyword">when</span> <span class="number">1910</span>..<span class="number">1929</span> <span class="keyword">then</span> <span class="string">'New Orleans Jazz'</span></div><div class="line">       <span class="keyword">when</span> <span class="number">1930</span>..<span class="number">1939</span> <span class="keyword">then</span> <span class="string">'Swing'</span></div><div class="line">       <span class="keyword">when</span> <span class="number">1940</span>..<span class="number">1950</span> <span class="keyword">then</span> <span class="string">'Bebop'</span></div><div class="line">       <span class="keyword">else</span> <span class="string">'Jazz'</span></div><div class="line">       <span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Align function parameters either all on the same line or one per line.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># good</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_translation</span><span class="params">(phrase_id,</span></span></div><div class="line">                            phrase_key,</div><div class="line">                            target_locale,</div><div class="line">                            value,</div><div class="line">                            user_id,</div><div class="line">                            do_xss_check,</div><div class="line">                            allow_verification)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">create_translation</span><span class="params">(phrase_id, phrase_key, target_locale,</span></span></div><div class="line">                            value, user_id, do_xss_check, allow_verification)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Indent succeeding lines in multi-line boolean expressions.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># good</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_eligible?</span><span class="params">(user)</span></span></div><div class="line">  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;&amp;</div><div class="line">    is_in_program?(user) &amp;&amp;</div><div class="line">    program_not_expired</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_eligible?</span><span class="params">(user)</span></span></div><div class="line">  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;&amp;</div><div class="line">  is_in_program?(user) &amp;&amp;</div><div class="line">  program_not_expired</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h3><ul>
<li><p>Never leave trailing whitespace.</p>
</li>
<li><p>Use spaces around operators; after commas, colons, and semicolons; and around<br><code>{</code> and before <code>}</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">1</span> + <span class="number">2</span></div><div class="line">a, b = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="number">1</span> &gt; <span class="number">2</span> ? <span class="literal">true</span> : <span class="literal">false</span>; puts <span class="string">'Hi'</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].each &#123; <span class="params">|e|</span> puts e &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>No spaces after <code>(</code>, <code>[</code> or before <code>]</code>, <code>)</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">some(arg).other</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].length</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Newlines"><a href="#Newlines" class="headerlink" title="Newlines"></a>Newlines</h3><ul>
<li><p>Add a new line after <code>if</code> conditions span multiple lines to help<br>differentiate between the conditions and the body.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp;</div><div class="line">   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class="line"></div><div class="line">  redirect_to_alteration @reservation_alteration</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Add a new line after conditionals, blocks, case statements, etc.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> robot.is_awesome?</div><div class="line">  send_robot_present</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">robot.add_trait(<span class="symbol">:human_like_intelligence</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="Line-Length"><a href="#Line-Length" class="headerlink" title="Line Length"></a>Line Length</h2><p>Keep each line of code to a readable length. Unless you have a reason<br>to, keep lines to fewer than 100 characters. Keeping code visually<br>grouped together (as a 100-character line limit enforces) makes it<br>easier to understand. For example, you don’t have to scroll back and<br>forth on one line to see what’s going on – you can view it all<br>together.</p>
<p>Here are examples from our codebase showing several techniques for<br>breaking complex statements into multiple lines that are all &lt; 100<br>characters. Notice techniques like:</p>
<ul>
<li>liberal use of linebreaks inside unclosed <code>(</code> <code>{</code> <code>[</code></li>
<li>chaining methods, ending unfinished chains with a <code>.</code></li>
<li>composing long strings by putting strings next to each other, separated<br>by a backslash-then-newline.</li>
<li>breaking long logical statements with linebreaks after operators like<br><code>&amp;&amp;</code> and <code>||</code></li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scope = Translation::Phrase.includes(<span class="symbol">:phrase_translations</span>).</div><div class="line">  joins(<span class="symbol">:phrase_screenshots</span>).</div><div class="line">  where(<span class="symbol">:phrase_screenshots</span> =&gt; &#123;</div><div class="line">    <span class="symbol">:controller</span> =&gt; controller_name,</div><div class="line">    <span class="symbol">:action</span> =&gt; JAROMIR_JAGR_SALUTE,</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">translation = FactoryGirl.create(</div><div class="line">  <span class="symbol">:phrase_translation</span>,</div><div class="line">  <span class="symbol">:locale</span> =&gt; <span class="symbol">:is</span>,</div><div class="line">  <span class="symbol">:phrase</span> =&gt; phrase,</div><div class="line">  <span class="symbol">:key</span> =&gt; <span class="string">'phone_number_not_revealed_time_zone'</span>,</div><div class="line">  <span class="symbol">:value</span> =&gt; <span class="string">'Símanúmerið þitt verður ekki birt. Það er aðeins hægt að hringja á '</span>\</div><div class="line">            <span class="string">'milli 9:00 og 21:00 %&#123;time_zone&#125;.'</span></div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp;</div><div class="line">   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class="line"></div><div class="line">  redirect_to_alteration @reservation_alteration</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> @presenter.guest_visa_russia? </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> icon_tile_for(I18n.t(<span class="string">"email.reservation_confirmed_guest.visa.details_header"</span>,</span></div><div class="line">                           <span class="symbol">:default</span> =&gt; <span class="string">"Visa for foreign Travelers"</span>),</div><div class="line">                    <span class="symbol">:beveled_big_icon</span> =&gt; <span class="string">"stamp"</span>) <span class="keyword">do</span> <span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> I18n.t(<span class="string">"email.reservation_confirmed_guest.visa.russia.details_copy"</span>,</span></div><div class="line">               <span class="symbol">:default</span> =&gt; <span class="string">"Foreign guests travelling to Russia may need to obtain a visa..."</span>) <span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
<p>These code snippets are very much more readable than the alternative:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">scope = Translation::Phrase.includes(<span class="symbol">:phrase_translations</span>).joins(<span class="symbol">:phrase_screenshots</span>).where(<span class="symbol">:phrase_screenshots</span> =&gt; &#123; <span class="symbol">:controller</span> =&gt; controller_name, <span class="symbol">:action</span> =&gt; JAROMIR_JAGR_SALUTE &#125;)</div><div class="line"></div><div class="line">translation = FactoryGirl.create(<span class="symbol">:phrase_translation</span>, <span class="symbol">:locale</span> =&gt; <span class="symbol">:is</span>, <span class="symbol">:phrase</span> =&gt; phrase, <span class="symbol">:key</span> =&gt; <span class="string">'phone_number_not_revealed_time_zone'</span>, <span class="symbol">:value</span> =&gt; <span class="string">'Símanúmerið þitt verður ekki birt. Það er aðeins hægt að hringja á milli 9:00 og 21:00 %&#123;time_zone&#125;.'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp; @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class="line">  redirect_to_alteration @reservation_alteration</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> @presenter.guest_visa_russia? </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> icon_tile_for(I18n.t(<span class="string">"email.reservation_confirmed_guest.visa.details_header"</span>, <span class="symbol">:default</span> =&gt; <span class="string">"Visa for foreign Travelers"</span>), <span class="symbol">:beveled_big_icon</span> =&gt; <span class="string">"stamp"</span>) <span class="keyword">do</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">%=</span></span><span class="ruby"> I18n.t(<span class="string">"email.reservation_confirmed_guest.visa.russia.details_copy"</span>, <span class="symbol">:default</span> =&gt; <span class="string">"Foreign guests travelling to Russia may need to obtain a visa prior to..."</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span><span class="ruby"> <span class="keyword">end</span> </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="Commenting"><a href="#Commenting" class="headerlink" title="Commenting"></a>Commenting</h2><blockquote>
<p>Though a pain to write, comments are absolutely vital to keeping our code<br>readable. The following rules describe what you should comment and where. But<br>remember: while comments are very important, the best code is<br>self-documenting. Giving sensible names to types and variables is much better<br>than using obscure names that you must then explain through comments.</p>
<p>When writing your comments, write for your audience: the next contributor who<br>will need to understand your code. Be generous — the next one may be you!</p>
</blockquote>
<p>&mdash;<a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml" target="_blank" rel="external">Google C++ Style Guide</a></p>
<p>Portions of this section borrow heavily from the Google<br><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Comments" target="_blank" rel="external">C++</a> and <a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments" target="_blank" rel="external">Python</a> style guides.</p>
<h3 id="File-class-level-comments"><a href="#File-class-level-comments" class="headerlink" title="File/class-level comments"></a>File/class-level comments</h3><p>Every class definition should have an accompanying comment that describes what<br>it is for and how it should be used.</p>
<p>A file that contains zero classes or more than one class should have a comment<br>at the top describing its contents.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Automatic conversion of one locale to another where it is possible, like</span></div><div class="line"><span class="comment"># American to British English.</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Translation</span></span></div><div class="line">  <span class="comment"># Class for converting between text between similar locales.</span></div><div class="line">  <span class="comment"># Right now only conversion between American English -&gt; British, Canadian,</span></div><div class="line">  <span class="comment"># Australian, New Zealand variations is provided.</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">PrimAndProper</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">      @converters = &#123; <span class="symbol">:en</span> =&gt; &#123; <span class="symbol">:<span class="string">"en-AU"</span></span> =&gt; AmericanToAustralian.new,</div><div class="line">                               <span class="symbol">:<span class="string">"en-CA"</span></span> =&gt; AmericanToCanadian.new,</div><div class="line">                               <span class="symbol">:<span class="string">"en-GB"</span></span> =&gt; AmericanToBritish.new,</div><div class="line">                               <span class="symbol">:<span class="string">"en-NZ"</span></span> =&gt; AmericanToKiwi.new,</div><div class="line">                             &#125; &#125;</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment"># Applies transforms to American English that are common to</span></div><div class="line">  <span class="comment"># variants of all other English colonies.</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AmericanToColonial</span></span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># Converts American to British English.</span></div><div class="line">  <span class="comment"># In addition to general Colonial English variations, changes "apartment"</span></div><div class="line">  <span class="comment"># to "flat".</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AmericanToBritish</span> &lt; AmericanToColonial</span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>All files, including data and config files, should have file-level comments. From <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```ruby</div><div class="line"># List of American-to-British spelling variants.</div><div class="line">#</div><div class="line"># This list is made with</div><div class="line"># lib/tasks/list_american_to_british_spelling_variants.rake.</div><div class="line">#</div><div class="line"># It contains words with general spelling variation patterns:</div><div class="line">#   [trave]led/lled, [real]ize/ise, [flav]or/our, [cent]er/re, plus</div><div class="line"># and these extras:</div><div class="line">#   learned/learnt, practices/practises, airplane/aeroplane, ...</div><div class="line"></div><div class="line">sectarianizes: sectarianises</div><div class="line">neutralization: neutralisation</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="Function-comments"><a href="#Function-comments" class="headerlink" title="Function comments"></a>Function comments</h3><p>Every function declaration should have comments immediately preceding it that<br>describe what the function does and how to use it. These comments should be<br>descriptive (“Opens the file”) rather than imperative (“Open the file”); the<br>comment describes the function, it does not tell the function what to do. In<br>general, these comments do not describe how the function performs its task.<br>Instead, that should be left to comments interspersed in the function’s code.</p>
<p>Every function should mention what the inputs and outputs are, unless it meets<br>all of the following criteria:</p>
<ul>
<li>not externally visible</li>
<li>very short</li>
<li>obvious</li>
</ul>
<p>You may use whatever format you wish. In Ruby, two popular function<br>documentation schemes are <a href="http://tomdoc.org/" target="_blank" rel="external">TomDoc</a> and<br><a href="http://rubydoc.info/docs/yard/file/docs/GettingStarted.md" target="_blank" rel="external">YARD</a>. You can also<br>just write things out concisely:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Returns the fallback locales for the_locale.</span></div><div class="line"><span class="comment"># If opts[:exclude_default] is set, the default locale, which is otherwise</span></div><div class="line"><span class="comment"># always the last one in the returned list, will be excluded.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For example:</span></div><div class="line"><span class="comment">#   fallbacks_for(:"pt-BR")</span></div><div class="line"><span class="comment">#     =&gt; [:"pt-BR", :pt, :en]</span></div><div class="line"><span class="comment">#   fallbacks_for(:"pt-BR", :exclude_default =&gt; true)</span></div><div class="line"><span class="comment">#     =&gt; [:"pt-BR", :pt]</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fallbacks_for</span><span class="params">(the_locale, opts = &#123;&#125;)</span></span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="Block-and-inline-comments"><a href="#Block-and-inline-comments" class="headerlink" title="Block and inline comments"></a>Block and inline comments</h3><p>The final place to have comments is in tricky parts of the code. If you’re<br>going to have to explain it at the next code review, you should comment it now.<br>Complicated operations get a few lines of comments before the operations<br>commence. Non-obvious ones get comments at the end of the line.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fallbacks_for</span><span class="params">(the_locale, opts = &#123;&#125;)</span></span></div><div class="line">  <span class="comment"># dup() to produce an array that we can mutate.</span></div><div class="line">  ret = @fallbacks[the_locale].dup</div><div class="line"></div><div class="line">  <span class="comment"># We make two assumptions here:</span></div><div class="line">  <span class="comment"># 1) There is only one default locale (that is, it has no less-specific</span></div><div class="line">  <span class="comment">#    children).</span></div><div class="line">  <span class="comment"># 1) The default locale is just a language. (Like :en, and not :"en-US".)</span></div><div class="line">  <span class="keyword">if</span> opts[<span class="symbol">:exclude_default</span>] &amp;&amp;</div><div class="line">      ret.last == default_locale &amp;&amp;</div><div class="line">      ret.last != language_from_locale(the_locale)</div><div class="line">    ret.pop</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  ret</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>On the other hand, never describe the code. Assume the person reading the code<br>knows the language (though not what you’re trying to do) better than you do.</p>
<h3 id="Punctuation-spelling-and-grammar"><a href="#Punctuation-spelling-and-grammar" class="headerlink" title="Punctuation, spelling and grammar"></a>Punctuation, spelling and grammar</h3><p>Pay attention to punctuation, spelling, and grammar; it is easier to read<br>well-written comments than badly written ones.</p>
<p>Comments should be as readable as narrative text, with proper capitalization<br>and punctuation. In many cases, complete sentences are more readable than<br>sentence fragments. Shorter comments, such as comments at the end of a line of<br>code, can sometimes be less formal, but you should be consistent with your<br>style.</p>
<p>Although it can be frustrating to have a code reviewer point out that you are<br>using a comma when you should be using a semicolon, it is very important that<br>source code maintain a high level of clarity and readability. Proper<br>punctuation, spelling, and grammar help with that goal.</p>
<h3 id="TODO-comments"><a href="#TODO-comments" class="headerlink" title="TODO comments"></a>TODO comments</h3><p>Use TODO comments for code that is temporary, a short-term solution, or<br>good-enough but not perfect.</p>
<p>TODOs should include the string TODO in all caps, followed by the full name<br>of the person who can best provide context about the problem referenced by the<br>TODO, in parentheses. A colon is optional. A comment explaining what there is<br>to do is required. The main purpose is to have a consistent TODO format that<br>can be searched to find the person who can provide more details upon request.<br>A TODO is not a commitment that the person referenced will fix the problem.<br>Thus when you create a TODO, it is almost always your name that is given.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="comment"># TODO(RS): Use proper namespacing for this constant.</span></div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="comment"># TODO(drumm3rz4lyfe): Use proper namespacing for this constant.</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="comment"># TODO(Ringo Starr): Use proper namespacing for this constant.</span></div></pre></td></tr></table></figure>
<h3 id="Commented-out-code"><a href="#Commented-out-code" class="headerlink" title="Commented-out code"></a>Commented-out code</h3><p>Never leave commented-out code in our codebase.</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Method-definitions"><a href="#Method-definitions" class="headerlink" title="Method definitions"></a>Method definitions</h3><ul>
<li><p>Use <code>def</code> with parentheses when there are parameters. Omit the<br>parentheses when the method doesn’t accept any parameters.</p>
   <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></div><div class="line">  <span class="comment"># body omitted</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method_with_parameters</span><span class="params">(arg1, arg2)</span></span></div><div class="line">  <span class="comment"># body omitted</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Do not use default arguments. Use an options hash instead.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">obliterate</span><span class="params">(things, gently = <span class="literal">true</span>, except = [], at = Time.now)</span></span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">obliterate</span><span class="params">(things, options = &#123;&#125;)</span></span></div><div class="line">  default_options = &#123;</div><div class="line">    <span class="symbol">:gently</span> =&gt; <span class="literal">true</span>, <span class="comment"># obliterate with soft-delete</span></div><div class="line">    <span class="symbol">:except</span> =&gt; [], <span class="comment"># skip obliterating these things</span></div><div class="line">    <span class="symbol">:at</span> =&gt; Time.now, <span class="comment"># don't obliterate them until later</span></div><div class="line">  &#125;</div><div class="line">  options.reverse_merge!(default_options)</div><div class="line"></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Method-calls"><a href="#Method-calls" class="headerlink" title="Method calls"></a>Method calls</h3><p><strong>Use parentheses</strong> for a method call:</p>
<ul>
<li><p>If the method returns a value.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">@current_user = User.find_by_id <span class="number">1964192</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">@current_user = User.find_by_id(<span class="number">1964192</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>If the first argument to the method uses parentheses.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">put! (x + y) % len, value</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">put!((x + y) % len, value)</div></pre></td></tr></table></figure>
</li>
<li><p>Never put a space between a method name and the opening parenthesis.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">f (<span class="number">3</span> + <span class="number">2</span>) + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">f(<span class="number">3</span> + <span class="number">2</span>) + <span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Omit parentheses</strong> for a method call if the method accepts no arguments.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="literal">nil</span>?()</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="literal">nil</span>?</div></pre></td></tr></table></figure>
</li>
<li><p>If the method doesn’t return a value (or we don’t care about the return), parentheses are optional. (Especially if the arguments overflow to multiple lines, parentheses may add readability.)</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># okay</span></div><div class="line">render(<span class="symbol">:partial</span> =&gt; <span class="string">'foo'</span>)</div><div class="line"></div><div class="line"><span class="comment"># okay</span></div><div class="line">render <span class="symbol">:partial</span> =&gt; <span class="string">'foo'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>In either case:</p>
<ul>
<li><p>If a method accepts an options hash as the last argument, do not use <code>{</code> <code>}</code><br>during invocation.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">get <span class="string">'/v1/reservations'</span>, &#123; <span class="symbol">:id</span> =&gt; <span class="number">54875</span> &#125;</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">get <span class="string">'/v1/reservations'</span>, <span class="symbol">:id</span> =&gt; <span class="number">54875</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Conditional-Expressions"><a href="#Conditional-Expressions" class="headerlink" title="Conditional Expressions"></a>Conditional Expressions</h2><h3 id="Conditional-keywords"><a href="#Conditional-keywords" class="headerlink" title="Conditional keywords"></a>Conditional keywords</h3><ul>
<li><p>Never use <code>then</code> for multi-line <code>if/unless</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">if</span> some_condition <span class="keyword">then</span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> some_condition</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>The <code>and</code>, <code>or</code>, and <code>not</code> keywords are banned. It’s just not worth it. Always use <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> instead.</p>
</li>
<li><p>Modifier <code>if/unless</code> usage is okay when the body is simple, the<br>condition is simple, and the whole thing fits on one line. Otherwise,<br>avoid modifier <code>if/unless</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad - this doesn't fit on one line</span></div><div class="line">add_trebuchet_experiments_on_page(request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>]) <span class="keyword">if</span> request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>] &amp;&amp; !request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>].empty?</div><div class="line"></div><div class="line"><span class="comment"># okay</span></div><div class="line"><span class="keyword">if</span> request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>] &amp;&amp;</div><div class="line">     !request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>].empty?</div><div class="line"></div><div class="line">  add_trebuchet_experiments_on_page(request_opts[<span class="symbol">:trebuchet_experiments_on_page</span>])</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># bad - this is complex and deserves multiple lines and a comment</span></div><div class="line">parts[i] = part.to_i(INTEGER_BASE) <span class="keyword">if</span> !part.<span class="literal">nil</span>? &amp;&amp; [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="keyword">include</span>?(i)</div><div class="line"></div><div class="line"><span class="comment"># okay</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">if</span> reconciled?</div></pre></td></tr></table></figure>
</li>
<li><p>Never use <code>unless</code> with <code>else</code>. Rewrite these with the positive case first.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">unless success?</div><div class="line">  puts <span class="string">'failure'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  puts <span class="string">'success'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> success?</div><div class="line">  puts <span class="string">'success'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  puts <span class="string">'failure'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Avoid <code>unless</code> with multiple conditions.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">unless foo? &amp;&amp; bar?</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># okay</span></div><div class="line"><span class="keyword">if</span> !(foo? &amp;&amp; bar?)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use parentheses around the condition of an <code>if/unless/while</code>,<br>unless the condition contains an assignment (see <a href="#syntax">Using the return<br>value of <code>=</code></a> below).</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># ok</span></div><div class="line"><span class="keyword">if</span> (x = next_value)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Ternary-operator"><a href="#Ternary-operator" class="headerlink" title="Ternary operator"></a>Ternary operator</h3><ul>
<li><p>Avoid the ternary operator (<code>?:</code>) except in cases where all expressions are<br>extremely trivial. However, do use the ternary operator(<code>?:</code>) over<br><code>if/then/else/end</code> constructs for single line conditionals.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">result = <span class="keyword">if</span> some_condition <span class="keyword">then</span> something <span class="keyword">else</span> something_else <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">result = some_condition ? something : something_else</div></pre></td></tr></table></figure>
</li>
<li><p>Use one expression per branch in a ternary operator. This<br>also means that ternary operators must not be nested. Prefer<br><code>if/else</code> constructs in these cases.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> some_condition</div><div class="line">  nested_condition ? nested_something : nested_something_else</div><div class="line"><span class="keyword">else</span></div><div class="line">  something_else</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Avoid multiple conditions in ternaries. Ternaries are best used with single conditions.</p>
</li>
<li><p>Avoid multi-line <code>?:</code> (the ternary operator), use <code>if/then/else/end</code> instead.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">some_really_long_condition_that_might_make_you_want_to_split_lines ?</div><div class="line">  something : something_else</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> some_really_long_condition_that_might_make_you_want_to_split_lines</div><div class="line">  something</div><div class="line"><span class="keyword">else</span></div><div class="line">  something_else</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><ul>
<li><p>Never use <code>for</code>, unless you know exactly why. Most of the time iterators<br>should be used instead. <code>for</code> is implemented in terms of <code>each</code> (so<br>you’re adding a level of indirection), but with a twist - <code>for</code><br>doesn’t introduce a new scope (unlike <code>each</code>) and variables defined<br>in its block will be visible outside it.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> arr <span class="keyword">do</span></div><div class="line">  puts elem</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">arr.each &#123; <span class="params">|elem|</span> puts elem &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer <code>{...}</code> over <code>do...end</code> for single-line blocks.  Avoid using<br><code>{...}</code> for multi-line blocks (multiline chaining is always<br>ugly). Always use <code>do...end</code> for “control flow” and “method<br>definitions” (e.g. in Rakefiles and certain DSLs).  Avoid <code>do...end</code><br>when chaining.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">names = [<span class="string">"Bozhidar"</span>, <span class="string">"Steve"</span>, <span class="string">"Sarah"</span>]</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">names.each &#123; <span class="params">|name|</span> puts name &#125;</div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line">names.each <span class="keyword">do</span> <span class="params">|name|</span> puts name <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">names.select &#123; <span class="params">|name|</span> name.start_with?(<span class="string">"S"</span>) &#125;.map &#123; <span class="params">|name|</span> name.upcase &#125;</div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line">names.select <span class="keyword">do</span> <span class="params">|name|</span></div><div class="line">  name.start_with?(<span class="string">"S"</span>)</div><div class="line"><span class="keyword">end</span>.map &#123; <span class="params">|name|</span> name.upcase &#125;</div></pre></td></tr></table></figure>
<p>  Some will argue that multiline chaining would look okay with the use of<br>  <code>{...}</code>, but they should ask themselves if this code is really readable and<br>  whether the block’s content can be extracted into nifty methods.</p>
</li>
<li><p>Avoid <code>return</code> where not required.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(some_arr)</span></span></div><div class="line">  <span class="keyword">return</span> some_arr.size</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span><span class="params">(some_arr)</span></span></div><div class="line">  some_arr.size</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Using the return value of <code>=</code> (an assignment) is ok, but surround the<br>assignment with parenthesis.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># good - shows intended use of assignment</span></div><div class="line"><span class="keyword">if</span> (v = array.grep(<span class="regexp">/foo/</span>))</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">if</span> v = array.grep(<span class="regexp">/foo/</span>)</div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># also good - shows intended use of assignment and has correct precedence</span></div><div class="line"><span class="keyword">if</span> (v = next_value) == <span class="string">"hello"</span></div><div class="line">  ...</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>||=</code> freely to initialize variables.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># set name to Bozhidar, only if it's nil or false</span></div><div class="line">name <span class="params">||</span>= <span class="string">'Bozhidar'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Don’t use <code>||=</code> to initialize boolean variables. (Consider what<br>would happen if the current value happened to be <code>false</code>.)</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad - would set enabled to true even if it was false</span></div><div class="line">enabled <span class="params">||</span>= <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">enabled = <span class="literal">true</span> <span class="keyword">if</span> enabled.<span class="literal">nil</span>?</div></pre></td></tr></table></figure>
</li>
<li><p>Avoid using Perl-style special variables (like <code>$0-9</code>, <code>$</code>,<br>etc. ). They are quite cryptic and their use in anything but<br>one-liner scripts is discouraged. Prefer long form versions such as<br><code>$PROGRAM_NAME</code>.</p>
</li>
<li><p>Use <code>_</code> for unused block arguments.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">result = hash.map &#123; <span class="params">|k, v|</span> v + <span class="number">1</span> &#125;</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">result = hash.map &#123; <span class="params">|_, v|</span> v + <span class="number">1</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When a method block takes only one argument, and the body consists solely of<br>reading an attribute or calling one method with no arguments, use the <code>&amp;:</code><br>shorthand.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">bluths.map &#123; <span class="params">|bluth|</span> bluth.occupation &#125;</div><div class="line">bluths.select &#123; <span class="params">|bluth|</span> bluth.blue_self? &#125;</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">bluths.map(&amp;<span class="symbol">:occupation</span>)</div><div class="line">bluths.select(&amp;<span class="symbol">:blue_self?</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>Prefer <code>some_method</code> over <code>self.some_method</code> when calling a method on the<br>current instance.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_date</span></span></div><div class="line">  <span class="keyword">self</span>.start_date + <span class="keyword">self</span>.nights</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_date</span></span></div><div class="line">  start_date + nights</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>In the following three common cases, <code>self.</code> is required by the language<br>and is good to use:</p>
<ol>
<li>When defining a class method: <code>def self.some_method</code>.</li>
<li>The <em>left hand side</em> when calling an assignment method, including assigning<br>an attribute when <code>self</code> is an ActiveRecord model: <code>self.guest = user</code>.</li>
<li>Referencing the current instance’s class: <code>self.class</code>.</li>
</ol>
</li>
</ul>
<h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><ul>
<li><p>Use <code>snake_case</code> for methods and variables.</p>
</li>
<li><p>Use <code>CamelCase</code> for classes and modules.  (Keep acronyms like HTTP,<br>RFC, XML uppercase.)</p>
</li>
<li><p>Use <code>SCREAMING_SNAKE_CASE</code> for other constants.</p>
</li>
<li><p>The names of predicate methods (methods that return a boolean value)<br>should end in a question mark. (i.e. <code>Array#empty?</code>).</p>
</li>
<li><p>The names of potentially “dangerous” methods (i.e. methods that modify <code>self</code><br>or the arguments, <code>exit!</code>, etc.) should end with an exclamation mark. Bang<br>methods should only exist if a non-bang method exists.<br>(<a href="http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist" target="_blank" rel="external">More on this</a>.)</p>
</li>
<li><p>Name throwaway variables <code>_</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">payment, <span class="number">_</span> = Payment.complete_paypal_payment!(params[<span class="symbol">:token</span>],</div><div class="line">                                              native_currency,</div><div class="line">                                              created_at)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><ul>
<li><p>Avoid the usage of class (<code>@@</code>) variables due to their “nasty” behavior<br>in inheritance.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></div><div class="line">  @@class_var = <span class="string">'parent'</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">print_class_var</span></span></div><div class="line">    puts @@class_var</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &lt; Parent</span></div><div class="line">  @@class_var = <span class="string">'child'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Parent.print_class_var <span class="comment"># =&gt; will print "child"</span></div></pre></td></tr></table></figure>
<p>  As you can see all the classes in a class hierarchy actually share one<br>  class variable. Class instance variables should usually be preferred<br>  over class variables.</p>
</li>
<li><p>Use <code>def self.method</code> to define singleton methods. This makes the methods<br>more resistant to refactoring changes.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></div><div class="line">  <span class="comment"># bad</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">TestClass</span>.<span class="title">some_method</span></span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># good</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">some_other_method</span></span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Avoid <code>class &lt;&lt; self</code> except when necessary, e.g. single accessors and aliased<br>attributes.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></div><div class="line">  <span class="comment"># bad</span></div><div class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_method</span></span></div><div class="line">      ...</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">second_method_etc</span></span></div><div class="line">      ...</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="comment"># good</span></div><div class="line">  <span class="class"><span class="keyword">class</span> &lt;&lt; self</span></div><div class="line">    <span class="keyword">attr_accessor</span> <span class="symbol">:per_page</span></div><div class="line">    alias_method <span class="symbol">:nwo</span>, <span class="symbol">:find_by_name_with_owner</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">first_method</span></span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">second_method_etc</span></span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Indent the <code>public</code>, <code>protected</code>, and <code>private</code> methods as much the<br>method definitions they apply to. Leave one blank line above and below them.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">public_method</span></span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  private</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">private_method</span></span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><ul>
<li><p>Don’t use exceptions for flow of control.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  n / d</div><div class="line"><span class="keyword">rescue</span> ZeroDivisionError</div><div class="line">  puts <span class="string">"Cannot divide by 0!"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> d.zero?</div><div class="line">  puts <span class="string">"Cannot divide by 0!"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  n / d</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
<li><p>Avoid rescuing the <code>Exception</code> class.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="comment"># an exception occurs here</span></div><div class="line"><span class="keyword">rescue</span> Exception</div><div class="line">  <span class="comment"># exception handling</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="comment"># an exception occurs here</span></div><div class="line"><span class="keyword">rescue</span> StandardError</div><div class="line">  <span class="comment"># exception handling</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># acceptable</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="comment"># an exception occurs here</span></div><div class="line"><span class="keyword">rescue</span></div><div class="line">  <span class="comment"># exception handling</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><ul>
<li><p>Use <code>Set</code> instead of <code>Array</code> when dealing with unique elements. <code>Set</code><br>implements a collection of unordered values with no duplicates. This<br>is a hybrid of <code>Array</code>‘s intuitive inter-operation facilities and<br><code>Hash</code>‘s fast lookup.</p>
</li>
<li><p>Use symbols instead of strings as hash keys.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">hash = &#123; <span class="string">'one'</span> =&gt; <span class="number">1</span>, <span class="string">'two'</span> =&gt; <span class="number">2</span>, <span class="string">'three'</span> =&gt; <span class="number">3</span> &#125;</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">hash = &#123; <span class="symbol">:one</span> =&gt; <span class="number">1</span>, <span class="symbol">:two</span> =&gt; <span class="number">2</span>, <span class="symbol">:three</span> =&gt; <span class="number">3</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Use multi-line hashes when it makes the code more readable, and use<br>trailing commas to ensure that parameter changes don’t cause<br>extraneous diff lines when the logic has not otherwise changed.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hash = &#123;</div><div class="line">  <span class="symbol">:protocol</span> =&gt; <span class="string">'https'</span>,</div><div class="line">  <span class="symbol">:only_path</span> =&gt; <span class="literal">false</span>,</div><div class="line">  <span class="symbol">:controller</span> =&gt; <span class="symbol">:users</span>,</div><div class="line">  <span class="symbol">:action</span> =&gt; <span class="symbol">:set_password</span>,</div><div class="line">  <span class="symbol">:redirect</span> =&gt; @redirect_url,</div><div class="line">  <span class="symbol">:secret</span> =&gt; @secret,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Use a trailing comma in an <code>Array</code> that spans more than 1 line</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># good</span></div><div class="line">array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">array = [</div><div class="line">  <span class="string">"car"</span>,</div><div class="line">  <span class="string">"bear"</span>,</div><div class="line">  <span class="string">"plane"</span>,</div><div class="line">  <span class="string">"zoo"</span>,</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul>
<li><p>Prefer string interpolation instead of string concatenation:</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">email_with_name = user.name + <span class="string">' &lt;'</span> + user.email + <span class="string">'&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">email_with_name = <span class="string">"<span class="subst">#&#123;user.name&#125;</span> &lt;<span class="subst">#&#123;user.email&#125;</span>&gt;"</span></div></pre></td></tr></table></figure>
<p>  Furthermore, keep in mind Ruby 1.9-style interpolation. Let’s say you are<br>  composing cache keys like this:</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CACHE_KEY = <span class="string">'_store'</span></div><div class="line"></div><div class="line">cache.write(@user.id + CACHE_KEY)</div></pre></td></tr></table></figure>
<p>  Prefer string interpolation instead of string concatentation:</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CACHE_KEY = <span class="string">'%d_store'</span></div><div class="line"></div><div class="line">cache.write(CACHE_KEY % @user.id)</div></pre></td></tr></table></figure>
</li>
<li><p>Avoid using <code>String#+</code> when you need to construct large data chunks.<br>Instead, use <code>String#&lt;&lt;</code>. Concatenation mutates the string instance in-place<br>and is always faster than <code>String#+</code>, which creates a bunch of new string objects.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># good and also fast</span></div><div class="line">html = <span class="string">''</span></div><div class="line">html &lt;&lt; <span class="string">'&lt;h1&gt;Page title&lt;/h1&gt;'</span></div><div class="line"></div><div class="line">paragraphs.each <span class="keyword">do</span> <span class="params">|paragraph|</span></div><div class="line">  html &lt;&lt; <span class="string">"&lt;p&gt;<span class="subst">#&#123;paragraph&#125;</span>&lt;/p&gt;"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h2><ul>
<li><p>Avoid using <code>$1-9</code> as it can be hard to track what they contain. Named groups<br>can be used instead.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">/(regexp)/ =~ string</div><div class="line">...</div><div class="line">process $1</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">/(?&lt;meaningful_var&gt;regexp)/ =~ string</div><div class="line">...</div><div class="line">process meaningful_var</div></pre></td></tr></table></figure>
</li>
<li><p>Be careful with <code>^</code> and <code>$</code> as they match start/end of line, not string<br>endings.  If you want to match the whole string use: <code>\A</code> and <code>\z</code>.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">string = <span class="string">"some injection\nusername"</span></div><div class="line">string[<span class="regexp">/^username$/</span>]   <span class="comment"># matches</span></div><div class="line">string[<span class="regexp">/\Ausername\z/</span>] <span class="comment"># don't match</span></div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>x</code> modifier for complex regexps. This makes them more readable and you<br>can add some useful comments. Just be careful as spaces are ignored.</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">regexp = %r&#123;</div><div class="line">  start         # some text</div><div class="line">  \s            # white space char</div><div class="line">  (group)       # first group</div><div class="line">  (?:alt1|alt2) # some alternation</div><div class="line">  end</div><div class="line">&#125;x</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Percent-Literals"><a href="#Percent-Literals" class="headerlink" title="Percent Literals"></a>Percent Literals</h2><ul>
<li><p>Use <code>%w</code> freely.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">STATES = <span class="string">%w(draft open closed)</span></div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>%()</code> for single-line strings which require both interpolation<br>and embedded double-quotes. For multi-line strings, prefer heredocs.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad - no interpolation needed</span></div><div class="line"><span class="string">%(&lt;div class="text"&gt;Some text&lt;/div&gt;)</span></div><div class="line"><span class="comment"># should be '&lt;div class="text"&gt;Some text&lt;/div&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># bad - no double-quotes</span></div><div class="line"><span class="string">%(This is <span class="subst">#&#123;quality&#125;</span> style)</span></div><div class="line"><span class="comment"># should be "This is #&#123;quality&#125; style"</span></div><div class="line"></div><div class="line"><span class="comment"># bad - multiple lines</span></div><div class="line"><span class="string">%(&lt;div&gt;\n&lt;span class="big"&gt;<span class="subst">#&#123;exclamation&#125;</span>&lt;/span&gt;\n&lt;/div&gt;)</span></div><div class="line"><span class="comment"># should be a heredoc.</span></div><div class="line"></div><div class="line"><span class="comment"># good - requires interpolation, has quotes, single line</span></div><div class="line"><span class="string">%(&lt;tr&gt;&lt;td class="name"&gt;<span class="subst">#&#123;name&#125;</span>&lt;/td&gt;)</span></div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>%r</code> only for regular expressions matching <em>more than</em> one ‘/‘ character.</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># bad</div><div class="line">%r(\s+)</div><div class="line"></div><div class="line"># still bad</div><div class="line">%r(^/(.*)$)</div><div class="line"># should be /^\/(.*)$/</div><div class="line"></div><div class="line"># good</div><div class="line">%r(^/blog/2011/(.*)$)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h2><ul>
<li><p>When immediately returning after calling <code>render</code> or <code>redirect_to</code>, put <code>return</code> on the next line,<br>not the same line.</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line">render <span class="symbol">:text</span> =&gt; <span class="string">'Howdy'</span> <span class="keyword">and</span> <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line">render <span class="symbol">:text</span> =&gt; <span class="string">'Howdy'</span></div><div class="line"><span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment"># still bad</span></div><div class="line">render <span class="symbol">:text</span> =&gt; <span class="string">'Howdy'</span> <span class="keyword">and</span> <span class="keyword">return</span> <span class="keyword">if</span> foo.present?</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> foo.present?</div><div class="line">  render <span class="symbol">:text</span> =&gt; <span class="string">'Howdy'</span></div><div class="line">  <span class="keyword">return</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Be-Consistent"><a href="#Be-Consistent" class="headerlink" title="Be Consistent"></a>Be Consistent</h2><blockquote>
<p>If you’re editing code, take a few minutes to look at the code around you and<br>determine its style. If they use spaces around all their arithmetic<br>operators, you should too. If their comments have little boxes of hash marks<br>around them, make your comments have little boxes of hash marks around them<br>too.</p>
<p>The point of having style guidelines is to have a common vocabulary of coding<br>so people can concentrate on what you’re saying rather than on how you’re<br>saying it. We present global style rules here so people know the vocabulary,<br>but local style is also important. If code you add to a file looks<br>drastically different from the existing code around it, it throws readers out<br>of their rhythm when they go to read it. Avoid this.</p>
</blockquote>
<p>&mdash;<a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml" target="_blank" rel="external">Google C++ Style Guide</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ruby-Style-Guide&quot;&gt;&lt;a href=&quot;#Ruby-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Ruby Style Guide&quot;&gt;&lt;/a&gt;Ruby Style Guide&lt;/h1&gt;&lt;p&gt;This is Airbnb’s Ruby Style Guide.&lt;/p&gt;
&lt;p&gt;It was inspired by &lt;a href=&quot;https://github.com/styleguide/ruby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github’s guide&lt;/a&gt; and &lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bozhidar Batsov’s guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Airbnb also maintains a &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Style Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;)&lt;/p&gt;
&lt;h2 id=&quot;Whitespace&quot;&gt;&lt;a href=&quot;#Whitespace&quot; class=&quot;headerlink&quot; title=&quot;Whitespace&quot;&gt;&lt;/a&gt;Whitespace&lt;/h2&gt;&lt;h3 id=&quot;Indentation&quot;&gt;&lt;a href=&quot;#Indentation&quot; class=&quot;headerlink&quot; title=&quot;Indentation&quot;&gt;&lt;/a&gt;Indentation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use soft-tabs with a two space-indent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Indent &lt;code&gt;when&lt;/code&gt; as deep as &lt;code&gt;case&lt;/code&gt;.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; song.name == &lt;span class=&quot;string&quot;&gt;&#39;Misty&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&#39;Not again!&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; song.duration &amp;gt; &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&#39;Too long!&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; Time.now.hour &amp;gt; &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&quot;It&#39;s too late&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  song.play&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kind = &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; year&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1850&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;1889&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Blues&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1890&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;1909&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Ragtime&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1910&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;1929&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;New Orleans Jazz&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1930&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;1939&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Swing&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1940&lt;/span&gt;..&lt;span class=&quot;number&quot;&gt;1950&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Bebop&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Jazz&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Align function parameters either all on the same line or one per line.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create_translation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(phrase_id,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            phrase_key,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            target_locale,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            value,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            user_id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            do_xss_check,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            allow_verification)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create_translation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(phrase_id, phrase_key, target_locale,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            value, user_id, do_xss_check, allow_verification)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Indent succeeding lines in multi-line boolean expressions.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# good&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_eligible?&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    is_in_program?(user) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    program_not_expired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# bad&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_eligible?&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(user)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  is_in_program?(user) &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  program_not_expired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Inline&quot;&gt;&lt;a href=&quot;#Inline&quot; class=&quot;headerlink&quot; title=&quot;Inline&quot;&gt;&lt;/a&gt;Inline&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Never leave trailing whitespace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use spaces around operators; after commas, colons, and semicolons; and around&lt;br&gt;&lt;code&gt;{&lt;/code&gt; and before &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sum = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a, b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;; puts &lt;span class=&quot;string&quot;&gt;&#39;Hi&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].each &amp;#123; &lt;span class=&quot;params&quot;&gt;|e|&lt;/span&gt; puts e &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No spaces after &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt; or before &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;some(arg).other&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].length&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Newlines&quot;&gt;&lt;a href=&quot;#Newlines&quot; class=&quot;headerlink&quot; title=&quot;Newlines&quot;&gt;&lt;/a&gt;Newlines&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add a new line after &lt;code&gt;if&lt;/code&gt; conditions span multiple lines to help&lt;br&gt;differentiate between the conditions and the body.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; @reservation_alteration.checkin == @reservation.start_date &amp;amp;&amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  redirect_to_alteration @reservation_alteration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a new line after conditionals, blocks, case statements, etc.&lt;/p&gt;
  &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; robot.is_awesome?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  send_robot_present&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;robot.add_trait(&lt;span class=&quot;symbol&quot;&gt;:human_like_intelligence&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ruby" scheme="http://yoursite.com/categories/ruby/"/>
    
    
      <category term="ruby" scheme="http://yoursite.com/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>RubyNotes</title>
    <link href="http://yoursite.com/2016/01/07/RubyNotes/"/>
    <id>http://yoursite.com/2016/01/07/RubyNotes/</id>
    <published>2016-01-07T02:43:08.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ruby-备忘录"><a href="#Ruby-备忘录" class="headerlink" title="Ruby 备忘录"></a>Ruby 备忘录</h1><blockquote>
<p>gem源切换：nrm use</p>
</blockquote>
<p>##:: </p>
<blockquote>
<p>ActiveRecord::Base Base 是 ActiveRecord module 的一个内部类 </p>
</blockquote>
<h2 id="Ruby-Varable"><a href="#Ruby-Varable" class="headerlink" title="Ruby Varable"></a>Ruby Varable</h2><p>一般小写字母、下划线开头：变量（Variable）。</p>
<ul>
<li>$开头：全局变量（Global variable）。</li>
<li>@开头：实例变量（Instance variable）。</li>
<li>@@开头：类变量（Class variable）类变量被共享在整个继承链中</li>
<li>大写字母开头：常数（Constant）。</li>
</ul>
<h2 id="Custome-Objects-in-Range"><a href="#Custome-Objects-in-Range" class="headerlink" title="Custome Objects in Range"></a>Custome Objects in Range</h2><blockquote>
<p>要构造一个Range 对象需要 include Comparable 模块，异常处理：实现一个succ方法返回类的新的对象;还要实现一个&lt;=&gt;方法  </p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xs</span>                <span class="comment"># represent a string of 'x's</span></span></div><div class="line">  <span class="keyword">include</span> Comparable</div><div class="line">  attr <span class="symbol">:length</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(n)</span></span></div><div class="line">    @length = n</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">succ</span></span></div><div class="line">    Xs.new(@length + <span class="number">1</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;=&gt;</span><span class="params">(other)</span></span></div><div class="line">    @length &lt;=&gt; other.length</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">to_s</span></span></div><div class="line">    sprinf <span class="string">"%2d <span class="subst">#&#123;inspect&#125;</span>"</span>,@length</div><div class="line">  <span class="keyword">end</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inspect</span></span></div><div class="line">    <span class="string">'x'</span> *@length</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Manning-Rails"><a href="#Manning-Rails" class="headerlink" title="Manning Rails"></a>Manning Rails</h2><h3 id="Database-configuration"><a href="#Database-configuration" class="headerlink" title="Database configuration"></a>Database configuration</h3><p>rails 默认使用SQlite3 作为数据库，当然也支持MySQL 和PostgreSQL 数据库。<br>如果要更改数据库，可以在conifg/database.yml 中修改<br>例如：使用sqlite3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">development:</div><div class="line">  adapter: sqlite3</div><div class="line">  database: db/development.sqlite3</div><div class="line">  pool: 5</div><div class="line">  timeout: 5000</div></pre></td></tr></table></figure></p>
<p>使用PostgreSQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">development:</div><div class="line">  adapter: postgresql</div><div class="line">  database: ticketee_development</div><div class="line">  username: root</div><div class="line">  password: t0ps3cr3t</div></pre></td></tr></table></figure></p>
<p>PostgreSQL 数据库比SQlite更快</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">development:</div><div class="line">  adapter: mysql2</div><div class="line">  database: ticketee_development</div><div class="line">  username: root</div><div class="line">  password: t0ps3cr3t</div><div class="line">  encoding: utf-8</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ruby-备忘录&quot;&gt;&lt;a href=&quot;#Ruby-备忘录&quot; class=&quot;headerlink&quot; title=&quot;Ruby 备忘录&quot;&gt;&lt;/a&gt;Ruby 备忘录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;gem源切换：nrm use&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Ruby元编程读书笔记1</title>
    <link href="http://yoursite.com/2015/12/14/Ruby%E5%85%83%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2015/12/14/Ruby元编程读书笔记1/</id>
    <published>2015-12-14T09:03:04.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-元这个字眼"><a href="#第一章-元这个字眼" class="headerlink" title="第一章 元这个字眼"></a>第一章 元这个字眼</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 元编程就是编写能写代码的代码。</p>
<p> Ruby 具有<em>自省</em>（introspection）。</p>
<blockquote>
<p>类和对象是Ruby 世界的一等公民，可以通过询问它有关自身问题。</p>
</blockquote>
<h3 id="Active-Record-类库"><a href="#Active-Record-类库" class="headerlink" title="Active Record 类库"></a>Active Record 类库</h3><blockquote>
<p>可以将对象映射到数据库表中。</p>
</blockquote>
<h2 id="第二章-类的真相"><a href="#第二章-类的真相" class="headerlink" title="第二章 类的真相"></a>第二章 类的真相</h2><h3 id="猴子补丁"><a href="#猴子补丁" class="headerlink" title="猴子补丁"></a>猴子补丁</h3><blockquote>
<p> 为某个类添加新功能</p>
</blockquote>
<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>通过 Object＃instance_variables方法查看</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">my_method</span></span></div><div class="line">		@v =q</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>ruby 实例变量的名字和值理解为 哈希表中的键和值，每一个对象的键／值都可能不相同。</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>通过 Object#mothods方法查看</p>
<blockquote>
<p>可以通过Array#grep 方法来筛选</p>
</blockquote>
<h3 id="类的真相"><a href="#类的真相" class="headerlink" title="类的真相"></a>类的真相</h3><p>类本身也是对象。</p>
<ul>
<li>Ruby允许你在运行时修改类的信息。</li>
<li>Ruby的类继承自他的父类。（superclass方法）</li>
<li>BasicObject是Ruby对象体系中的根节点。</li>
</ul>
<h3 id="Modlule"><a href="#Modlule" class="headerlink" title="Modlule"></a>Modlule</h3><p> Class的父类是Module。<br> 类是带有三个方法（new、allocate、superclass）的增强模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-元这个字眼&quot;&gt;&lt;a href=&quot;#第一章-元这个字眼&quot; class=&quot;headerlink&quot; title=&quot;第一章 元这个字眼&quot;&gt;&lt;/a&gt;第一章 元这个字眼&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="ruby元编程读书笔记" scheme="http://yoursite.com/categories/ruby%E5%85%83%E7%BC%96%E7%A8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ruby" scheme="http://yoursite.com/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>RailsNote</title>
    <link href="http://yoursite.com/2015/12/11/RailsNote/"/>
    <id>http://yoursite.com/2015/12/11/RailsNote/</id>
    <published>2015-12-11T05:10:33.000Z</published>
    <updated>2017-02-20T06:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="befor-action-方法"><a href="#befor-action-方法" class="headerlink" title="befor_action 方法"></a>befor_action 方法</h2><blockquote>
<p>Append a callback before actions. See #_insert_callbacks for parameter details.</p>
</blockquote>
<p>在events_controller.rb上方新增</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">before_action <span class="symbol">:method_name</span>, <span class="symbol">:only</span> =&gt; [ <span class="symbol">:show</span>, <span class="symbol">:edit</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</div></pre></td></tr></table></figure>
<p>在 private下方</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">method_name</span></span></div><div class="line">	&lt;-内容-&gt;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="use-pry-to-rails-console"><a href="#use-pry-to-rails-console" class="headerlink" title="use pry to rails console"></a>use pry to rails console</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="string">'pry-rails'</span>, <span class="symbol">:group</span> =&gt; <span class="symbol">:development</span></div></pre></td></tr></table></figure>
<h2 id="flash-vs-flash-now"><a href="#flash-vs-flash-now" class="headerlink" title="flash vs. flash.now"></a>flash vs. flash.now</h2><ul>
<li>flash 方法设置flash message , 显示数据在指定页面，需要redirect_to 指定页面</li>
<li>flash_now 可替代flash ,在当前页面显示flash message <h2 id="ActiveModel-Errors-方法"><a href="#ActiveModel-Errors-方法" class="headerlink" title="ActiveModel::Errors 方法"></a>ActiveModel::Errors 方法</h2>ActiveModel::Errors provides some nice helper methods for working with validation errors that you can use in your views to display the errors to the user.</li>
</ul>
<h2 id="partials-的命名"><a href="#partials-的命名" class="headerlink" title="partials 的命名"></a>partials 的命名</h2><p>partials的命名必须使用_开头，例如_form而不是form</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;h2 id=&quot;befor-action-方法&quot;&gt;&lt;a href=&quot;#befor-action-方法&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="ruby" scheme="http://yoursite.com/categories/ruby/"/>
    
    
      <category term="ruby" scheme="http://yoursite.com/tags/ruby/"/>
    
  </entry>
  
</feed>
