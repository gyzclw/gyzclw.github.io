[{"title":"Java reflect的应用","url":"http://gyzclw.github.io/2017/03/24/Java reflect 的应用/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Java reflect 的应用</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 获取参数</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Field[] fields = object.getClass().getDeclaredFields();<span class=\"comment\">//get private Fields</span></span><br><span class=\"line\">Field[] fields = object.getClass().getFields();  <span class=\"comment\">//get Public Fields</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 获取方法</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Method[] methods = object.getClass().getMethods();</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 获取参数的getter值</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">value=method.invoke(request);</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> 应用例子</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n<p>\n将class的的值格式为： “a=b&amp;a=c”;\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>    String <span class=\"title\">getSignature</span><span class=\"params\">(Object request)</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Field[] fields=request.getClass().getDeclaredFields();</span><br><span class=\"line\">  Method[] methods=request.getClass().getMethods();</span><br><span class=\"line\">  TreeMap&amp;lt;String,String&amp;gt; requestMap = <span class=\"keyword\">new</span> TreeMap&amp;lt;&amp;gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Field f: fields) {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Method method : methods) {</span><br><span class=\"line\">      Object value;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (method.getName().contains(f.getName())&amp;amp;&amp;amp; !method.getName().contains(<span class=\"string\">\"set\"</span>)){</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">\t  value=method.invoke(request);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (value==<span class=\"keyword\">null</span>) {</span><br><span class=\"line\">\t    value=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t    requestMap.put(f.getName(), (String) value);</span><br><span class=\"line\">\t  }<span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t    requestMap.put(f.getName(), (String) value);</span><br><span class=\"line\">\t  }</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (IllegalAccessException e) {</span><br><span class=\"line\">\t  e.printStackTrace();</span><br><span class=\"line\">\t} <span class=\"keyword\">catch</span> (InvocationTargetException e) {</span><br><span class=\"line\">\t  e.printStackTrace();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">    requestMap.remove(<span class=\"string\">\"Signature\"</span>);</span><br><span class=\"line\">    Set&amp;lt;String&amp;gt; keys=requestMap.keySet();</span><br><span class=\"line\">    Iterator&amp;lt;String&amp;gt; iterable=keys.iterator();</span><br><span class=\"line\">    String signature=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (iterable.hasNext()){</span><br><span class=\"line\">     String key= iterable.next();</span><br><span class=\"line\">      String value= key+<span class=\"string\">\"=\"</span>+requestMap.get(key);</span><br><span class=\"line\">      signature+=value+<span class=\"string\">\"&amp;amp;\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> signature.substring(<span class=\"number\">0</span>,signature.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-24 Fri 10:23.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["java"],"tags":["java","reflect"]},{"title":"Head First HTML CSS & XHTML 读书笔记","url":"http://gyzclw.github.io/2017/03/19/Head_First_HTML_CSS_XHTML 读书笔记/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Head First HTML  CSS &amp; XHTML Reading Note</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> getting to know HTML</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n<b>HTML</b> 是超文本标记语言，所以HTML的功能 是让你通过tag 告诉浏览器你的文本是什么结构的.\n</p>\n</div>\n\n<div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">\n<h4 id=\"sec-1-1-1\"><span class=\"section-number-4\">1.1.1</span> Meet the style element</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-1\">\n<p>\n   &lt;style&gt; tag also requires an attribute, called type, which tells the brower the kind of style you're using.\nAttribute give you a way to provide additional information about an element.\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1-2\" class=\"outline-4\">\n<h4 id=\"sec-1-1-2\"><span class=\"section-number-4\">1.1.2</span> Giving Starbuzz some style</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">body</span> <span class=\"rules\">{</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">background-color</span>:<span class=\"value\"> <span class=\"hexcolor\">#d2b48c</span></span></span>;</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">margin-left</span>:<span class=\"value\"> <span class=\"number\">20%</span></span></span>;</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">margin-right</span>:<span class=\"value\"> <span class=\"number\">20%</span></span></span>;</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">border</span>:<span class=\"value\"> <span class=\"number\">1</span> px dotted gray</span></span>;</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">padding</span>:<span class=\"value\"> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span> <span class=\"number\">10px</span></span></span>;</span><br><span class=\"line\">     <span class=\"rule\"><span class=\"attribute\">font-family</span>:<span class=\"value\"> sans-serif</span></span>;</span><br><span class=\"line\">}</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\nCSS uses a synatax that is totally different from HTML.\n</p>\n\n<p>\nCSS does different jobs from HTML, like English with Math.\n</p>\n\n<p>\nYou use CSS to create style , HTML to create struture.\n</p>\n\n<p>\n#d2b48c is a \"hex code\".\n</p>\n\n<p>\nThe body in the CSS means that all the CSS between in \"{\"  and \"}\" applies\nto the content with the HTML &lt;body&gt;  element.\n</p>\n\n<blockquote>\n<ul class=\"org-ul\">\n<li>HTML is an abbreviation for HyperText Markup Language and is used to structure your web page\n</li>\n<li>CSS is an abbreviation for Cascading Style Sheets, and is used to control the presentation of your HTML.\n</li>\n<li>what yout put into body is what u see in your brower.\n</li>\n<li>CSS can be added to an HTML Web page by putting the CSS rules inside the &lt;style&gt; elements. the &lt;styles&gt; should always be insde the &lt;head&gt; element\n</li>\n<li>Most whtespaces are ignored in the brower.\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> going further, with hyper text</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n</div><div id=\"outline-container-sec-1-2-1\" class=\"outline-4\">\n<h4 id=\"sec-1-2-1\"><span class=\"section-number-4\">1.2.1</span> Creating the new lounge</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-1\">\n<p>\nThe type attribute specifies which style language we're using in this CSS.\n</p>\n\n<p>\nThe href attribute tells us the destination of a hyperlink.\n</p>\n\n<p>\nthe src attribute specifies the filename of the picture an imag tag displays.\n</p>\n\n<blockquote>\n<ul class=\"org-ul\">\n<li>When you want to link  from one page to another, use the &lt;a&gt; element.\n</li>\n<li>The href attribute of the of element link 的目的地.\n</li>\n<li>&lt;a&gt; 标签的内容是在网页上看到的内容，默认是有下划线提醒你点击。\n</li>\n<li>\"..\" means \"parent folder\"\n</li>\n<li>Don't use spaces in names when you're choosing names for files and folders for your web site.\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> building blocks</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n&lt;q&gt; element is just add the double quote the information,it means the text of an actual quote.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;lt;p&amp;gt;According to Mozilla's website,</span><br><span class=\"line\">&amp;lt;q</span><br><span class=\"line\">cite=\"https://www.mozilla.org/en-US/about/history/details/\"&amp;gt;Firefox 1.0</span><br><span class=\"line\">was released in 2004 and became a big success.&amp;lt;/q&amp;gt;&amp;lt;/p&amp;gt;</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n<span class=\"underline\">According to Mozilla's website, \"Firefox 1.0 was released in 2004 and became a big success\".</span>\n</p>\n\n<p>\nyou ll be able to style quotes to look just the way you wanted.\n</p>\n\n<ol class=\"org-ol\">\n<li>&lt;q&gt; use when short, pithy quotes\n</li>\n<li>&lt;blockquote&gt; use in longer quotes, often memorizing complete passages from books or poems.\n</li>\n</ol>\n\n<p>\n&lt;q&gt; is the part of the existing paragraph, the &lt;blockquote&gt; 要单独一段长句。\n</p>\n\n<blockquote>\n<p>\n&lt;blockquote&gt; element is a block element.\n</p>\n\n<p>\n&lt;q&gt; is an inline element.\n</p>\n</blockquote>\n\n<p>\nthe &lt;br&gt; element is an element that doesn't have any content. it‘s  just meant to be a linebreak.\n</p>\n\n<p>\n&lt;li&gt; element to create list. &lt;li&gt; is ordered list, &lt;ol&gt; is unordered list.\n</p>\n\n<p>\n&lt;dl&gt; &lt;dd&gt; for definition list.\n</p>\n\n<p>\n&lt;em&gt; 意味者强调，在浏览器中会表现为斜体.\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> getting connected</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n<p>\nuse &lt;a&gt; to link to create a destination.\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;lt;a id = \"chai\"&amp;gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;lt;a href = \"index.html#chai\"&amp;gt; See Chai Tea&amp;lt;/a&amp;gt;</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nuse <span class=\"underline\">target=”<sub>blank”</sub></span> to open a new windown.\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-5\" class=\"outline-3\">\n<h3 id=\"sec-1-5\"><span class=\"section-number-3\">1.5</span> adding images to your pages</h3>\n<div class=\"outline-text-3\" id=\"text-1-5\">\n</div><div id=\"outline-container-sec-1-5-1\" class=\"outline-4\">\n<h4 id=\"sec-1-5-1\"><span class=\"section-number-4\">1.5.1</span> How the browser display images</h4>\n<div class=\"outline-text-4\" id=\"text-1-5-1\">\n<ol class=\"org-ol\">\n<li>First the browser 取回 elixir.html 文件，\n</li>\n<li>然后 browser reads the \"elixir.html\", display it .\n</li>\n<li>然后发现存在&lt;imag&gt; element，取回image并展示，再取回下一个imgae。\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-20 Mon 15:29.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["web"],"tags":["html","web","css"]},{"title":"Android mvvm 使用","url":"http://gyzclw.github.io/2017/03/12/Android mvvm 使用/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android mvvm 使用</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> ViewModel的职责</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\nviewModel负责model 和view的通信。\n先创建一个ViewModel接口,只包括Destory函数\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ViewModel</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n然后创建一个SunViewModel实现该接口\n</p>\n<pre class=\"example\">\npublic class SunViewModel implement ViewModel{\n private DataListener dataListener;\n private Context context;\n public SunViewModel(Context context, DataListener datalistener){\n  this.dataListener = dataListener;\n    this.context = context;\n }\n public void LoadData(){\n  if(datalistener!=null){\n    datalistener.OnSunresponse(data);\n  }\n}\n }\npublic interface DataListener{\n   void OnSunResponse(String data);\n}\n\n@Override public void Destroy(){\n   context=null;\n   dataListener=null;\n}\n</pre>\n<p>\nSunviewmodel 中存在LoadData函数来处理来自Model数据。通过DataListener接口让View获取\n处理后的数据.\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> View 调用ViewModel</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class View implement SunViewModel.DataListener{</span><br><span class=\"line\"> <span class=\"keyword\">private</span> SunViewmodel viewModel;</span><br><span class=\"line\"> <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>{</span><br><span class=\"line\">  viewModel = <span class=\"keyword\">new</span> ProvidentFundNativeDetailViewModel(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  viewModel.getData();</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"> <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    viewModel.Destroy();</span><br><span class=\"line\">  }</span><br><span class=\"line\"> <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSunresponse</span><span class=\"params\">(String data)</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-12 Sun 18:29.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","mvvm"]},{"title":"java 多态重构if else","url":"http://gyzclw.github.io/2017/03/09/java多态重构if else/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> java 多态重构if else</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n过多的if else 会造成代码可读性下降,所以有时候可以使用java多态来重构代码，使得代码可读性提高。\n原始代码如下:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj = gvTaskHome.getAdapter().getItem(arg2);</span><br><span class=\"line\">\t\t\t\tHashMap&amp;lt;String, Object&amp;gt; map = (HashMap&amp;lt;String, Object&amp;gt;) obj;</span><br><span class=\"line\">\t\t\t\tString str = (String) map.get(<span class=\"string\">\"itemText\"</span>);</span><br><span class=\"line\">\t\t\t\tIntent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"办卡申请\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (FileTools.isSDCardReady())</span><br><span class=\"line\">\t\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\t\tBundle bundle = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">\t\t\t\t\t\tList&amp;lt;Card&amp;gt; list = <span class=\"keyword\">new</span> ArrayList&amp;lt;Card&amp;gt;();</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\t\t\tlist = XmlTools.readCardTypeXmlOut(MyConstants.CONFIG_PATH+MyConstants.getConfigFileName());</span><br><span class=\"line\">\t\t\t\t\t\t\tbundle.putSerializable(<span class=\"string\">\"card\"</span>, (Serializable)list);</span><br><span class=\"line\">\t\t\t\t\t\t\tintent.putExtras(bundle);</span><br><span class=\"line\">\t\t\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, CardChooseActivity.class);</span><br><span class=\"line\">\t\t\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t\t\t} <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">\t\t\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(e);</span><br><span class=\"line\">\t\t\t\t\t\t\tUITools.getTools().showToast(<span class=\"string\">\"配置文件出错！\"</span>, <span class=\"keyword\">true</span>, UITools.BAD);</span><br><span class=\"line\">\t\t\t\t\t\t} <span class=\"keyword\">catch</span> (DocumentException e)</span><br><span class=\"line\">\t\t\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(e);</span><br><span class=\"line\">\t\t\t\t\t\t\tUITools.getTools().showToast(<span class=\"string\">\"配置文件出错！\"</span>, <span class=\"keyword\">true</span>, UITools.BAD);</span><br><span class=\"line\">\t\t\t\t\t\t}</span><br><span class=\"line\"><span class=\"comment\">//                                              list.addAll(list);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t\t\t\t\t\tUITools.getTools().showToast(<span class=\"string\">\"未发现存储卡或内置存储\"</span>, <span class=\"keyword\">true</span>, UITools.SAD);</span><br><span class=\"line\">\t\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"资料预览\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, MsgPreViewActivity.class);</span><br><span class=\"line\">\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"手动补件\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, RePhotoActivity.class);</span><br><span class=\"line\">\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"补打回单\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\"><span class=\"comment\">//                                      UITools.getTools().showToast(\"此功能尚未开通\", true);</span></span><br><span class=\"line\">\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, MsgPreViewActivity.class);</span><br><span class=\"line\">\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"卡激活\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\"><span class=\"comment\">//                                      UITools.getTools().showToast(\"此功能尚未开通\", true);</span></span><br><span class=\"line\">\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, KnowledgeActivity.class);</span><br><span class=\"line\">\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"问卷调查\"</span>))</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\"><span class=\"comment\">//                                      String macAddress = null;</span></span><br><span class=\"line\"><span class=\"comment\">//                                      WifiManager wifiMgr = (WifiManager)getSystemService(Context.WIFI_SERVICE);</span></span><br><span class=\"line\"><span class=\"comment\">//                                      WifiInfo info = (null == wifiMgr ? null : wifiMgr.getConnectionInfo());</span></span><br><span class=\"line\"><span class=\"comment\">//                                      if (null != info) {</span></span><br><span class=\"line\"><span class=\"comment\">//                                          macAddress = info.getMacAddress();</span></span><br><span class=\"line\"><span class=\"comment\">//                                      }</span></span><br><span class=\"line\"><span class=\"comment\">//                                                String[] strArr = macAddress.split(\":\");</span></span><br><span class=\"line\"><span class=\"comment\">//                                                StringBuffer sBuffer = new StringBuffer();</span></span><br><span class=\"line\"><span class=\"comment\">//                                                for(int i = 0;i &amp;lt; strArr.length; i++){</span></span><br><span class=\"line\"><span class=\"comment\">//                                                 sBuffer.append(strArr[i]);</span></span><br><span class=\"line\"><span class=\"comment\">//                                                }</span></span><br><span class=\"line\"><span class=\"comment\">//                                              System.out.println(\"mac:\" + sBuffer);</span></span><br><span class=\"line\"><span class=\"comment\">//                                      UITools.getTools().showToast(\"mac:\" + sBuffer, true);</span></span><br><span class=\"line\"><span class=\"comment\">//                                      UITools.getTools().showToast(\"此功能尚未开通\", true);</span></span><br><span class=\"line\">\t\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, SaleActivity.class);</span><br><span class=\"line\">\t\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\">\t\t\t}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n因为过多的if else 使得代码阅读起来比较困难，接下来我门开始重构\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 创建BaseIntent 接口</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n接口只包括一个excuse函数\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseIntent</span> </span>{</span><br><span class=\"line\">\t Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n接下来通过实现该接口创建不同的类\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CardChoose</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseIntent</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (FileTools.isSDCardReady())</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tBundle bundle = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">\t\t\tList&amp;lt;Card&amp;gt; list;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span></span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\tlist = XmlTools.readCardTypeXmlOut(MyConstants.CONFIG_PATH+MyConstants.getConfigFileName());</span><br><span class=\"line\">\t\t\t\tbundle.putSerializable(<span class=\"string\">\"card\"</span>, (Serializable)list);</span><br><span class=\"line\">\t\t\t\tintent.putExtras(bundle);</span><br><span class=\"line\">\t\t\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, CardChooseActivity.class);</span><br><span class=\"line\">\t\t\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t\t} <span class=\"keyword\">catch</span> (IOException e)</span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(e);</span><br><span class=\"line\">\t\t\t\tUITools.getTools().showToast(<span class=\"string\">\"配置文件出错！\"</span>, <span class=\"keyword\">true</span>, UITools.BAD);</span><br><span class=\"line\">\t\t\t} <span class=\"keyword\">catch</span> (DocumentException e)</span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\tSystem.out.println(e);</span><br><span class=\"line\">\t\t\t\tUITools.getTools().showToast(<span class=\"string\">\"配置文件出错！\"</span>, <span class=\"keyword\">true</span>, UITools.BAD);</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//                                              list.addAll(list);</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t\t\tUITools.getTools().showToast(<span class=\"string\">\"未发现存储卡或内置存储\"</span>, <span class=\"keyword\">true</span>, UITools.SAD);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MsgPreView</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseIntent</span></span>{</span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, MsgPreViewActivity.class);</span><br><span class=\"line\">\t\tstartActivity(intent);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RePhoto</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseIntent</span></span>{</span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, RePhotoActivity.class);</span><br><span class=\"line\">\t\tstartActivity(intent);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Knowledge</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseIntent</span></span>{</span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\t<span class=\"comment\">//UITools.getTools().showToast(\"此功能尚未开通\", true);</span></span><br><span class=\"line\">\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, KnowledgeActivity.class);</span><br><span class=\"line\">\t\tstartActivity(intent);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Questionnaire</span> <span class=\"keyword\">implements</span> <span class=\"title\">BaseIntent</span></span>{</span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t\t<span class=\"comment\">//String macAddress = null;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      WifiManager wifiMgr = (WifiManager)getSystemService(Context.WIFI_SERVICE);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      WifiInfo info = (null == wifiMgr ? null : wifiMgr.getConnectionInfo());</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      if (null != info) {</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                          macAddress = info.getMacAddress();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      }</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                                String[] strArr = macAddress.split(\":\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                                StringBuffer sBuffer = new StringBuffer();</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                                for(int i = 0;i &amp;lt; strArr.length; i++){</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                                 sBuffer.append(strArr[i]);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                                }</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                              System.out.println(\"mac:\" + sBuffer);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      UITools.getTools().showToast(\"mac:\" + sBuffer, true);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//                                      UITools.getTools().showToast(\"此功能尚未开通\", true);</span></span><br><span class=\"line\">\t\tintent.setClass(TaskHomeActivity.<span class=\"keyword\">this</span>, SaleActivity.class);</span><br><span class=\"line\">\t\tstartActivity(intent);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n最后在创建一个private函数来判断\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> BaseIntent <span class=\"title\">gvTaskHomeOnClick</span><span class=\"params\">(String str)</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"办卡申请\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CardChoose();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"资料预览\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MsgPreView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"手动补件\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RePhoto();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"补打回单\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MsgPreView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"卡激活\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Knowledge();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"问卷调查\"</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Questionnaire();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BaseIntent() {</span><br><span class=\"line\">\t\t\t<span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuse</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t};</span><br><span class=\"line\">\t}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n最后运行函数\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">gvTaskHomeOnClick(str).excuse();</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n这样代码逻辑就清晰了，而且扩展起来也比较方便。\n</p>\n</div>\n</div>\n\nLast Updated 2017-03-09 Thu 10:58.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["java"],"tags":["java","重构"]},{"title":"android studio 快捷键","url":"http://gyzclw.github.io/2017/03/04/android studio(emacs keyboad)快捷键/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android studio 快捷键</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">快捷键</th>\n<th scope=\"col\" class=\"left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">Ctrl+alt+G</td>\n<td class=\"left\">jump to class</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"left\">alt + G</td>\n<td class=\"left\">line jump</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"left\">alt + .</td>\n<td class=\"left\">show declaration</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"left\">&#xa0;</td>\n<td class=\"left\">&#xa0;</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\nLast Updated 2017-03-04 Sat 14:58.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","快捷键"]},{"title":"Android 开发遇到的问题","url":"http://gyzclw.github.io/2017/03/01/Android 开发遇到的问题/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android 开发遇到的问题</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> Fresco 的使用</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n</div><div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">\n<h4 id=\"sec-1-1-1\"><span class=\"section-number-4\">1.1.1</span> 图片不显示</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-1\">\n<p>\n使用base64的uri 时,在api&lt;19是无法显示图片。\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"data:mime/type;base64,\"</span>+code.getCheckCode();</span><br><span class=\"line\">       DraweeController controller = Fresco.newDraweeControllerBuilder()</span><br><span class=\"line\">\t   .setUri(s)</span><br><span class=\"line\">\t   .setTapToRetryEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">\t   .setOldController(mVerifiCationCode.getController())</span><br><span class=\"line\">\t   .build();</span><br><span class=\"line\">\t   mVerifiCationCode.setController(controller);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n解决方法: 将服务器的图片格式改成png。\n</p>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-01 Wed 14:42.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","problem"]},{"title":"Android Retrofit 和Rxjava的使用","url":"http://gyzclw.github.io/2017/02/28/Android Retrofit 和Rxjava 的使用/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android Retrofit 和Rxjava的使用</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> install adapter-rxjava</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n在build.gradle 中\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:adapter-rxjava:2.0.2'</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> How to use adapter-rxjava</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n在MegaServier中的返回值Call&lt;?&gt;改为Observable&lt;?&gt;\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@GET</span>(<span class=\"string\">\"servlet\"</span>) Observable&amp;lt;Code&amp;gt; listCodeRepo(<span class=\"annotation\">@Query</span>(<span class=\"string\">\"parm\"</span>) String user);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n在setBefore() 中添加RxjavaCallAdapter\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(apiUri)</span><br><span class=\"line\">\t  .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">\t  .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\">\t  .build();</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n最后的返回值就变成Observable\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">service.listCodeRepo(<span class=\"string\">\"code\"</span>)</span><br><span class=\"line\">\t.subscribeOn(Schedulers.io())</span><br><span class=\"line\">\t.observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">\t.subscribe(<span class=\"keyword\">new</span> Action1&amp;lt;Code&amp;gt;() {</span><br><span class=\"line\">\t  <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Code code)</span> </span>{</span><br><span class=\"line\">\t    mcode[<span class=\"number\">0</span>] = code.getCheckCode();</span><br><span class=\"line\">\t  }</span><br><span class=\"line\">\t});</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> better to use rxjava with retrofit</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\nadd a HttpMehtod\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpMethods</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String BASE_URL;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_TIMEOUT = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Retrofit retrofit;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> HebeiService movieService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//构造方法私有</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HttpMethods</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//手动创建一个OkHttpClient并设置超时时间</span></span><br><span class=\"line\">    OkHttpClient.Builder httpClientBuilder = <span class=\"keyword\">new</span> OkHttpClient.Builder();</span><br><span class=\"line\">    httpClientBuilder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">    retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().client(httpClientBuilder.build())</span><br><span class=\"line\">\t.addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">\t.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class=\"line\">\t.baseUrl(BASE_URL)</span><br><span class=\"line\">\t.build();</span><br><span class=\"line\"></span><br><span class=\"line\">    movieService = retrofit.create(HebeiService.class);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//在访问HttpMethods时创建单例</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HttpMethods INSTANCE = <span class=\"keyword\">new</span> HttpMethods();</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取单例</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpMethods <span class=\"title\">getInstance</span><span class=\"params\">(String BASE_URL)</span> </span>{</span><br><span class=\"line\">    HttpMethods.BASE_URL = BASE_URL;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postDevice</span><span class=\"params\">(Subscriber&amp;lt;DeviceResponse&amp;gt; subscriber, String code, DeviceRequestBody requestBody)</span> </span>{</span><br><span class=\"line\">    movieService.postDevice(code,requestBody)</span><br><span class=\"line\">\t.subscribeOn(Schedulers.io())</span><br><span class=\"line\">\t.unsubscribeOn(Schedulers.io())</span><br><span class=\"line\">\t.observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">\t.subscribe(subscriber);</span><br><span class=\"line\">  }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n创建 DeviceRequestBody\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeviceRequestBody</span> </span>{</span><br><span class=\"line\">  String DeviceNum ;</span><br><span class=\"line\">  String Signature;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DeviceRequestBody</span><span class=\"params\">(String deviceNum, String signature)</span> </span>{</span><br><span class=\"line\">    DeviceNum = deviceNum;</span><br><span class=\"line\">    Signature = signature;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n再创建一个 DeviceResponse\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@Generated</span>(<span class=\"string\">\"com.robohorse.robopojogenerator\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeviceResponse</span></span>{</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"annotation\">@SerializedName</span>(<span class=\"string\">\"uniqueCode\"</span>)</span><br><span class=\"line\">\t<span class=\"annotation\">@Expose</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uniqueCode;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"annotation\">@SerializedName</span>(<span class=\"string\">\"signature\"</span>)</span><br><span class=\"line\">\t<span class=\"annotation\">@Expose</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String signature;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"annotation\">@SerializedName</span>(<span class=\"string\">\"response\"</span>)</span><br><span class=\"line\">\t<span class=\"annotation\">@Expose</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String response;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUniqueCode</span><span class=\"params\">(String uniqueCode)</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.uniqueCode = uniqueCode;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUniqueCode</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> uniqueCode;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSignature</span><span class=\"params\">(String signature)</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.signature = signature;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSignature</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> signature;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResponse</span><span class=\"params\">(String response)</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.response = response;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResponse</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> response;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"annotation\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">\"DeviceResponse{\"</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"uniqueCode = '\"</span> + uniqueCode + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\",signature = '\"</span> + signature + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\",response = '\"</span> + response + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"}\"</span>;</span><br><span class=\"line\">\t\t\t}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n最后的调用\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> DeviceRequestBody requestBody = <span class=\"keyword\">new</span> DeviceRequestBody();</span><br><span class=\"line\">Subscriber&amp;lt;DeviceResponse&amp;gt; subscriber = <span class=\"keyword\">new</span> Subscriber&amp;lt;DeviceResponse&amp;gt;() {</span><br><span class=\"line\">      <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>{</span><br><span class=\"line\">\te.fillInStackTrace();</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(DeviceResponse deviceResponse)</span> </span>{</span><br><span class=\"line\">\t   }</span><br><span class=\"line\">    };</span><br><span class=\"line\">    HttpMethods.getInstance(HebeiService.ENDPOINT).postDevice(subscriber,<span class=\"string\">\"\"</span>,requestBody);</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-06 Mon 17:28.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","retrofit","rxjava"]},{"title":"Android Retrofit 使用","url":"http://gyzclw.github.io/2017/02/24/Android Retrofit 使用/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android Retrofit 使用</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> Install&#x2026;&#x2026;..</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n在build.gradle 中加入下面代码\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:retrofit:2.2.0'</span></span><br><span class=\"line\">compile <span class=\"string\">'com.squareup.okhttp3:okhttp:3.5.0'</span></span><br><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> How to use do a get request</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n</div><div id=\"outline-container-sec-1-2-1\" class=\"outline-4\">\n<h4 id=\"sec-1-2-1\"><span class=\"section-number-4\">1.2.1</span> add interface MegaService</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MegaService</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"annotation\">@GET</span>(<span class=\"string\">\"servlet\"</span>) Call&amp;lt;Code&amp;gt; listCodeRepo(<span class=\"annotation\">@Query</span>(<span class=\"string\">\"parm\"</span>) String user);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<blockquote>\n<p>\n如果api类似于:<a href=\"http://192.168.1.106:8080/httpclient_gjj/servlet?parm=code\" target=\"_blank\" rel=\"external\">http://192.168.1.106:8080/httpclient_gjj/servlet?parm=code</a> 需要\n使用@Query注解.\n</p>\n</blockquote>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2-2\" class=\"outline-4\">\n<h4 id=\"sec-1-2-2\"><span class=\"section-number-4\">1.2.2</span> add Gson support</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-2\">\n</div><ol class=\"org-ol\"><li><a id=\"sec-1-2-2-1\" name=\"sec-1-2-2-1\"></a>install&#x2026;. Gson conventer<br><div class=\"outline-text-5\" id=\"text-1-2-2-1\">\n<p>\n在build.gradle 中\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li>\n\n<li><a id=\"sec-1-2-2-2\" name=\"sec-1-2-2-2\"></a>create gson model<br><div class=\"outline-text-5\" id=\"text-1-2-2-2\">\n<p>\nresponse数据如下:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{\"<span class=\"attribute\">CheckCode</span>\":<span class=\"value\"><span class=\"string\">\"/9j/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAx\\nNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy\\nMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAAUCAAUADwEASIAAhEBAxEBBCIA/8QAHwAAAQUB\\nAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEG\\nE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW\\nV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLD\\nxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAA\\nAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKR\\nobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp\\nanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU\\n1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADgQBAAIRAxEEAAA/APcElDGLEjcsB16/d6/N0/8A\\nrdc/Ng3Gq6xa+VeyrbJam7WEWpLGVkJVA28SEZJIYLt6cZyed5JQxixI3LAdev3evzdP/rdc/Nzc\\nEl/c6vHdajpl9IIpytqiSQmGMAgCQ5m3Fip6443ADOTvzqN3SR2YRRu3K1l3td+Su/x3XTs/f6KK\\nKlvL/WoNRsLW3vbKZ7mb/VG2dSsQ27mZvOPTKgcfMSOzcrZ63Leax9nXV9OjC3JiW0KlppFXAPPn\\ncZw3O09O+eblrFO3iK4vJWYQGGGCD5gc4OX/AIiQCWX64HXPzZU1pfXwt7FtOit9mpLci8hZBGQH\\nV94UuW8wjg5GCWJDEH5p1T/4f+vM6abpSXLK2y193rrt1torLXcKKKKs2ety3msfZ11fTowtyYlt\\nCpaaRVwDz53GcNztPTvnneSUMYsSNywHXr93r83T/wCt1z83MTWl9fC3sW06K32aktyLyFkEZAdX\\n3hS5bzCODkYJYkMQfm6dJQxixI3LAdev3evzdP8A63XPzVTvbU5sWoLlcLeit99137PVBRRRQkoY\\nxYkblgOvX7vX5un/ANbrn5rFq4eIkEnkDk+w9z/n16mukoYxYkblgOvX7vX5un/1uufmsWrh4iQS\\neQOT7D3P+fXqdDjCiiiqUdw7GLkjlc/M3OfL9/8Aa/zk5I7h2MXJHK5+Zuc+X7/7X+cnJRQAUUUU\\nR3DsYuSOVz8zc58v3/2v85OSO4djFyRyufmbnPl+/wDtf5yclFABRRRRHcOxi5I5XPzNzny/f/a/\\nzk5I7h2MXJHK5+Zuc+X7/wC1/nJyUUAFFFFEdw7GLkjlc/M3OfL9/wDa/wA5ObVjKZYSzf7Pcnqi\\nnufeiigAooor/9k=\"</span></span>}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n则model为:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Code</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span><br><span class=\"line\">   * CheckCode : \"fsadfs\"</span><br><span class=\"line\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String CheckCode;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCheckCode</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CheckCode;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCheckCode</span><span class=\"params\">(String CheckCode)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.CheckCode = CheckCode;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li></ol>\n</div>\n\n<div id=\"outline-container-sec-1-2-3\" class=\"outline-4\">\n<h4 id=\"sec-1-2-3\"><span class=\"section-number-4\">1.2.3</span> Retrofit 操作</h4>\n<div class=\"outline-text-4\" id=\"text-1-2-3\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit = <span class=\"keyword\">new</span> Retrofit.Builder().baseUrl(apiUri)</span><br><span class=\"line\">\t.addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">\t.build();</span><br><span class=\"line\">MegaService service = retrofit.create(MegaService.class);</span><br><span class=\"line\"></span><br><span class=\"line\">Call&amp;lt;Code&amp;gt; call = service.listCodeRepo(<span class=\"string\">\"code\"</span>);</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> How to use to do a post request</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n</div><div id=\"outline-container-sec-1-3-1\" class=\"outline-4\">\n<h4 id=\"sec-1-3-1\"><span class=\"section-number-4\">1.3.1</span> update interface MegaService</h4>\n<div class=\"outline-text-4\" id=\"text-1-3-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@FormUrlEncoded</span> <span class=\"annotation\">@POST</span>(<span class=\"string\">\"servlet\"</span>) Call&amp;lt;ProvidentFund&amp;gt; postData(<span class=\"annotation\">@Query</span>(<span class=\"string\">\"parm\"</span>) String user,</span><br><span class=\"line\">      <span class=\"annotation\">@Field</span>(<span class=\"string\">\"UserType\"</span>) String type, <span class=\"annotation\">@Field</span>(<span class=\"string\">\"UserId\"</span>) String id, <span class=\"annotation\">@Field</span>(<span class=\"string\">\"UserPwd\"</span>) String psd,</span><br><span class=\"line\">      <span class=\"annotation\">@Field</span>(<span class=\"string\">\"CheckCode\"</span>) String code);</span><br></pre></td></tr></table></figure>\n</div>\n<ol class=\"org-ol\">\n<li>Illegal Argument Exception - @Field parameters can only be used with form encoding\n</li>\n</ol>\n<blockquote>\n<p>\n使用@Filed 注解需要添加@FormUrlEncoded注解在方法前面\n</p>\n</blockquote>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3-2\" class=\"outline-4\">\n<h4 id=\"sec-1-3-2\"><span class=\"section-number-4\">1.3.2</span> Retrofit 操作</h4>\n<div class=\"outline-text-4\" id=\"text-1-3-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Call&amp;lt;ProvidentFund&amp;gt; call = service.postData(<span class=\"string\">\"login\"</span>, <span class=\"string\">\"10\"</span>, mUserName.getText().toString(),</span><br><span class=\"line\">\tmUserPsd.getText().toString(), mProvidentCode.getText().toString());</span><br><span class=\"line\">call.execute()</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-02-24 Fri 14:13.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","http"]},{"title":"RecyclerView.ItemDecoration的用法","url":"http://gyzclw.github.io/2017/02/23/RecylcerView.ItemDecoration的用法/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> RecylerView.Itemdecoration的用法</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nItemdecoration 顾名思义是item的装饰器,用来自定义childView,有三个方法:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">getItemOffsets(Rect outRect, View view, Recylerview parant, Recylerview.State state){}</span><br><span class=\"line\">onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {}</span><br><span class=\"line\">onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state){}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> getItemoffsets的作用</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n设置item 的偏移量,就是给item添加padding,如outRect.bottom = 30 就是添加padding 30\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">outRect.bottom = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-02-23 Thu 11:15.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","recyclerview"]},{"title":"Android 单元测试框架Robolectric","url":"http://gyzclw.github.io/2017/02/23/Android单元测试框架Robolectric/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android 单元测试框架robolectric</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> Robolectric‘s install</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n在build.gralde 中\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies {</span><br><span class=\"line\">  testCompile <span class=\"string\">\"org.robolectric:robolectric:3.2.2\"</span></span><br><span class=\"line\">  testCompile <span class=\"string\">'org.assertj:assertj-core:1.7.1'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 测试 Activity</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\nconstants = BuildConfig.class ,Robolectric 通过constants 来计算gradle编译程序需要的输出值。\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@RunWith</span>(RobolectricTestRunner.class)</span><br><span class=\"line\"><span class=\"annotation\">@Config</span>(constants = BuildConfig.class, sdk = <span class=\"number\">21</span>, packageName = <span class=\"string\">\"com.mega.ui.activity\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProvidentFundNativeActivityTest</span> </span>{</span><br><span class=\"line\">  <span class=\"annotation\">@Test</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testActivity</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">    ProvidentFundNativeActivity activity =</span><br><span class=\"line\">    Robolectric.setupActivity(ProvidentFundNativeActivity.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    EditText user = (EditText) activity.findViewById(R.id.providentUser);</span><br><span class=\"line\">    EditText psd = (EditText) activity.findViewById(R.id.providentPsd);</span><br><span class=\"line\">    EditText code = (EditText) activity.findViewById(R.id.providentCode);</span><br><span class=\"line\">    CheckBox mRbAgreement = (CheckBox) activity.findViewById(R.id.rbAgreement);</span><br><span class=\"line\">    user.setText(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    psd.setText(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    code.setText(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    mRbAgreement.setChecked(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    activity.findViewById(R.id.btn_login).performClick();</span><br><span class=\"line\">    Intent expectedIntent = <span class=\"keyword\">new</span> Intent(activity, ProvidentFundNativeDetailActivity.class);</span><br><span class=\"line\">    Intent actualIntent = ShadowApplication.getInstance().getNextStartedActivity();</span><br><span class=\"line\">    assertTrue(actualIntent.filterEquals(expectedIntent));</span><br><span class=\"line\"></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 遇到的问题</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<ul class=\"org-ul\">\n<li>java.lang.NoClassDefFoundError: javax/microedition/khronos/opengles/GL\n<span class=\"underline\">是Config{sdk = 21}SDK版本问题,降低版本号。</span>\n</li>\n<li>assertThat(actualIntent).isEqualTo(expectedIntent)报java.lang.AssertionError:\n</li>\n</ul>\n<blockquote>\n<p>\njava.lang.AssertionError:\nExpecting:\n &lt;\"Intent { cmp=com.mega.ui.activity/.ProvidentFundNativeDetailActivity } (Intent@3966c679)\"&gt;\nto be equal to:\n &lt;\"Intent { cmp=com.mega.ui.activity/.ProvidentFundNativeDetailActivity } (Intent@66a99584)\"&gt;\nbut was not.\n</p>\n</blockquote>\n<p>\n修改为:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">assertTrue(actualIntent.filterEquals(expectedIntent));</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-02-23 Thu 22:59.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","robolectric"]},{"title":"Android RecyclerView (1)打开和关闭二级列表,(2) 添加分割线","url":"http://gyzclw.github.io/2017/02/21/AndroidRecyclerView打开和关闭二级列表/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android Recyclerview 打开和关闭二级列表</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n思路: 就是更新RecyclerView 的 数据集合 List&lt;Object&gt; mItems, 通过判断当前父item\n对应的开闭状态更新mItems.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&amp;lt;Integer&amp;gt; fatherStatue = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\"><span class=\"comment\">// 父item 的点击事件更新mItems</span></span><br><span class=\"line\">vh.itemView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() {</span><br><span class=\"line\">     <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>{</span><br><span class=\"line\"></span><br><span class=\"line\">       List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; datas = items.get(mitems.get(position));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (fatherStatus.get(position) == FATHER_CLOSE) {</span><br><span class=\"line\">\t fatherStatus.set(position, FATHER_OPEN);</span><br><span class=\"line\">\t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &amp;lt; datas.size(); i++) {</span><br><span class=\"line\">\t   mitems.add(position + i + <span class=\"number\">1</span>, datas.get(i));</span><br><span class=\"line\">\t   mitemType.add(position + i + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t   fatherStatus.add(position + i + <span class=\"number\">1</span>, FATHER_OPEN);</span><br><span class=\"line\">\t }</span><br><span class=\"line\">       } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t fatherStatus.set(position, FATHER_CLOSE);</span><br><span class=\"line\">\t <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = datas.size(); i &amp;gt; <span class=\"number\">0</span>; i--) {</span><br><span class=\"line\">\t   mitems.remove(position + i);</span><br><span class=\"line\">\t   mitemType.remove(position + i);</span><br><span class=\"line\">\t   fatherStatus.remove(position + i);</span><br><span class=\"line\">\t }</span><br><span class=\"line\">       }</span><br><span class=\"line\">       notifyDataSetChanged();</span><br><span class=\"line\">     }</span><br><span class=\"line\">   });</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Android Recyclerview 添加分割线</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n通过DividerItemDecoration 实现分割线\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">DividerItemDecoration mDividerItemDecoration =</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DividerItemDecoration(binding.providentRecycler.getContext(),</span><br><span class=\"line\">\tmLayoutManager.getOrientation());</span><br><span class=\"line\">binding.providentRecycler.addItemDecoration(mDividerItemDecoration);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n<b>Divideritemdecoration 在android resposible library 25 才存在</b>\n</p>\n</div>\n</div>\n\nLast Updated 2017-02-22 Wed 09:31.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","recyclerview"]},{"title":"Android RecyclerView add header and child view","url":"http://gyzclw.github.io/2017/02/19/Android RecyclerView添加header和child view/","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Android RecyclerView</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> Add Header for RecyclerView</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n   继承RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; 自定义一个\nProvidentFundDetailAdater.onCreateviewholder()创建新的RecyclerView.ViewHolder 和初始化一些RecyclerView使用的private filed。\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@Override</span> <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent,</span><br><span class=\"line\"><span class=\"keyword\">int</span> viewType)</span> </span>{</span><br><span class=\"line\"> View v;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (viewType == HEADER_VIEW) {</span><br><span class=\"line\">     v = LayoutInflater.from(parent.getContext())</span><br><span class=\"line\">\t .inflate(R.layout.header_provident, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">     HeaderFooterViewHolder vh = <span class=\"keyword\">new</span> HeaderFooterViewHolder(v);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> vh;</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (viewType == FOOTER_VIEW) {</span><br><span class=\"line\"></span><br><span class=\"line\">   }</span><br><span class=\"line\"></span><br><span class=\"line\">   v = LayoutInflater.from(parent.getContext()).</span><br><span class=\"line\">\t  inflate(R.layout.normal_provident, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   NormalViewHolder vh = <span class=\"keyword\">new</span> NormalViewHolder(v);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> vh;</span><br><span class=\"line\">   }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n   而创建Header View 需要创建它的ViewHoder ,我们需要一些状态来标识是Header View 还是\nNormal View;\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NORMAL_VIEW = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HEADER_VIEW = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FOOTER_VIEW = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&amp;lt;View&amp;gt; headers = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&amp;lt;String&amp;gt; items = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&amp;lt;View&amp;gt; footers = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n通过判断position 和headers items 的size 大小判断 itemtype\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>{</span><br><span class=\"line\">       <span class=\"comment\">//check what type our position is, based on the</span></span><br><span class=\"line\">       <span class=\"comment\">//assumption that the order is headers &amp;gt; items &amp;gt; footers</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(position &amp;lt; headers.size()){</span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> TYPE_HEADER;</span><br><span class=\"line\">\t }<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(position &amp;gt;= headers.size() + items.size()){</span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> TYPE_FOOTER;</span><br><span class=\"line\">       }</span><br><span class=\"line\">       <span class=\"keyword\">return</span> TYPE_ITEM;</span><br><span class=\"line\">   }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n判断来View Type 就可以在onBindViewHolder()中bind itemview\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder vh,</span><br><span class=\"line\">  <span class=\"keyword\">int</span> position)</span> </span>{</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (position &amp;lt; headers.size()) {</span><br><span class=\"line\">     View v = headers.get(position);</span><br><span class=\"line\">     <span class=\"comment\">//add our view to a header view and display it</span></span><br><span class=\"line\">     prepareHeaderFooter((HeaderFooterViewHolder) vh, v);</span><br><span class=\"line\">   } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &amp;gt;= headers.size() + items.size()) {</span><br><span class=\"line\">     View v = footers.get(position - items.size() - headers.size());</span><br><span class=\"line\">     <span class=\"comment\">//add oru view to a footer view and display it</span></span><br><span class=\"line\">     prepareHeaderFooter((HeaderFooterViewHolder) vh, v);</span><br><span class=\"line\">   } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">     <span class=\"comment\">//it's one of our items, display as required</span></span><br><span class=\"line\">     prepareGeneric((NormalViewHolder) vh, position - headers.size());</span><br><span class=\"line\">   }</span><br><span class=\"line\"> }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n通过addHeader(View header)向集合headers 中添加item\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(View header)</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!headers.contains(header)) {</span><br><span class=\"line\">    headers.add(header);</span><br><span class=\"line\">    <span class=\"comment\">//animate</span></span><br><span class=\"line\">    notifyItemInserted(headers.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Android RecyclerView</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Add child view for RecyclerView</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n首先是List&lt;Interger&gt; mitemType 存储item的类型: 0代表NORMAL VIEW, 1代表CHILD VIEW。\n和List&lt;String&gt; mitems 存储总的数据.\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> HashMap&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; items = <span class=\"keyword\">new</span> HashMap&amp;lt;&amp;gt;();</span><br><span class=\"line\"> List&amp;lt;String&amp;gt; item = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\"> item.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"> item.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"> item.add(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"> items.put(<span class=\"string\">\"2001\"</span>, item);</span><br><span class=\"line\"> items.put(<span class=\"string\">\"2002\"</span>, item);</span><br><span class=\"line\"> items.put(<span class=\"string\">\"2003\"</span>, item);</span><br><span class=\"line\"> List&amp;lt;String&amp;gt; mitems = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\"> List&amp;lt;Integer&amp;gt; mitemType = <span class=\"keyword\">new</span> ArrayList&amp;lt;&amp;gt;();</span><br><span class=\"line\">Iterator i = items.keySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (i.hasNext()) {</span><br><span class=\"line\">   String key = (String) i.next();</span><br><span class=\"line\">   mitemType.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">   mitems.add(key);</span><br><span class=\"line\">   List&amp;lt;String&amp;gt; datas = items.get(key);</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (String data : datas) {</span><br><span class=\"line\">     mitems.add(data);</span><br><span class=\"line\">     mitemType.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">   }</span><br><span class=\"line\"> }</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n然后就是和add header 一样, 在getItemType中判断item的类型\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"annotation\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (position &amp;lt; headers.size()) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HEADER_VIEW;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (position &amp;gt;= headers.size() + mitems.size()) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FOOTER_VIEW;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mitemType.get(position - headers.size() - footers.size()) == <span class=\"number\">0</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> NORMAL_VIEW;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> CHILD_VIEW;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-20 Mon 15:00.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["android"],"tags":["android","journal","recyclerview"]},{"title":"chatnote","url":"http://gyzclw.github.io/2017/02/19/chatnote/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 资料</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> WhatsApp 通信协议</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\nWhatesApp服务器池使用了SSL Socket, 在客户端重新连接对消息进行检索之,所有消息都会\n在服务器上排队。消息的成功检索会发回给WhatsApp服务器，它将会被重新转发给原始发送者\n一旦客户端成功接收消息，它就会在服务器存储中擦除。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 思路</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 服务端</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n客户端发送消息到服务器，服务器接收消息，检查对方是否在线，这时候存在两种情况\n</p>\n<ol class=\"org-ol\">\n<li>在线，将消息推送到客户端\n</li>\n<li>不在线，保存消息到数据库，当客户端上线，将消息推送到客户端。\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> 客户端</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n保持在线，检查服务端消息。用户上线检查服务器是否有消息，有消息展现消息。\n</p>\n</div>\n</div>\n</div>\n\nLast Updated 2017-02-20 Mon 14:28.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["笔记"],"tags":["chatnote"]},{"title":"MVVM之DataBinding","url":"http://gyzclw.github.io/2016/08/14/MVVM之DataBinding/","content":"<p>android DataBinding 的使用，注意：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></div><div class=\"line\">       <span class=\"attr\">name</span>=<span class=\"string\">\"viewModel\"</span></div><div class=\"line\">       <span class=\"attr\">type</span>=<span class=\"string\">\"com.mega.viewmodel.UserViewModel\"</span>/&gt;</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">       <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/login\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_below</span>=<span class=\"string\">\"@+id/user_password\"</span></div><div class=\"line\">       <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimaryDark\"</span></div><div class=\"line\">       <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;viewModel.setLogin&#125;\"</span></div><div class=\"line\">       <span class=\"attr\">android:text</span>=<span class=\"string\">\"Login\"</span></div><div class=\"line\">       <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/wild_sand\"</span></div><div class=\"line\">       /&gt;</div></pre></td></tr></table></figure></p>\n<p>要使用viewModel的 onclick生效必须在View中绑定ViewModel<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ActivityLoginBinding loginBinding;</div><div class=\"line\">loginBinding = DataBindingUtil.setContentView(<span class=\"keyword\">this</span>, R.layout.activity_login);</div><div class=\"line\">loginBinding.setViewModel(<span class=\"keyword\">new</span> UserViewModel());</div></pre></td></tr></table></figure></p>\n<h2 id=\"viewModel-的作用\"><a href=\"#viewModel-的作用\" class=\"headerlink\" title=\"viewModel 的作用\"></a>viewModel 的作用</h2><p>The presenter only interacts with the view interface，get data from Model,<br>It retrieves data from the model and returns it formatted to the view. But unlike the typical MVC, it also decides what happens when you interact with the view.</p>\n","categories":[],"tags":[]},{"title":"自定义view之圆形头像","url":"http://gyzclw.github.io/2016/08/13/自定义view之圆形头像/","content":"<h1 id=\"实现的思路\"><a href=\"#实现的思路\" class=\"headerlink\" title=\"实现的思路\"></a>实现的思路</h1><pre><code>在开发中需要实现头像功能，本来是直接从网上找到开源图片库，不过我觉得需要提升自己的。所以开始自定义view 的功能，\n先分析一下实现的思路，android 自带的ImageView 是显示图片是长方形，而我们需要实现的是圆形的展示图片，所以实际上就是将长方形变成圆形，而圆形显示需要先求出圆的半径r。\n</code></pre><p>新建一个长方形，然后大小设置为自定义View的大小，圆的半径就等于宽和高中较短的<br>一半。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">    mBorderPaint.setStrokeWidth(mBorderWidth);</div><div class=\"line\">    mBitmapWidth = mBitmap.getWidth();</div><div class=\"line\">    mBitmapHeight = mBitmap.getHeight();</div><div class=\"line\">    mBorderRect.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</div><div class=\"line\">    mBorderRadius = Math.min((mBorderRect.width() - mBorderWidth) / <span class=\"number\">2</span>,</div><div class=\"line\">        (mBorderRect.height() - mBorderWidth) / <span class=\"number\">2</span>);</div><div class=\"line\">    mDrawableRect.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mBorderRect.width() - mBitmapWidth,</div><div class=\"line\">        mBorderRect.height() - mBitmapWidth);</div><div class=\"line\">    mDrawableRadius = Math.min(mDrawableRect.width() / <span class=\"number\">2</span>, mDrawableRect.height() / <span class=\"number\">2</span>);</div><div class=\"line\">    updateShaderMatrix();</div><div class=\"line\">    invalidate();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接下来获取圆点的坐标<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = getWidth()  / <span class=\"number\">2</span> </div><div class=\"line\">y = getHeight() / <span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<p>通过Paint来绘制图片。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mBitmapShader = <span class=\"keyword\">new</span> BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Paint mBitmapPaint = <span class=\"keyword\">new</span> Paint();</div><div class=\"line\">mBitmapPaint.setAntiAlias(<span class=\"keyword\">true</span>);</div><div class=\"line\">mBitmapPaint.setShader(mBitmapShader);</div></pre></td></tr></table></figure></p>\n<p>重写onDraw()方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">canvas.drawCircle(getWidth() / <span class=\"number\">2</span>, getHeight() / <span class=\"number\">2</span>, mDrawableRadius, mBitmapPaint);</div></pre></td></tr></table></figure></p>\n","categories":[],"tags":[]},{"title":"angular笔记","url":"http://gyzclw.github.io/2016/03/18/angular笔记/","content":"<h1 id=\"this-and-scope\"><a href=\"#this-and-scope\" class=\"headerlink\" title=\"this and $scope\"></a>this and $scope</h1><p>$scope 是全局的，可以直接使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ACtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">                   $scope.test = <span class=\"string\">\"一个例子\"</span>; <span class=\"comment\">//在$scope对象中加入test</span></div><div class=\"line\">               &#125;</div></pre></td></tr></table></figure>\n<p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ACtrl\"</span>&gt;</span></div><div class=\"line\">                    &#123;&#123;test&#125;&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>this 则只能在当前controllers中使用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ACtrl</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span> ;   </div><div class=\"line\">              <span class=\"keyword\">this</span>.test = <span class=\"string\">\"一个例子\"</span>; <span class=\"comment\">//在$scope对象中加入test</span></div><div class=\"line\">               &#125;</div></pre></td></tr></table></figure></p>\n<p>html:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"ACtrl as a\"</span>&gt;</span></div><div class=\"line\">                    &#123;&#123;a.test&#125;&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","categories":[],"tags":[]},{"title":"Ruby_Style_Guide","url":"http://gyzclw.github.io/2016/01/08/Ruby-Style-Guide/","content":"<h1 id=\"Ruby-Style-Guide\"><a href=\"#Ruby-Style-Guide\" class=\"headerlink\" title=\"Ruby Style Guide\"></a>Ruby Style Guide</h1><p>This is Airbnb’s Ruby Style Guide.</p>\n<p>It was inspired by <a href=\"https://github.com/styleguide/ruby\" target=\"_blank\" rel=\"external\">Github’s guide</a> and <a href=\"https://github.com/bbatsov/ruby-style-guide\" target=\"_blank\" rel=\"external\">Bozhidar Batsov’s guide</a>.</p>\n<p>Airbnb also maintains a <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">JavaScript Style Guide</a>.</p>\n<p>)</p>\n<h2 id=\"Whitespace\"><a href=\"#Whitespace\" class=\"headerlink\" title=\"Whitespace\"></a>Whitespace</h2><h3 id=\"Indentation\"><a href=\"#Indentation\" class=\"headerlink\" title=\"Indentation\"></a>Indentation</h3><ul>\n<li><p>Use soft-tabs with a two space-indent.</p>\n</li>\n<li><p>Indent <code>when</code> as deep as <code>case</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span></div><div class=\"line\"><span class=\"keyword\">when</span> song.name == <span class=\"string\">'Misty'</span></div><div class=\"line\">  puts <span class=\"string\">'Not again!'</span></div><div class=\"line\"><span class=\"keyword\">when</span> song.duration &gt; <span class=\"number\">120</span></div><div class=\"line\">  puts <span class=\"string\">'Too long!'</span></div><div class=\"line\"><span class=\"keyword\">when</span> Time.now.hour &gt; <span class=\"number\">21</span></div><div class=\"line\">  puts <span class=\"string\">\"It's too late\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  song.play</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">kind = <span class=\"keyword\">case</span> year</div><div class=\"line\">       <span class=\"keyword\">when</span> <span class=\"number\">1850</span>..<span class=\"number\">1889</span> <span class=\"keyword\">then</span> <span class=\"string\">'Blues'</span></div><div class=\"line\">       <span class=\"keyword\">when</span> <span class=\"number\">1890</span>..<span class=\"number\">1909</span> <span class=\"keyword\">then</span> <span class=\"string\">'Ragtime'</span></div><div class=\"line\">       <span class=\"keyword\">when</span> <span class=\"number\">1910</span>..<span class=\"number\">1929</span> <span class=\"keyword\">then</span> <span class=\"string\">'New Orleans Jazz'</span></div><div class=\"line\">       <span class=\"keyword\">when</span> <span class=\"number\">1930</span>..<span class=\"number\">1939</span> <span class=\"keyword\">then</span> <span class=\"string\">'Swing'</span></div><div class=\"line\">       <span class=\"keyword\">when</span> <span class=\"number\">1940</span>..<span class=\"number\">1950</span> <span class=\"keyword\">then</span> <span class=\"string\">'Bebop'</span></div><div class=\"line\">       <span class=\"keyword\">else</span> <span class=\"string\">'Jazz'</span></div><div class=\"line\">       <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Align function parameters either all on the same line or one per line.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">create_translation</span><span class=\"params\">(phrase_id,</span></span></div><div class=\"line\">                            phrase_key,</div><div class=\"line\">                            target_locale,</div><div class=\"line\">                            value,</div><div class=\"line\">                            user_id,</div><div class=\"line\">                            do_xss_check,</div><div class=\"line\">                            allow_verification)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">create_translation</span><span class=\"params\">(phrase_id, phrase_key, target_locale,</span></span></div><div class=\"line\">                            value, user_id, do_xss_check, allow_verification)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Indent succeeding lines in multi-line boolean expressions.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_eligible?</span><span class=\"params\">(user)</span></span></div><div class=\"line\">  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;&amp;</div><div class=\"line\">    is_in_program?(user) &amp;&amp;</div><div class=\"line\">    program_not_expired</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_eligible?</span><span class=\"params\">(user)</span></span></div><div class=\"line\">  Trebuchet.current.launch?(ProgramEligibilityHelper::PROGRAM_TREBUCHET_FLAG) &amp;&amp;</div><div class=\"line\">  is_in_program?(user) &amp;&amp;</div><div class=\"line\">  program_not_expired</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Inline\"><a href=\"#Inline\" class=\"headerlink\" title=\"Inline\"></a>Inline</h3><ul>\n<li><p>Never leave trailing whitespace.</p>\n</li>\n<li><p>Use spaces around operators; after commas, colons, and semicolons; and around<br><code>{</code> and before <code>}</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum = <span class=\"number\">1</span> + <span class=\"number\">2</span></div><div class=\"line\">a, b = <span class=\"number\">1</span>, <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">1</span> &gt; <span class=\"number\">2</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>; puts <span class=\"string\">'Hi'</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].each &#123; <span class=\"params\">|e|</span> puts e &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>No spaces after <code>(</code>, <code>[</code> or before <code>]</code>, <code>)</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">some(arg).other</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].length</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Newlines\"><a href=\"#Newlines\" class=\"headerlink\" title=\"Newlines\"></a>Newlines</h3><ul>\n<li><p>Add a new line after <code>if</code> conditions span multiple lines to help<br>differentiate between the conditions and the body.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp;</div><div class=\"line\">   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class=\"line\"></div><div class=\"line\">  redirect_to_alteration @reservation_alteration</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Add a new line after conditionals, blocks, case statements, etc.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> robot.is_awesome?</div><div class=\"line\">  send_robot_present</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">robot.add_trait(<span class=\"symbol\">:human_like_intelligence</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Line-Length\"><a href=\"#Line-Length\" class=\"headerlink\" title=\"Line Length\"></a>Line Length</h2><p>Keep each line of code to a readable length. Unless you have a reason<br>to, keep lines to fewer than 100 characters. Keeping code visually<br>grouped together (as a 100-character line limit enforces) makes it<br>easier to understand. For example, you don’t have to scroll back and<br>forth on one line to see what’s going on – you can view it all<br>together.</p>\n<p>Here are examples from our codebase showing several techniques for<br>breaking complex statements into multiple lines that are all &lt; 100<br>characters. Notice techniques like:</p>\n<ul>\n<li>liberal use of linebreaks inside unclosed <code>(</code> <code>{</code> <code>[</code></li>\n<li>chaining methods, ending unfinished chains with a <code>.</code></li>\n<li>composing long strings by putting strings next to each other, separated<br>by a backslash-then-newline.</li>\n<li>breaking long logical statements with linebreaks after operators like<br><code>&amp;&amp;</code> and <code>||</code></li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope = Translation::Phrase.includes(<span class=\"symbol\">:phrase_translations</span>).</div><div class=\"line\">  joins(<span class=\"symbol\">:phrase_screenshots</span>).</div><div class=\"line\">  where(<span class=\"symbol\">:phrase_screenshots</span> =&gt; &#123;</div><div class=\"line\">    <span class=\"symbol\">:controller</span> =&gt; controller_name,</div><div class=\"line\">    <span class=\"symbol\">:action</span> =&gt; JAROMIR_JAGR_SALUTE,</div><div class=\"line\">  &#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">translation = FactoryGirl.create(</div><div class=\"line\">  <span class=\"symbol\">:phrase_translation</span>,</div><div class=\"line\">  <span class=\"symbol\">:locale</span> =&gt; <span class=\"symbol\">:is</span>,</div><div class=\"line\">  <span class=\"symbol\">:phrase</span> =&gt; phrase,</div><div class=\"line\">  <span class=\"symbol\">:key</span> =&gt; <span class=\"string\">'phone_number_not_revealed_time_zone'</span>,</div><div class=\"line\">  <span class=\"symbol\">:value</span> =&gt; <span class=\"string\">'Símanúmerið þitt verður ekki birt. Það er aðeins hægt að hringja á '</span>\\</div><div class=\"line\">            <span class=\"string\">'milli 9:00 og 21:00 %&#123;time_zone&#125;.'</span></div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp;</div><div class=\"line\">   @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class=\"line\"></div><div class=\"line\">  redirect_to_alteration @reservation_alteration</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> @presenter.guest_visa_russia? </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\"> icon_tile_for(I18n.t(<span class=\"string\">\"email.reservation_confirmed_guest.visa.details_header\"</span>,</span></div><div class=\"line\">                           <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">\"Visa for foreign Travelers\"</span>),</div><div class=\"line\">                    <span class=\"symbol\">:beveled_big_icon</span> =&gt; <span class=\"string\">\"stamp\"</span>) <span class=\"keyword\">do</span> <span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\"> I18n.t(<span class=\"string\">\"email.reservation_confirmed_guest.visa.russia.details_copy\"</span>,</span></div><div class=\"line\">               <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">\"Foreign guests travelling to Russia may need to obtain a visa...\"</span>) <span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">end</span> </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">end</span> </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div></pre></td></tr></table></figure>\n<p>These code snippets are very much more readable than the alternative:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">scope = Translation::Phrase.includes(<span class=\"symbol\">:phrase_translations</span>).joins(<span class=\"symbol\">:phrase_screenshots</span>).where(<span class=\"symbol\">:phrase_screenshots</span> =&gt; &#123; <span class=\"symbol\">:controller</span> =&gt; controller_name, <span class=\"symbol\">:action</span> =&gt; JAROMIR_JAGR_SALUTE &#125;)</div><div class=\"line\"></div><div class=\"line\">translation = FactoryGirl.create(<span class=\"symbol\">:phrase_translation</span>, <span class=\"symbol\">:locale</span> =&gt; <span class=\"symbol\">:is</span>, <span class=\"symbol\">:phrase</span> =&gt; phrase, <span class=\"symbol\">:key</span> =&gt; <span class=\"string\">'phone_number_not_revealed_time_zone'</span>, <span class=\"symbol\">:value</span> =&gt; <span class=\"string\">'Símanúmerið þitt verður ekki birt. Það er aðeins hægt að hringja á milli 9:00 og 21:00 %&#123;time_zone&#125;.'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> @reservation_alteration.checkin == @reservation.start_date &amp;&amp; @reservation_alteration.checkout == (@reservation.start_date + @reservation.nights)</div><div class=\"line\">  redirect_to_alteration @reservation_alteration</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span></span><span class=\"ruby\"> <span class=\"keyword\">if</span> @presenter.guest_visa_russia? </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\"> icon_tile_for(I18n.t(<span class=\"string\">\"email.reservation_confirmed_guest.visa.details_header\"</span>, <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">\"Visa for foreign Travelers\"</span>), <span class=\"symbol\">:beveled_big_icon</span> =&gt; <span class=\"string\">\"stamp\"</span>) <span class=\"keyword\">do</span> </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\"> I18n.t(<span class=\"string\">\"email.reservation_confirmed_guest.visa.russia.details_copy\"</span>, <span class=\"symbol\">:default</span> =&gt; <span class=\"string\">\"Foreign guests travelling to Russia may need to obtain a visa prior to...\"</span>) </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">end</span> </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span></span><span class=\"ruby\"> <span class=\"keyword\">end</span> </span><span class=\"xml\"><span class=\"tag\">%&gt;</span></span></div></pre></td></tr></table></figure>\n<h2 id=\"Commenting\"><a href=\"#Commenting\" class=\"headerlink\" title=\"Commenting\"></a>Commenting</h2><blockquote>\n<p>Though a pain to write, comments are absolutely vital to keeping our code<br>readable. The following rules describe what you should comment and where. But<br>remember: while comments are very important, the best code is<br>self-documenting. Giving sensible names to types and variables is much better<br>than using obscure names that you must then explain through comments.</p>\n<p>When writing your comments, write for your audience: the next contributor who<br>will need to understand your code. Be generous — the next one may be you!</p>\n</blockquote>\n<p>&mdash;<a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\" target=\"_blank\" rel=\"external\">Google C++ Style Guide</a></p>\n<p>Portions of this section borrow heavily from the Google<br><a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Comments\" target=\"_blank\" rel=\"external\">C++</a> and <a href=\"http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Comments\" target=\"_blank\" rel=\"external\">Python</a> style guides.</p>\n<h3 id=\"File-class-level-comments\"><a href=\"#File-class-level-comments\" class=\"headerlink\" title=\"File/class-level comments\"></a>File/class-level comments</h3><p>Every class definition should have an accompanying comment that describes what<br>it is for and how it should be used.</p>\n<p>A file that contains zero classes or more than one class should have a comment<br>at the top describing its contents.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Automatic conversion of one locale to another where it is possible, like</span></div><div class=\"line\"><span class=\"comment\"># American to British English.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Translation</span></span></div><div class=\"line\">  <span class=\"comment\"># Class for converting between text between similar locales.</span></div><div class=\"line\">  <span class=\"comment\"># Right now only conversion between American English -&gt; British, Canadian,</span></div><div class=\"line\">  <span class=\"comment\"># Australian, New Zealand variations is provided.</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimAndProper</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span></div><div class=\"line\">      @converters = &#123; <span class=\"symbol\">:en</span> =&gt; &#123; <span class=\"symbol\">:<span class=\"string\">\"en-AU\"</span></span> =&gt; AmericanToAustralian.new,</div><div class=\"line\">                               <span class=\"symbol\">:<span class=\"string\">\"en-CA\"</span></span> =&gt; AmericanToCanadian.new,</div><div class=\"line\">                               <span class=\"symbol\">:<span class=\"string\">\"en-GB\"</span></span> =&gt; AmericanToBritish.new,</div><div class=\"line\">                               <span class=\"symbol\">:<span class=\"string\">\"en-NZ\"</span></span> =&gt; AmericanToKiwi.new,</div><div class=\"line\">                             &#125; &#125;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Applies transforms to American English that are common to</span></div><div class=\"line\">  <span class=\"comment\"># variants of all other English colonies.</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AmericanToColonial</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># Converts American to British English.</span></div><div class=\"line\">  <span class=\"comment\"># In addition to general Colonial English variations, changes \"apartment\"</span></div><div class=\"line\">  <span class=\"comment\"># to \"flat\".</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AmericanToBritish</span> &lt; AmericanToColonial</span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>All files, including data and config files, should have file-level comments. From <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">```ruby</div><div class=\"line\"># List of American-to-British spelling variants.</div><div class=\"line\">#</div><div class=\"line\"># This list is made with</div><div class=\"line\"># lib/tasks/list_american_to_british_spelling_variants.rake.</div><div class=\"line\">#</div><div class=\"line\"># It contains words with general spelling variation patterns:</div><div class=\"line\">#   [trave]led/lled, [real]ize/ise, [flav]or/our, [cent]er/re, plus</div><div class=\"line\"># and these extras:</div><div class=\"line\">#   learned/learnt, practices/practises, airplane/aeroplane, ...</div><div class=\"line\"></div><div class=\"line\">sectarianizes: sectarianises</div><div class=\"line\">neutralization: neutralisation</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h3 id=\"Function-comments\"><a href=\"#Function-comments\" class=\"headerlink\" title=\"Function comments\"></a>Function comments</h3><p>Every function declaration should have comments immediately preceding it that<br>describe what the function does and how to use it. These comments should be<br>descriptive (“Opens the file”) rather than imperative (“Open the file”); the<br>comment describes the function, it does not tell the function what to do. In<br>general, these comments do not describe how the function performs its task.<br>Instead, that should be left to comments interspersed in the function’s code.</p>\n<p>Every function should mention what the inputs and outputs are, unless it meets<br>all of the following criteria:</p>\n<ul>\n<li>not externally visible</li>\n<li>very short</li>\n<li>obvious</li>\n</ul>\n<p>You may use whatever format you wish. In Ruby, two popular function<br>documentation schemes are <a href=\"http://tomdoc.org/\" target=\"_blank\" rel=\"external\">TomDoc</a> and<br><a href=\"http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\" target=\"_blank\" rel=\"external\">YARD</a>. You can also<br>just write things out concisely:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Returns the fallback locales for the_locale.</span></div><div class=\"line\"><span class=\"comment\"># If opts[:exclude_default] is set, the default locale, which is otherwise</span></div><div class=\"line\"><span class=\"comment\"># always the last one in the returned list, will be excluded.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># For example:</span></div><div class=\"line\"><span class=\"comment\">#   fallbacks_for(:\"pt-BR\")</span></div><div class=\"line\"><span class=\"comment\">#     =&gt; [:\"pt-BR\", :pt, :en]</span></div><div class=\"line\"><span class=\"comment\">#   fallbacks_for(:\"pt-BR\", :exclude_default =&gt; true)</span></div><div class=\"line\"><span class=\"comment\">#     =&gt; [:\"pt-BR\", :pt]</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fallbacks_for</span><span class=\"params\">(the_locale, opts = &#123;&#125;)</span></span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h3 id=\"Block-and-inline-comments\"><a href=\"#Block-and-inline-comments\" class=\"headerlink\" title=\"Block and inline comments\"></a>Block and inline comments</h3><p>The final place to have comments is in tricky parts of the code. If you’re<br>going to have to explain it at the next code review, you should comment it now.<br>Complicated operations get a few lines of comments before the operations<br>commence. Non-obvious ones get comments at the end of the line.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fallbacks_for</span><span class=\"params\">(the_locale, opts = &#123;&#125;)</span></span></div><div class=\"line\">  <span class=\"comment\"># dup() to produce an array that we can mutate.</span></div><div class=\"line\">  ret = @fallbacks[the_locale].dup</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># We make two assumptions here:</span></div><div class=\"line\">  <span class=\"comment\"># 1) There is only one default locale (that is, it has no less-specific</span></div><div class=\"line\">  <span class=\"comment\">#    children).</span></div><div class=\"line\">  <span class=\"comment\"># 1) The default locale is just a language. (Like :en, and not :\"en-US\".)</span></div><div class=\"line\">  <span class=\"keyword\">if</span> opts[<span class=\"symbol\">:exclude_default</span>] &amp;&amp;</div><div class=\"line\">      ret.last == default_locale &amp;&amp;</div><div class=\"line\">      ret.last != language_from_locale(the_locale)</div><div class=\"line\">    ret.pop</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  ret</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>On the other hand, never describe the code. Assume the person reading the code<br>knows the language (though not what you’re trying to do) better than you do.</p>\n<h3 id=\"Punctuation-spelling-and-grammar\"><a href=\"#Punctuation-spelling-and-grammar\" class=\"headerlink\" title=\"Punctuation, spelling and grammar\"></a>Punctuation, spelling and grammar</h3><p>Pay attention to punctuation, spelling, and grammar; it is easier to read<br>well-written comments than badly written ones.</p>\n<p>Comments should be as readable as narrative text, with proper capitalization<br>and punctuation. In many cases, complete sentences are more readable than<br>sentence fragments. Shorter comments, such as comments at the end of a line of<br>code, can sometimes be less formal, but you should be consistent with your<br>style.</p>\n<p>Although it can be frustrating to have a code reviewer point out that you are<br>using a comma when you should be using a semicolon, it is very important that<br>source code maintain a high level of clarity and readability. Proper<br>punctuation, spelling, and grammar help with that goal.</p>\n<h3 id=\"TODO-comments\"><a href=\"#TODO-comments\" class=\"headerlink\" title=\"TODO comments\"></a>TODO comments</h3><p>Use TODO comments for code that is temporary, a short-term solution, or<br>good-enough but not perfect.</p>\n<p>TODOs should include the string TODO in all caps, followed by the full name<br>of the person who can best provide context about the problem referenced by the<br>TODO, in parentheses. A colon is optional. A comment explaining what there is<br>to do is required. The main purpose is to have a consistent TODO format that<br>can be searched to find the person who can provide more details upon request.<br>A TODO is not a commitment that the person referenced will fix the problem.<br>Thus when you create a TODO, it is almost always your name that is given.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"comment\"># TODO(RS): Use proper namespacing for this constant.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"comment\"># TODO(drumm3rz4lyfe): Use proper namespacing for this constant.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"comment\"># TODO(Ringo Starr): Use proper namespacing for this constant.</span></div></pre></td></tr></table></figure>\n<h3 id=\"Commented-out-code\"><a href=\"#Commented-out-code\" class=\"headerlink\" title=\"Commented-out code\"></a>Commented-out code</h3><p>Never leave commented-out code in our codebase.</p>\n<h2 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h2><h3 id=\"Method-definitions\"><a href=\"#Method-definitions\" class=\"headerlink\" title=\"Method definitions\"></a>Method definitions</h3><ul>\n<li><p>Use <code>def</code> with parentheses when there are parameters. Omit the<br>parentheses when the method doesn’t accept any parameters.</p>\n   <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method</span></span></div><div class=\"line\">  <span class=\"comment\"># body omitted</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method_with_parameters</span><span class=\"params\">(arg1, arg2)</span></span></div><div class=\"line\">  <span class=\"comment\"># body omitted</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Do not use default arguments. Use an options hash instead.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">obliterate</span><span class=\"params\">(things, gently = <span class=\"literal\">true</span>, except = [], at = Time.now)</span></span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">obliterate</span><span class=\"params\">(things, options = &#123;&#125;)</span></span></div><div class=\"line\">  default_options = &#123;</div><div class=\"line\">    <span class=\"symbol\">:gently</span> =&gt; <span class=\"literal\">true</span>, <span class=\"comment\"># obliterate with soft-delete</span></div><div class=\"line\">    <span class=\"symbol\">:except</span> =&gt; [], <span class=\"comment\"># skip obliterating these things</span></div><div class=\"line\">    <span class=\"symbol\">:at</span> =&gt; Time.now, <span class=\"comment\"># don't obliterate them until later</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  options.reverse_merge!(default_options)</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Method-calls\"><a href=\"#Method-calls\" class=\"headerlink\" title=\"Method calls\"></a>Method calls</h3><p><strong>Use parentheses</strong> for a method call:</p>\n<ul>\n<li><p>If the method returns a value.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">@current_user = User.find_by_id <span class=\"number\">1964192</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">@current_user = User.find_by_id(<span class=\"number\">1964192</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>If the first argument to the method uses parentheses.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">put! (x + y) % len, value</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">put!((x + y) % len, value)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Never put a space between a method name and the opening parenthesis.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">f (<span class=\"number\">3</span> + <span class=\"number\">2</span>) + <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">f(<span class=\"number\">3</span> + <span class=\"number\">2</span>) + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Omit parentheses</strong> for a method call if the method accepts no arguments.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"literal\">nil</span>?()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"literal\">nil</span>?</div></pre></td></tr></table></figure>\n</li>\n<li><p>If the method doesn’t return a value (or we don’t care about the return), parentheses are optional. (Especially if the arguments overflow to multiple lines, parentheses may add readability.)</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># okay</span></div><div class=\"line\">render(<span class=\"symbol\">:partial</span> =&gt; <span class=\"string\">'foo'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># okay</span></div><div class=\"line\">render <span class=\"symbol\">:partial</span> =&gt; <span class=\"string\">'foo'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>In either case:</p>\n<ul>\n<li><p>If a method accepts an options hash as the last argument, do not use <code>{</code> <code>}</code><br>during invocation.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">get <span class=\"string\">'/v1/reservations'</span>, &#123; <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">54875</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">get <span class=\"string\">'/v1/reservations'</span>, <span class=\"symbol\">:id</span> =&gt; <span class=\"number\">54875</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Conditional-Expressions\"><a href=\"#Conditional-Expressions\" class=\"headerlink\" title=\"Conditional Expressions\"></a>Conditional Expressions</h2><h3 id=\"Conditional-keywords\"><a href=\"#Conditional-keywords\" class=\"headerlink\" title=\"Conditional keywords\"></a>Conditional keywords</h3><ul>\n<li><p>Never use <code>then</code> for multi-line <code>if/unless</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> some_condition <span class=\"keyword\">then</span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> some_condition</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>The <code>and</code>, <code>or</code>, and <code>not</code> keywords are banned. It’s just not worth it. Always use <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> instead.</p>\n</li>\n<li><p>Modifier <code>if/unless</code> usage is okay when the body is simple, the<br>condition is simple, and the whole thing fits on one line. Otherwise,<br>avoid modifier <code>if/unless</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad - this doesn't fit on one line</span></div><div class=\"line\">add_trebuchet_experiments_on_page(request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>]) <span class=\"keyword\">if</span> request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>] &amp;&amp; !request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>].empty?</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># okay</span></div><div class=\"line\"><span class=\"keyword\">if</span> request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>] &amp;&amp;</div><div class=\"line\">     !request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>].empty?</div><div class=\"line\"></div><div class=\"line\">  add_trebuchet_experiments_on_page(request_opts[<span class=\"symbol\">:trebuchet_experiments_on_page</span>])</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad - this is complex and deserves multiple lines and a comment</span></div><div class=\"line\">parts[i] = part.to_i(INTEGER_BASE) <span class=\"keyword\">if</span> !part.<span class=\"literal\">nil</span>? &amp;&amp; [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"keyword\">include</span>?(i)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># okay</span></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">if</span> reconciled?</div></pre></td></tr></table></figure>\n</li>\n<li><p>Never use <code>unless</code> with <code>else</code>. Rewrite these with the positive case first.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">unless success?</div><div class=\"line\">  puts <span class=\"string\">'failure'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  puts <span class=\"string\">'success'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> success?</div><div class=\"line\">  puts <span class=\"string\">'success'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  puts <span class=\"string\">'failure'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid <code>unless</code> with multiple conditions.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">unless foo? &amp;&amp; bar?</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># okay</span></div><div class=\"line\"><span class=\"keyword\">if</span> !(foo? &amp;&amp; bar?)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Don’t use parentheses around the condition of an <code>if/unless/while</code>,<br>unless the condition contains an assignment (see <a href=\"#syntax\">Using the return<br>value of <code>=</code></a> below).</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">10</span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ok</span></div><div class=\"line\"><span class=\"keyword\">if</span> (x = next_value)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Ternary-operator\"><a href=\"#Ternary-operator\" class=\"headerlink\" title=\"Ternary operator\"></a>Ternary operator</h3><ul>\n<li><p>Avoid the ternary operator (<code>?:</code>) except in cases where all expressions are<br>extremely trivial. However, do use the ternary operator(<code>?:</code>) over<br><code>if/then/else/end</code> constructs for single line conditionals.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">result = <span class=\"keyword\">if</span> some_condition <span class=\"keyword\">then</span> something <span class=\"keyword\">else</span> something_else <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">result = some_condition ? something : something_else</div></pre></td></tr></table></figure>\n</li>\n<li><p>Use one expression per branch in a ternary operator. This<br>also means that ternary operators must not be nested. Prefer<br><code>if/else</code> constructs in these cases.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> some_condition</div><div class=\"line\">  nested_condition ? nested_something : nested_something_else</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  something_else</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid multiple conditions in ternaries. Ternaries are best used with single conditions.</p>\n</li>\n<li><p>Avoid multi-line <code>?:</code> (the ternary operator), use <code>if/then/else/end</code> instead.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">some_really_long_condition_that_might_make_you_want_to_split_lines ?</div><div class=\"line\">  something : something_else</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> some_really_long_condition_that_might_make_you_want_to_split_lines</div><div class=\"line\">  something</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  something_else</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><ul>\n<li><p>Never use <code>for</code>, unless you know exactly why. Most of the time iterators<br>should be used instead. <code>for</code> is implemented in terms of <code>each</code> (so<br>you’re adding a level of indirection), but with a twist - <code>for</code><br>doesn’t introduce a new scope (unlike <code>each</code>) and variables defined<br>in its block will be visible outside it.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> arr <span class=\"keyword\">do</span></div><div class=\"line\">  puts elem</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">arr.each &#123; <span class=\"params\">|elem|</span> puts elem &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Prefer <code>{...}</code> over <code>do...end</code> for single-line blocks.  Avoid using<br><code>{...}</code> for multi-line blocks (multiline chaining is always<br>ugly). Always use <code>do...end</code> for “control flow” and “method<br>definitions” (e.g. in Rakefiles and certain DSLs).  Avoid <code>do...end</code><br>when chaining.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">names = [<span class=\"string\">\"Bozhidar\"</span>, <span class=\"string\">\"Steve\"</span>, <span class=\"string\">\"Sarah\"</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">names.each &#123; <span class=\"params\">|name|</span> puts name &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">names.each <span class=\"keyword\">do</span> <span class=\"params\">|name|</span> puts name <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">names.select &#123; <span class=\"params\">|name|</span> name.start_with?(<span class=\"string\">\"S\"</span>) &#125;.map &#123; <span class=\"params\">|name|</span> name.upcase &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">names.select <span class=\"keyword\">do</span> <span class=\"params\">|name|</span></div><div class=\"line\">  name.start_with?(<span class=\"string\">\"S\"</span>)</div><div class=\"line\"><span class=\"keyword\">end</span>.map &#123; <span class=\"params\">|name|</span> name.upcase &#125;</div></pre></td></tr></table></figure>\n<p>  Some will argue that multiline chaining would look okay with the use of<br>  <code>{...}</code>, but they should ask themselves if this code is really readable and<br>  whether the block’s content can be extracted into nifty methods.</p>\n</li>\n<li><p>Avoid <code>return</code> where not required.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method</span><span class=\"params\">(some_arr)</span></span></div><div class=\"line\">  <span class=\"keyword\">return</span> some_arr.size</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method</span><span class=\"params\">(some_arr)</span></span></div><div class=\"line\">  some_arr.size</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Using the return value of <code>=</code> (an assignment) is ok, but surround the<br>assignment with parenthesis.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># good - shows intended use of assignment</span></div><div class=\"line\"><span class=\"keyword\">if</span> (v = array.grep(<span class=\"regexp\">/foo/</span>))</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">if</span> v = array.grep(<span class=\"regexp\">/foo/</span>)</div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># also good - shows intended use of assignment and has correct precedence</span></div><div class=\"line\"><span class=\"keyword\">if</span> (v = next_value) == <span class=\"string\">\"hello\"</span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>||=</code> freely to initialize variables.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># set name to Bozhidar, only if it's nil or false</span></div><div class=\"line\">name <span class=\"params\">||</span>= <span class=\"string\">'Bozhidar'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Don’t use <code>||=</code> to initialize boolean variables. (Consider what<br>would happen if the current value happened to be <code>false</code>.)</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad - would set enabled to true even if it was false</span></div><div class=\"line\">enabled <span class=\"params\">||</span>= <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">enabled = <span class=\"literal\">true</span> <span class=\"keyword\">if</span> enabled.<span class=\"literal\">nil</span>?</div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid using Perl-style special variables (like <code>$0-9</code>, <code>$</code>,<br>etc. ). They are quite cryptic and their use in anything but<br>one-liner scripts is discouraged. Prefer long form versions such as<br><code>$PROGRAM_NAME</code>.</p>\n</li>\n<li><p>Use <code>_</code> for unused block arguments.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">result = hash.map &#123; <span class=\"params\">|k, v|</span> v + <span class=\"number\">1</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">result = hash.map &#123; <span class=\"params\">|_, v|</span> v + <span class=\"number\">1</span> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>When a method block takes only one argument, and the body consists solely of<br>reading an attribute or calling one method with no arguments, use the <code>&amp;:</code><br>shorthand.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">bluths.map &#123; <span class=\"params\">|bluth|</span> bluth.occupation &#125;</div><div class=\"line\">bluths.select &#123; <span class=\"params\">|bluth|</span> bluth.blue_self? &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">bluths.map(&amp;<span class=\"symbol\">:occupation</span>)</div><div class=\"line\">bluths.select(&amp;<span class=\"symbol\">:blue_self?</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Prefer <code>some_method</code> over <code>self.some_method</code> when calling a method on the<br>current instance.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end_date</span></span></div><div class=\"line\">  <span class=\"keyword\">self</span>.start_date + <span class=\"keyword\">self</span>.nights</div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">end_date</span></span></div><div class=\"line\">  start_date + nights</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<p>In the following three common cases, <code>self.</code> is required by the language<br>and is good to use:</p>\n<ol>\n<li>When defining a class method: <code>def self.some_method</code>.</li>\n<li>The <em>left hand side</em> when calling an assignment method, including assigning<br>an attribute when <code>self</code> is an ActiveRecord model: <code>self.guest = user</code>.</li>\n<li>Referencing the current instance’s class: <code>self.class</code>.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Naming\"><a href=\"#Naming\" class=\"headerlink\" title=\"Naming\"></a>Naming</h2><ul>\n<li><p>Use <code>snake_case</code> for methods and variables.</p>\n</li>\n<li><p>Use <code>CamelCase</code> for classes and modules.  (Keep acronyms like HTTP,<br>RFC, XML uppercase.)</p>\n</li>\n<li><p>Use <code>SCREAMING_SNAKE_CASE</code> for other constants.</p>\n</li>\n<li><p>The names of predicate methods (methods that return a boolean value)<br>should end in a question mark. (i.e. <code>Array#empty?</code>).</p>\n</li>\n<li><p>The names of potentially “dangerous” methods (i.e. methods that modify <code>self</code><br>or the arguments, <code>exit!</code>, etc.) should end with an exclamation mark. Bang<br>methods should only exist if a non-bang method exists.<br>(<a href=\"http://dablog.rubypal.com/2007/8/15/bang-methods-or-danger-will-rubyist\" target=\"_blank\" rel=\"external\">More on this</a>.)</p>\n</li>\n<li><p>Name throwaway variables <code>_</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">payment, <span class=\"number\">_</span> = Payment.complete_paypal_payment!(params[<span class=\"symbol\">:token</span>],</div><div class=\"line\">                                              native_currency,</div><div class=\"line\">                                              created_at)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><ul>\n<li><p>Avoid the usage of class (<code>@@</code>) variables due to their “nasty” behavior<br>in inheritance.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span></div><div class=\"line\">  @@class_var = <span class=\"string\">'parent'</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">print_class_var</span></span></div><div class=\"line\">    puts @@class_var</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> &lt; Parent</span></div><div class=\"line\">  @@class_var = <span class=\"string\">'child'</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">Parent.print_class_var <span class=\"comment\"># =&gt; will print \"child\"</span></div></pre></td></tr></table></figure>\n<p>  As you can see all the classes in a class hierarchy actually share one<br>  class variable. Class instance variables should usually be preferred<br>  over class variables.</p>\n</li>\n<li><p>Use <code>def self.method</code> to define singleton methods. This makes the methods<br>more resistant to refactoring changes.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span></div><div class=\"line\">  <span class=\"comment\"># bad</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">TestClass</span>.<span class=\"title\">some_method</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># good</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">some_other_method</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid <code>class &lt;&lt; self</code> except when necessary, e.g. single accessors and aliased<br>attributes.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span></div><div class=\"line\">  <span class=\"comment\"># bad</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first_method</span></span></div><div class=\"line\">      ...</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">second_method_etc</span></span></div><div class=\"line\">      ...</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># good</span></div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> &lt;&lt; self</span></div><div class=\"line\">    <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:per_page</span></div><div class=\"line\">    alias_method <span class=\"symbol\">:nwo</span>, <span class=\"symbol\">:find_by_name_with_owner</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">first_method</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">self</span>.<span class=\"title\">second_method_etc</span></span></div><div class=\"line\">    ...</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Indent the <code>public</code>, <code>protected</code>, and <code>private</code> methods as much the<br>method definitions they apply to. Leave one blank line above and below them.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span></span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">public_method</span></span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">  private</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">private_method</span></span></div><div class=\"line\">    <span class=\"comment\"># ...</span></div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Exceptions\"><a href=\"#Exceptions\" class=\"headerlink\" title=\"Exceptions\"></a>Exceptions</h2><ul>\n<li><p>Don’t use exceptions for flow of control.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  n / d</div><div class=\"line\"><span class=\"keyword\">rescue</span> ZeroDivisionError</div><div class=\"line\">  puts <span class=\"string\">\"Cannot divide by 0!\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> d.zero?</div><div class=\"line\">  puts <span class=\"string\">\"Cannot divide by 0!\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">  n / d</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid rescuing the <code>Exception</code> class.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  <span class=\"comment\"># an exception occurs here</span></div><div class=\"line\"><span class=\"keyword\">rescue</span> Exception</div><div class=\"line\">  <span class=\"comment\"># exception handling</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  <span class=\"comment\"># an exception occurs here</span></div><div class=\"line\"><span class=\"keyword\">rescue</span> StandardError</div><div class=\"line\">  <span class=\"comment\"># exception handling</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># acceptable</span></div><div class=\"line\"><span class=\"keyword\">begin</span></div><div class=\"line\">  <span class=\"comment\"># an exception occurs here</span></div><div class=\"line\"><span class=\"keyword\">rescue</span></div><div class=\"line\">  <span class=\"comment\"># exception handling</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h2><ul>\n<li><p>Use <code>Set</code> instead of <code>Array</code> when dealing with unique elements. <code>Set</code><br>implements a collection of unordered values with no duplicates. This<br>is a hybrid of <code>Array</code>‘s intuitive inter-operation facilities and<br><code>Hash</code>‘s fast lookup.</p>\n</li>\n<li><p>Use symbols instead of strings as hash keys.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">hash = &#123; <span class=\"string\">'one'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'two'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'three'</span> =&gt; <span class=\"number\">3</span> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">hash = &#123; <span class=\"symbol\">:one</span> =&gt; <span class=\"number\">1</span>, <span class=\"symbol\">:two</span> =&gt; <span class=\"number\">2</span>, <span class=\"symbol\">:three</span> =&gt; <span class=\"number\">3</span> &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Use multi-line hashes when it makes the code more readable, and use<br>trailing commas to ensure that parameter changes don’t cause<br>extraneous diff lines when the logic has not otherwise changed.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">hash = &#123;</div><div class=\"line\">  <span class=\"symbol\">:protocol</span> =&gt; <span class=\"string\">'https'</span>,</div><div class=\"line\">  <span class=\"symbol\">:only_path</span> =&gt; <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"symbol\">:controller</span> =&gt; <span class=\"symbol\">:users</span>,</div><div class=\"line\">  <span class=\"symbol\">:action</span> =&gt; <span class=\"symbol\">:set_password</span>,</div><div class=\"line\">  <span class=\"symbol\">:redirect</span> =&gt; @redirect_url,</div><div class=\"line\">  <span class=\"symbol\">:secret</span> =&gt; @secret,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Use a trailing comma in an <code>Array</code> that spans more than 1 line</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">array = [</div><div class=\"line\">  <span class=\"string\">\"car\"</span>,</div><div class=\"line\">  <span class=\"string\">\"bear\"</span>,</div><div class=\"line\">  <span class=\"string\">\"plane\"</span>,</div><div class=\"line\">  <span class=\"string\">\"zoo\"</span>,</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><ul>\n<li><p>Prefer string interpolation instead of string concatenation:</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">email_with_name = user.name + <span class=\"string\">' &lt;'</span> + user.email + <span class=\"string\">'&gt;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">email_with_name = <span class=\"string\">\"<span class=\"subst\">#&#123;user.name&#125;</span> &lt;<span class=\"subst\">#&#123;user.email&#125;</span>&gt;\"</span></div></pre></td></tr></table></figure>\n<p>  Furthermore, keep in mind Ruby 1.9-style interpolation. Let’s say you are<br>  composing cache keys like this:</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE_KEY = <span class=\"string\">'_store'</span></div><div class=\"line\"></div><div class=\"line\">cache.write(@user.id + CACHE_KEY)</div></pre></td></tr></table></figure>\n<p>  Prefer string interpolation instead of string concatentation:</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE_KEY = <span class=\"string\">'%d_store'</span></div><div class=\"line\"></div><div class=\"line\">cache.write(CACHE_KEY % @user.id)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid using <code>String#+</code> when you need to construct large data chunks.<br>Instead, use <code>String#&lt;&lt;</code>. Concatenation mutates the string instance in-place<br>and is always faster than <code>String#+</code>, which creates a bunch of new string objects.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># good and also fast</span></div><div class=\"line\">html = <span class=\"string\">''</span></div><div class=\"line\">html &lt;&lt; <span class=\"string\">'&lt;h1&gt;Page title&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\">paragraphs.each <span class=\"keyword\">do</span> <span class=\"params\">|paragraph|</span></div><div class=\"line\">  html &lt;&lt; <span class=\"string\">\"&lt;p&gt;<span class=\"subst\">#&#123;paragraph&#125;</span>&lt;/p&gt;\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Regular-Expressions\"><a href=\"#Regular-Expressions\" class=\"headerlink\" title=\"Regular Expressions\"></a>Regular Expressions</h2><ul>\n<li><p>Avoid using <code>$1-9</code> as it can be hard to track what they contain. Named groups<br>can be used instead.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">/(regexp)/ =~ string</div><div class=\"line\">...</div><div class=\"line\">process $1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">/(?&lt;meaningful_var&gt;regexp)/ =~ string</div><div class=\"line\">...</div><div class=\"line\">process meaningful_var</div></pre></td></tr></table></figure>\n</li>\n<li><p>Be careful with <code>^</code> and <code>$</code> as they match start/end of line, not string<br>endings.  If you want to match the whole string use: <code>\\A</code> and <code>\\z</code>.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">string = <span class=\"string\">\"some injection\\nusername\"</span></div><div class=\"line\">string[<span class=\"regexp\">/^username$/</span>]   <span class=\"comment\"># matches</span></div><div class=\"line\">string[<span class=\"regexp\">/\\Ausername\\z/</span>] <span class=\"comment\"># don't match</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>x</code> modifier for complex regexps. This makes them more readable and you<br>can add some useful comments. Just be careful as spaces are ignored.</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">regexp = %r&#123;</div><div class=\"line\">  start         # some text</div><div class=\"line\">  \\s            # white space char</div><div class=\"line\">  (group)       # first group</div><div class=\"line\">  (?:alt1|alt2) # some alternation</div><div class=\"line\">  end</div><div class=\"line\">&#125;x</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Percent-Literals\"><a href=\"#Percent-Literals\" class=\"headerlink\" title=\"Percent Literals\"></a>Percent Literals</h2><ul>\n<li><p>Use <code>%w</code> freely.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">STATES = <span class=\"string\">%w(draft open closed)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>%()</code> for single-line strings which require both interpolation<br>and embedded double-quotes. For multi-line strings, prefer heredocs.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad - no interpolation needed</span></div><div class=\"line\"><span class=\"string\">%(&lt;div class=\"text\"&gt;Some text&lt;/div&gt;)</span></div><div class=\"line\"><span class=\"comment\"># should be '&lt;div class=\"text\"&gt;Some text&lt;/div&gt;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad - no double-quotes</span></div><div class=\"line\"><span class=\"string\">%(This is <span class=\"subst\">#&#123;quality&#125;</span> style)</span></div><div class=\"line\"><span class=\"comment\"># should be \"This is #&#123;quality&#125; style\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># bad - multiple lines</span></div><div class=\"line\"><span class=\"string\">%(&lt;div&gt;\\n&lt;span class=\"big\"&gt;<span class=\"subst\">#&#123;exclamation&#125;</span>&lt;/span&gt;\\n&lt;/div&gt;)</span></div><div class=\"line\"><span class=\"comment\"># should be a heredoc.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good - requires interpolation, has quotes, single line</span></div><div class=\"line\"><span class=\"string\">%(&lt;tr&gt;&lt;td class=\"name\"&gt;<span class=\"subst\">#&#123;name&#125;</span>&lt;/td&gt;)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>%r</code> only for regular expressions matching <em>more than</em> one ‘/‘ character.</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># bad</div><div class=\"line\">%r(\\s+)</div><div class=\"line\"></div><div class=\"line\"># still bad</div><div class=\"line\">%r(^/(.*)$)</div><div class=\"line\"># should be /^\\/(.*)$/</div><div class=\"line\"></div><div class=\"line\"># good</div><div class=\"line\">%r(^/blog/2011/(.*)$)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Rails\"><a href=\"#Rails\" class=\"headerlink\" title=\"Rails\"></a>Rails</h2><ul>\n<li><p>When immediately returning after calling <code>render</code> or <code>redirect_to</code>, put <code>return</code> on the next line,<br>not the same line.</p>\n  <figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># bad</span></div><div class=\"line\">render <span class=\"symbol\">:text</span> =&gt; <span class=\"string\">'Howdy'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\">render <span class=\"symbol\">:text</span> =&gt; <span class=\"string\">'Howdy'</span></div><div class=\"line\"><span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># still bad</span></div><div class=\"line\">render <span class=\"symbol\">:text</span> =&gt; <span class=\"string\">'Howdy'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> foo.present?</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># good</span></div><div class=\"line\"><span class=\"keyword\">if</span> foo.present?</div><div class=\"line\">  render <span class=\"symbol\">:text</span> =&gt; <span class=\"string\">'Howdy'</span></div><div class=\"line\">  <span class=\"keyword\">return</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Be-Consistent\"><a href=\"#Be-Consistent\" class=\"headerlink\" title=\"Be Consistent\"></a>Be Consistent</h2><blockquote>\n<p>If you’re editing code, take a few minutes to look at the code around you and<br>determine its style. If they use spaces around all their arithmetic<br>operators, you should too. If their comments have little boxes of hash marks<br>around them, make your comments have little boxes of hash marks around them<br>too.</p>\n<p>The point of having style guidelines is to have a common vocabulary of coding<br>so people can concentrate on what you’re saying rather than on how you’re<br>saying it. We present global style rules here so people know the vocabulary,<br>but local style is also important. If code you add to a file looks<br>drastically different from the existing code around it, it throws readers out<br>of their rhythm when they go to read it. Avoid this.</p>\n</blockquote>\n<p>&mdash;<a href=\"http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\" target=\"_blank\" rel=\"external\">Google C++ Style Guide</a></p>\n","categories":[],"tags":[]},{"title":"RubyNotes","url":"http://gyzclw.github.io/2016/01/07/RubyNotes/","content":"<h1 id=\"Ruby-备忘录\"><a href=\"#Ruby-备忘录\" class=\"headerlink\" title=\"Ruby 备忘录\"></a>Ruby 备忘录</h1><blockquote>\n<p>gem源切换：nrm use</p>\n</blockquote>\n<p>##:: </p>\n<blockquote>\n<p>ActiveRecord::Base Base 是 ActiveRecord module 的一个内部类 </p>\n</blockquote>\n<h2 id=\"Ruby-Varable\"><a href=\"#Ruby-Varable\" class=\"headerlink\" title=\"Ruby Varable\"></a>Ruby Varable</h2><p>一般小写字母、下划线开头：变量（Variable）。</p>\n<ul>\n<li>$开头：全局变量（Global variable）。</li>\n<li>@开头：实例变量（Instance variable）。</li>\n<li>@@开头：类变量（Class variable）类变量被共享在整个继承链中</li>\n<li>大写字母开头：常数（Constant）。</li>\n</ul>\n<h2 id=\"Custome-Objects-in-Range\"><a href=\"#Custome-Objects-in-Range\" class=\"headerlink\" title=\"Custome Objects in Range\"></a>Custome Objects in Range</h2><blockquote>\n<p>要构造一个Range 对象需要 include Comparable 模块，异常处理：实现一个succ方法返回类的新的对象;还要实现一个&lt;=&gt;方法  </p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Xs</span>                <span class=\"comment\"># represent a string of 'x's</span></span></div><div class=\"line\">  <span class=\"keyword\">include</span> Comparable</div><div class=\"line\">  attr <span class=\"symbol\">:length</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span><span class=\"params\">(n)</span></span></div><div class=\"line\">    @length = n</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">succ</span></span></div><div class=\"line\">    Xs.new(@length + <span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">&lt;=&gt;</span><span class=\"params\">(other)</span></span></div><div class=\"line\">    @length &lt;=&gt; other.length</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_s</span></span></div><div class=\"line\">    sprinf <span class=\"string\">\"%2d <span class=\"subst\">#&#123;inspect&#125;</span>\"</span>,@length</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inspect</span></span></div><div class=\"line\">    <span class=\"string\">'x'</span> *@length</div><div class=\"line\">  <span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"Manning-Rails\"><a href=\"#Manning-Rails\" class=\"headerlink\" title=\"Manning Rails\"></a>Manning Rails</h2><h3 id=\"Database-configuration\"><a href=\"#Database-configuration\" class=\"headerlink\" title=\"Database configuration\"></a>Database configuration</h3><p>rails 默认使用SQlite3 作为数据库，当然也支持MySQL 和PostgreSQL 数据库。<br>如果要更改数据库，可以在conifg/database.yml 中修改<br>例如：使用sqlite3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">development:</div><div class=\"line\">  adapter: sqlite3</div><div class=\"line\">  database: db/development.sqlite3</div><div class=\"line\">  pool: 5</div><div class=\"line\">  timeout: 5000</div></pre></td></tr></table></figure></p>\n<p>使用PostgreSQL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">development:</div><div class=\"line\">  adapter: postgresql</div><div class=\"line\">  database: ticketee_development</div><div class=\"line\">  username: root</div><div class=\"line\">  password: t0ps3cr3t</div></pre></td></tr></table></figure></p>\n<p>PostgreSQL 数据库比SQlite更快</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">development:</div><div class=\"line\">  adapter: mysql2</div><div class=\"line\">  database: ticketee_development</div><div class=\"line\">  username: root</div><div class=\"line\">  password: t0ps3cr3t</div><div class=\"line\">  encoding: utf-8</div></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"Ruby元编程读书笔记1","url":"http://gyzclw.github.io/2015/12/14/Ruby元编程读书笔记1/","content":"<h2 id=\"第一章-元这个字眼\"><a href=\"#第一章-元这个字眼\" class=\"headerlink\" title=\"第一章 元这个字眼\"></a>第一章 元这个字眼</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p> 元编程就是编写能写代码的代码。</p>\n<p> Ruby 具有<em>自省</em>（introspection）。</p>\n<blockquote>\n<p>类和对象是Ruby 世界的一等公民，可以通过询问它有关自身问题。</p>\n</blockquote>\n<h3 id=\"Active-Record-类库\"><a href=\"#Active-Record-类库\" class=\"headerlink\" title=\"Active Record 类库\"></a>Active Record 类库</h3><blockquote>\n<p>可以将对象映射到数据库表中。</p>\n</blockquote>\n<h2 id=\"第二章-类的真相\"><a href=\"#第二章-类的真相\" class=\"headerlink\" title=\"第二章 类的真相\"></a>第二章 类的真相</h2><h3 id=\"猴子补丁\"><a href=\"#猴子补丁\" class=\"headerlink\" title=\"猴子补丁\"></a>猴子补丁</h3><blockquote>\n<p> 为某个类添加新功能</p>\n</blockquote>\n<h3 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h3><p>通过 Object＃instance_variables方法查看</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span></span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_method</span></span></div><div class=\"line\">\t\t@v =q</div><div class=\"line\">\t<span class=\"keyword\">end</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>ruby 实例变量的名字和值理解为 哈希表中的键和值，每一个对象的键／值都可能不相同。</p>\n</blockquote>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>通过 Object#mothods方法查看</p>\n<blockquote>\n<p>可以通过Array#grep 方法来筛选</p>\n</blockquote>\n<h3 id=\"类的真相\"><a href=\"#类的真相\" class=\"headerlink\" title=\"类的真相\"></a>类的真相</h3><p>类本身也是对象。</p>\n<ul>\n<li>Ruby允许你在运行时修改类的信息。</li>\n<li>Ruby的类继承自他的父类。（superclass方法）</li>\n<li>BasicObject是Ruby对象体系中的根节点。</li>\n</ul>\n<h3 id=\"Modlule\"><a href=\"#Modlule\" class=\"headerlink\" title=\"Modlule\"></a>Modlule</h3><p> Class的父类是Module。<br> 类是带有三个方法（new、allocate、superclass）的增强模块。</p>\n","categories":[],"tags":[]},{"title":"RailsNote","url":"http://gyzclw.github.io/2015/12/11/RailsNote/","content":"<h1 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h1><h2 id=\"befor-action-方法\"><a href=\"#befor-action-方法\" class=\"headerlink\" title=\"befor_action 方法\"></a>befor_action 方法</h2><blockquote>\n<p>Append a callback before actions. See #_insert_callbacks for parameter details.</p>\n</blockquote>\n<p>在events_controller.rb上方新增</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_action <span class=\"symbol\">:method_name</span>, <span class=\"symbol\">:only</span> =&gt; [ <span class=\"symbol\">:show</span>, <span class=\"symbol\">:edit</span>, <span class=\"symbol\">:update</span>, <span class=\"symbol\">:destroy</span>]</div></pre></td></tr></table></figure>\n<p>在 private下方</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method_name</span></span></div><div class=\"line\">\t&lt;-内容-&gt;</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n<h2 id=\"use-pry-to-rails-console\"><a href=\"#use-pry-to-rails-console\" class=\"headerlink\" title=\"use pry to rails console\"></a>use pry to rails console</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem <span class=\"string\">'pry-rails'</span>, <span class=\"symbol\">:group</span> =&gt; <span class=\"symbol\">:development</span></div></pre></td></tr></table></figure>\n<h2 id=\"flash-vs-flash-now\"><a href=\"#flash-vs-flash-now\" class=\"headerlink\" title=\"flash vs. flash.now\"></a>flash vs. flash.now</h2><ul>\n<li>flash 方法设置flash message , 显示数据在指定页面，需要redirect_to 指定页面</li>\n<li>flash_now 可替代flash ,在当前页面显示flash message <h2 id=\"ActiveModel-Errors-方法\"><a href=\"#ActiveModel-Errors-方法\" class=\"headerlink\" title=\"ActiveModel::Errors 方法\"></a>ActiveModel::Errors 方法</h2>ActiveModel::Errors provides some nice helper methods for working with validation errors that you can use in your views to display the errors to the user.</li>\n</ul>\n<h2 id=\"partials-的命名\"><a href=\"#partials-的命名\" class=\"headerlink\" title=\"partials 的命名\"></a>partials 的命名</h2><p>partials的命名必须使用_开头，例如_form而不是form</p>\n","categories":[],"tags":[]},{"title":"Android 使用 LruCache 缓存图片","url":"http://gyzclw.github.io/2015/12/10/Android 使用 LruCache 缓存图片/","content":"<h2 id=\"Android-使用-LruCache-缓存图片\"><a href=\"#Android-使用-LruCache-缓存图片\" class=\"headerlink\" title=\"Android 使用 LruCache 缓存图片\"></a>Android 使用 LruCache 缓存图片</h2><p>在你应用程序的 UI 界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用 ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致 OOM。为了保证内存的使用始终维持在一个合理的范围，通常会把被移除屏幕的图片进行回收处理。此时垃圾回收器也会认为你不再持有这些图片的引用，从而对这些图片进行 GC 操作。用这种思路来解决问题是非常好的，可是为了能让程序快速运行，在界面上迅速地加载图片，你又必须要考虑到某些图片被回收之后，用户又将它重新滑入屏幕这种情况。这时重新去加载一遍刚刚加载过的图片无疑是性能的瓶颈，你需要想办法去避免这个情况的发生。</p>\n<p>这个时候，使用内存缓存技术可以很好的解决这个问题，它可以让组件快速地重新加载和处理图片。下面我们就来看一看如何使用内存缓存技术来对图片进行缓存，从而让你的应用程序在加载很多图片的时候可以提高响应速度和流畅性。内存缓存技术对那些大量占用应用程序宝贵内存的图片提供了快速访问的方法。其中最核心的类是 LruCache ( 此类在 android-support-v4 的包中提供 ) 。这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在 LinkedHashMap 中，并且把最近最少使用的对象在缓存值达到预设定值之前从内存中移除。</p>\n<a id=\"more\"></a>\n<p>在过去，我们经常会使用一种非常流行的内存缓存技术的实现，即软引用或弱引用 (SoftReference or WeakReference)。但是现在已经不再推荐使用这种方式了，因为从 Android 2.3 (API Level 9)开始，垃圾回收器会更倾向于回收持有软引用或弱引用的对象，这让软引用和弱引用变得不再可靠。另外，Android 3.0 (API Level 11)中，图片的数据会存储在本地的内存当中，因而无法用一种可预见的方式将其释放，这就有潜在的风险造成应用程序的内存溢出并崩溃。为了能够选择一个合适的缓存大小给 LruCache, 有以下多个因素应该放入考虑范围内，例如：</p>\n<ol>\n<li>你的设备可以为每个应用程序分配多大的内存？</li>\n<li>设备屏幕上一次最多能显示多少张图片？</li>\n<li>有多少图片需要进行预加载，因为有可能很快也会显示在屏幕上？</li>\n<li>你的设备的屏幕大小和分辨率分别是多少？一个超高分辨率的设备（例如 Galaxy Nexus）比起一个较低分辨率的设备（例如 Nexus S），在持有相同数量图片的时候，需要更大的缓存空间。</li>\n<li>图片的尺寸和大小，还有每张图片会占据多少内存空间？</li>\n<li>图片被访问的频率有多高？会不会有一些图片的访问频率比其它图片要高？如果有的话，你也许应该让一些图片常驻在内存当中，或者使用多个 LruCache 对象来区分不同组的图片。</li>\n<li>你能维持好数量和质量之间的平衡吗？有些时候，存储多个低像素的图片，而在后台去开线程加载高像素的图片会更加的有效。</li>\n</ol>\n<p>并没有一个指定的缓存大小可以满足所有的应用程序，这是由你决定的。你应该去分析程序内存的使用情况，然后制定出一个合适的解决方案。一个太小的缓存空间，有可能造成图片频繁地被释放和重新加载，这并没有好处。而一个太大的缓存空间，则有可能还是会引起 java.lang.OutOfMemory 的异常。</p>\n<p>下面是一个使用 LruCache 来缓存图片的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> LruCache&lt;String, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。</span></div><div class=\"line\">    <span class=\"comment\">// LruCache通过构造函数传入缓存值，以KB为单位。</span></div><div class=\"line\">    <span class=\"keyword\">int</span> maxMemory = (<span class=\"keyword\">int</span>) (Runtime.getRuntime().maxMemory() / <span class=\"number\">1024</span>);</div><div class=\"line\">    <span class=\"comment\">// 使用最大可用内存值的1/8作为缓存的大小。</span></div><div class=\"line\">    <span class=\"keyword\">int</span> cacheSize = maxMemory / <span class=\"number\">8</span>;</div><div class=\"line\">    mMemoryCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 重写此方法来衡量每张图片的大小，默认返回图片数量。</span></div><div class=\"line\">            <span class=\"keyword\">return</span> bitmap.getByteCount() / <span class=\"number\">1024</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBitmapToMemoryCache</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getBitmapFromMemCache(key) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        mMemoryCache.put(key, bitmap);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getBitmapFromMemCache</span><span class=\"params\">(String key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mMemoryCache.get(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用 4 张 800x480 分辨率的图片来填充，则大概会占用 1.5 兆的空间 (800<em>480</em>4)。因此，这个缓存大小可以存储 2.5 页的图片。当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新 ImageView ，否则开启一个后台线程来加载这张图片。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBitmap</span><span class=\"params\">(<span class=\"keyword\">int</span> resId, ImageView imageView)</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">final</span> String imageKey = String.valueOf(resId); </div><div class=\"line\">    <span class=\"keyword\">final</span> Bitmap bitmap = getBitmapFromMemCache(imageKey); </div><div class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123; </div><div class=\"line\">        imageView.setImageBitmap(bitmap); </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">        imageView.setImageResource(R.drawable.image_placeholder); </div><div class=\"line\">        BitmapWorkerTask task = <span class=\"keyword\">new</span> BitmapWorkerTask(imageView); </div><div class=\"line\">        task.execute(resId); </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div><div class=\"line\">BitmapWorkerTask 还要把新加载的图片的键值对放到缓存中。</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapWorkerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Integer</span>, <span class=\"title\">Void</span>, <span class=\"title\">Bitmap</span>&gt; </span>&#123; </div><div class=\"line\">    <span class=\"comment\">// 在后台加载图片。 protected Bitmap doInBackground(Integer... params) &#123; </span></div><div class=\"line\">        <span class=\"keyword\">final</span> Bitmap bitmap = decodeSampledBitmapFromResource( </div><div class=\"line\">                getResources(), params[<span class=\"number\">0</span>], <span class=\"number\">100</span>, <span class=\"number\">100</span>); </div><div class=\"line\">        addBitmapToMemoryCache(String.valueOf(params[<span class=\"number\">0</span>]), bitmap); </div><div class=\"line\">        <span class=\"keyword\">return</span> bitmap; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"ssh——key 使用","url":"http://gyzclw.github.io/2015/12/10/ssh——key-使用/","content":"<h2 id=\"ssh-连接服务器\"><a href=\"#ssh-连接服务器\" class=\"headerlink\" title=\"ssh 连接服务器\"></a>ssh 连接服务器</h2><p>使用该命令将密钥上传服务器</p>\n<blockquote>\n<p>cat ~/.ssh/id_rsa.pub | ssh root@45.55.1.163 “mkdir -p ~/.ssh &amp;&amp; cat   ~/.ssh/authorized_keys”</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"Android 开发遇到的problem","url":"http://gyzclw.github.io/2015/12/09/Android-开发遇到的problem/","content":"<blockquote>\n<p>1、Error:(23, 13) Failed to resolve: com.jakewharton:butterknife:7.0.1</p>\n</blockquote>\n<p><img src=\"http://7xp12c.com1.z0.glb.clouddn.com/static/images/2015120132.png\" alt=\"\"></p>\n<p><img src=\"http://7xp12c.com1.z0.glb.clouddn.com/static/images/2015120134.png\" alt=\"\"></p>\n<h2 id=\"android-use-retrolambda\"><a href=\"#android-use-retrolambda\" class=\"headerlink\" title=\"android use retrolambda\"></a>android use retrolambda</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'me.tatarka.retrolambda'</span></div><div class=\"line\"></div><div class=\"line\">buildscript &#123;</div><div class=\"line\"><span class=\"comment\">//开始加入</span></div><div class=\"line\"> dependencies &#123;</div><div class=\"line\">  classpath <span class=\"string\">'me.tatarka:gradle-retrolambda:3.1.0'</span></div><div class=\"line\">   &#125;</div><div class=\"line\">    <span class=\"comment\">//结束插入</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">compileOptions &#123;</div><div class=\"line\">      sourceCompatibility JavaVersion.VERSION_1_8</div><div class=\"line\">            targetCompatibility JavaVersion.VERSION_1_8</div><div class=\"line\">\t        &#125;</div></pre></td></tr></table></figure>\n<p>android 适配技巧<br>在设置不同屏幕比例的values文件来适配不同屏幕分辨率的手机。在dimen中设置文件大小</p>\n","categories":["android"],"tags":["android"]},{"title":"android开发者品质","url":"http://gyzclw.github.io/2015/12/09/android开发者品质/","content":"<ul>\n<li>深读SDK文档</li>\n<li>深读SDK的APIDemo和Samples</li>\n<li>掌握GIT开源代码，多了解Android开源项目，学习别人的手法写程序</li>\n</ul>\n<p><a href=\"http://7xp12c.com1.z0.glb.clouddn.com/static/images/avatar.jpg\" target=\"_blank\" rel=\"external\">http://7xp12c.com1.z0.glb.clouddn.com/static/images/avatar.jpg</a></p>\n","categories":[],"tags":[]},{"title":"angularjs中使用 requirejs 遇到的问题","url":"http://gyzclw.github.io/2015/12/09/requirejs 和 angularjs/","content":"<h2 id=\"angularjs中使用-requirejs-遇到的问题\"><a href=\"#angularjs中使用-requirejs-遇到的问题\" class=\"headerlink\" title=\"angularjs中使用 requirejs 遇到的问题\"></a>angularjs中使用 requirejs 遇到的问题</h2><h3 id=\"load-angular-carousel-into-my-project\"><a href=\"#load-angular-carousel-into-my-project\" class=\"headerlink\" title=\"load angular-carousel into my project\"></a>load angular-carousel into my project</h3><ul>\n<li><p>在 main.js 中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</div><div class=\"line\">    <span class=\"attr\">paths</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">ionic</span>: <span class=\"string\">'../lib/ionic/js/ionic.bundle'</span>,</div><div class=\"line\">        <span class=\"string\">'ngAnimate'</span>: <span class=\"string\">'../lib/angular-animate/angular-animate'</span>,</div><div class=\"line\">        <span class=\"string\">'ngAria'</span>: <span class=\"string\">'../lib/angular-aria/angular-aria'</span>,</div><div class=\"line\">        <span class=\"string\">'ngMessage'</span>: <span class=\"string\">'../lib/angular-messages/angular-messages'</span>,</div><div class=\"line\">       <span class=\"string\">'ngMaterial'</span>: <span class=\"string\">'../lib/angular-material/angular-material'</span>,</div><div class=\"line\">        <span class=\"string\">'ngCarousel'</span>: <span class=\"string\">'../lib/angular-carousel/dist/angular-carousel.min'</span>,</div><div class=\"line\">        <span class=\"string\">'ngTouch'</span>: <span class=\"string\">'../lib/angular-touch/angular-touch.min'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">shim</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'ngAnimate'</span>:[<span class=\"string\">'ionic'</span>],</div><div class=\"line\">        <span class=\"string\">'ngAria'</span>: [<span class=\"string\">'ionic'</span>],</div><div class=\"line\">        <span class=\"string\">'ngMessage'</span>: [<span class=\"string\">'ionic'</span>],</div><div class=\"line\">        <span class=\"string\">'ngMaterial'</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">deps</span>:[<span class=\"string\">'ionic'</span>,<span class=\"string\">'ngAnimate'</span>,<span class=\"string\">'ngAria'</span>,<span class=\"string\">'ngMessage'</span>],</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'ngTouch'</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">deps</span>: [<span class=\"string\">'ionic'</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'ngCarousel'</span>:</div><div class=\"line\">            [ <span class=\"string\">'ngTouch'</span>]</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'app'</span>, <span class=\"string\">'controllers/controllers'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    angular.bootstrap(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"body\"</span>)[<span class=\"number\">0</span>], [<span class=\"string\">'app'</span>]);<span class=\"comment\">//依赖包加载往后手动更新</span></div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在app.js 中</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ADM格式</span></div><div class=\"line\">define([<span class=\"string\">'app'</span>, <span class=\"string\">'ngCarousel'</span>, <span class=\"string\">'ionic'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [<span class=\"string\">'ionic'</span>, <span class=\"string\">'controllers'</span>, <span class=\"string\">'angular-carousel'</span>])</div><div class=\"line\">    &#125;); <span class=\"comment\">//'angular-carousel'必须和加载的lib中module名一致</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>requirejs 异步模块定义规范（AMD）</p>\n<p>##加载问题解决</p>\n</blockquote>\n<ul>\n<li>Do not use ng-app in your index.html<p></p></li>\n<li><p>Preload all required Angular and Angular Material libraries.</p>\n</li>\n<li><blockquote>\n<ol>\n<li>Create your own </li>\n<li>custom bootstrap code</li>\n<li>custom main app</li>\n</ol>\n</blockquote>\n<ul>\n<li>Do not let RequireJS try to load, require, or define Angular Material components; just set your app dependency on Angular Material  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'yourApp'</span>,[<span class=\"string\">'ng'</span>, <span class=\"string\">'ngMaterial'</span>, ... ])&gt;</div></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"Android打包的那些事","url":"http://gyzclw.github.io/2015/12/09/Android打包的那些事/","content":"<p>来自jayfeng的<a href=\"http://www.jayfeng.com/2015/11/07/Android打包的那些事\" target=\"_blank\" rel=\"external\">Android打包的那些事</a></p>\n<blockquote>\n<p>使用gradle打包apk已经成为当前主流趋势，我也在这个过程中经历了各种需求，并不断结合gradle新的支持，一一改进。在此，把这些相关的东西记录，做一总结。</p>\n</blockquote>\n<h2 id=\"替换AndroidManifest中的占位符\"><a href=\"#替换AndroidManifest中的占位符\" class=\"headerlink\" title=\"替换AndroidManifest中的占位符\"></a>替换AndroidManifest中的占位符</h2><p>我想把其中的${app_label}替换为@string/app_name</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">\t\t\tdefaultConfig&#123;</div><div class=\"line\">\t\t\tmanifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name\"</span>]</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">｝</div></pre></td></tr></table></figure>\n<p>如果只想替换debug版本：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">productFlavors &#123;</div><div class=\"line\"><span class=\"comment\">// 把dev产品型号的apk的AndroidManifest中的channel替换dev</span></div><div class=\"line\"><span class=\"string\">\"dev\"</span>&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"dev\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更多的需求是替换渠道编号：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\"> productFlavors &#123;</div><div class=\"line\"><span class=\"comment\">// 把dev产品型号的apk的AndroidManifest中的channel替换dev</span></div><div class=\"line\">\t\t<span class=\"string\">\"dev\"</span>&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"dev\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"独立配置签名信息\"><a href=\"#独立配置签名信息\" class=\"headerlink\" title=\"独立配置签名信息\"></a>独立配置签名信息</h2><p>对于签名相关的信息,直接写在gradle当然不好,特别是一些开源项目，可以添加到gradle.properties:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">RELEASE_KEY_PASSWORD=xxxx</div><div class=\"line\">RELEASE_KEY_ALIAS=xxx</div><div class=\"line\">RELEASE_STORE_PASSWORD=xxx</div><div class=\"line\">RELEASE_STORE_FILE=..<span class=\"regexp\">/.keystore/</span>xxx.jks</div></pre></td></tr></table></figure>\n<p>然后在build.gradle中引用即可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">signingConfigs &#123;</div><div class=\"line\">release &#123;</div><div class=\"line\">storeFile <span class=\"keyword\">file</span>(RELEASE_STORE_FILE)</div><div class=\"line\">storePassword RELEASE_STORE_PASSWORD</div><div class=\"line\">keyAlias RELEASE_KEY_ALIAS</div><div class=\"line\">keyPassword RELEASE_KEY_PASSWORD</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果不想提交到版本库，可以添加到local.properties中，然后在build.gradle中读取。</p>\n<h2 id=\"多渠道打包\"><a href=\"#多渠道打包\" class=\"headerlink\" title=\"多渠道打包\"></a>多渠道打包</h2><p>多渠道打包的关键之处在于，定义不同的product flavor, 并把AndroiManifest中的channel渠道编号替换为对应的flavor标识：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">productFlavors &#123;</div><div class=\"line\">dev&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"dev\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">official&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"official\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">wandoujia&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"wandoujia\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">xiaomi&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"xiaomi\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">\"360\"</span>&#123;</div><div class=\"line\">manifestPlaceholders = [channel:<span class=\"string\">\"360\"</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意一点，这里的flavor名如果是数字开头，必须用引号引起来。<br>构建一下，就能生成一系列的Build Variant了:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">evDebug</div><div class=\"line\">devRelease</div><div class=\"line\">officialDebug</div><div class=\"line\">officialRelease</div><div class=\"line\">wandoujiaDebug</div><div class=\"line\">wandoujiaRelease</div><div class=\"line\">xiaomiDebug</div><div class=\"line\">xiaomiRelease</div><div class=\"line\"><span class=\"number\">360</span>Debug</div><div class=\"line\"><span class=\"number\">360</span>Release</div></pre></td></tr></table></figure>\n<p>其中debug, release是gradle默认自带的两个build type, 下一节还会继续说明。<br>选择一个，就能编译出对应渠道的apk了。</p>\n<h2 id=\"自定义Build-Type\"><a href=\"#自定义Build-Type\" class=\"headerlink\" title=\"自定义Build Type\"></a>自定义Build Type</h2><p>前面说到默认的build type有两种debug和release，区别如下：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// release版本生成的BuildConfig特性信息</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> BuildConfig &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUILD_TYPE = <span class=\"string\">\"release\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// debug版本生成的BuildConfig特性信息</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> BuildConfig &#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUILD_TYPE = <span class=\"string\">\"debug\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在有一种需求，增加一种build type，介于debug和release之间，就是和release版本一样，但是要保留debug状态（如果做过rom开发的话，类似于user debug版本），我们称为preview版本吧。<br>其实很简单：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    signingConfigs &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            storeFile <span class=\"keyword\">file</span>(RELEASE_STORE_FILE)</div><div class=\"line\">            storePassword RELEASE_STORE_PASSWORD</div><div class=\"line\">            keyAlias RELEASE_KEY_ALIAS</div><div class=\"line\">            keyPassword RELEASE_KEY_PASSWORD</div><div class=\"line\">        &#125;</div><div class=\"line\">        preview &#123;</div><div class=\"line\">            storeFile <span class=\"keyword\">file</span>(RELEASE_STORE_FILE)</div><div class=\"line\">            storePassword RELEASE_STORE_PASSWORD</div><div class=\"line\">            keyAlias RELEASE_KEY_ALIAS</div><div class=\"line\">            keyPassword RELEASE_KEY_PASSWORD</div><div class=\"line\">        &#125;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            storeFile <span class=\"keyword\">file</span>(RELEASE_STORE_FILE)</div><div class=\"line\">            storePassword RELEASE_STORE_PASSWORD</div><div class=\"line\">            keyAlias RELEASE_KEY_ALIAS</div><div class=\"line\">            keyPassword RELEASE_KEY_PASSWORD</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name_debug\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">        preview&#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name_preview\"</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，build type还有一个好处，如果想要一次性生成所有的preview版本，执行assemblePreview即可，debug和releae版本同理。</p>\n<h2 id=\"build-type中的定制参数\"><a href=\"#build-type中的定制参数\" class=\"headerlink\" title=\"build type中的定制参数\"></a>build type中的定制参数</h2><p>上面我们在不同的build type替换${app_label}为不同的字符串，这样安装到手机上就能明显的区分出不同build type的版本。<br>除此之外，可能还可以配置一些参数，我这里列几个我在工作中用到的：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name_debug\"</span>]</div><div class=\"line\">            applicationIdSuffix <span class=\"string\">\".debug\"</span></div><div class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></div><div class=\"line\">            signingConfig signingConfigs.debug</div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name\"</span>]</div><div class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            shrinkResources <span class=\"keyword\">true</span></div><div class=\"line\">            signingConfig signingConfigs.release</div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        preview&#123;</div><div class=\"line\">            manifestPlaceholders = [app_label:<span class=\"string\">\"@string/app_name_preview\"</span>]</div><div class=\"line\">            applicationIdSuffix <span class=\"string\">\".preview\"</span></div><div class=\"line\">            debuggable <span class=\"keyword\">true</span> <span class=\"comment\">// 保留debug信息</span></div><div class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            shrinkResources <span class=\"keyword\">true</span></div><div class=\"line\">            signingConfig signingConfigs.preview</div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"多工程全局配置\"><a href=\"#多工程全局配置\" class=\"headerlink\" title=\"多工程全局配置\"></a>多工程全局配置</h2><p>随着产品渠道的铺开，往往一套代码需要支持多个产品形态，这就需要抽象出主要代码到一个Library，然后基于Library扩展几个App Module。<br>相信每个module的build.gradle都会有这个代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">22</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        minSdkVersion <span class=\"number\">10</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">22</span></div><div class=\"line\">        versionCode <span class=\"number\">34</span></div><div class=\"line\">        versionName <span class=\"string\">\"v2.6.1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当升级sdk、build tool、target sdk等，几个module都要更改，非常的麻烦。最重要的是，很容易忘记，最终导致app module之间的差异不统一，也不可控。<br>强大的gradle插件在1.1.0支持全局变量设定，一举解决了这个问题。<br>先在project的根目录下的build.gradle定义ext全局变量:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ext &#123;</div><div class=\"line\">    compileSdkVersion = <span class=\"number\">22</span></div><div class=\"line\">    buildToolsVersion = <span class=\"string\">\"23.0.1\"</span></div><div class=\"line\">    minSdkVersion = <span class=\"number\">10</span></div><div class=\"line\">    targetSdkVersion = <span class=\"number\">22</span></div><div class=\"line\">    versionCode = <span class=\"number\">34</span></div><div class=\"line\">    versionName = <span class=\"string\">\"v2.6.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在各module的build.gradle中引用如下：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class=\"line\">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.xxx.xxx\"</span></div><div class=\"line\">        minSdkVersion rootProject.ext.minSdkVersion</div><div class=\"line\">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class=\"line\">        versionCode rootProject.ext.versionCode</div><div class=\"line\">        versionName rootProject.ext.versionName</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后每次修改project级别的build.gradle即可实现全局统一配置。</p>\n<h2 id=\"自定义导出的APK名称\"><a href=\"#自定义导出的APK名称\" class=\"headerlink\" title=\"自定义导出的APK名称\"></a>自定义导出的APK名称</h2><p>默认android studio生成的apk名称为app-debug.apk或者app-release.apk，当有多个渠道的时候，需要同时编出50个渠道包的时候，就麻烦了，不知道谁是谁了。<br>这个时候，就需要自定义导出的APK名称了，不同的渠道编出的APK的文件名应该是不一样的。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndroid &#123;</div><div class=\"line\">    <span class=\"comment\">// rename the apk with the version name</span></div><div class=\"line\">    applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">        variant.outputs.<span class=\"keyword\">each</span> &#123; output -&gt;</div><div class=\"line\">            output.outputFile = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(</div><div class=\"line\">                    output.outputFile.parent,</div><div class=\"line\">                    <span class=\"string\">\"ganchai-$&#123;variant.buildType.name&#125;-$&#123;variant.versionName&#125;-$&#123;variant.productFlavors[0].name&#125;.apk\"</span>.toLowerCase())</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当apk太多时，如果能把apk按debug，release，preview分一下类就更好了（事实上，对于我这样经常发版的人，一编往往就要编四五十个版本的人，debug和release版本全混在一起没法看，必须分类），简单：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    <span class=\"comment\">// rename the apk with the version name</span></div><div class=\"line\">    <span class=\"comment\">// add output file sub folder by build type</span></div><div class=\"line\">    applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">        variant.outputs.<span class=\"keyword\">each</span> &#123; output -&gt;</div><div class=\"line\">            output.outputFile = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(</div><div class=\"line\">                    output.outputFile.parent + <span class=\"string\">\"/$&#123;variant.buildType.name&#125;\"</span>,</div><div class=\"line\">                    <span class=\"string\">\"ganchai-$&#123;variant.buildType.name&#125;-$&#123;variant.versionName&#125;-$&#123;variant.productFlavors[0].name&#125;.apk\"</span>.toLowerCase())</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在生成了类似于ganchai-dev-preview-v2.4.0.0.apk这样格式的包了，preview的包自然就放在preview的文件夹下，清晰明了。</p>\n<h2 id=\"混淆技巧\"><a href=\"#混淆技巧\" class=\"headerlink\" title=\"混淆技巧\"></a>混淆技巧</h2><p>混淆能让反编译的代码可读性变的很差，而且还能显著的减少APK包的大小。</p>\n<h3 id=\"1-第一个技巧\"><a href=\"#1-第一个技巧\" class=\"headerlink\" title=\"1). 第一个技巧\"></a>1). 第一个技巧</h3><p>相信很多朋友对混淆都觉得麻烦，甚至说，非常乱。因为添加混淆规则需要查询官方说明文档，甚至有的官方文档还没说明。当你引用了太多库后，添加混淆规则将使一场噩梦。<br>这里介绍一个技巧，不用查官方文档，不用逐个库考虑添加规则。<br>首先，除了默认的混淆配置(android-sdk/tools/proguard/proguard-android.txt), 自己的代码肯定是要自己配置的：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">## 位于module下的proguard-rules.pro</div><div class=\"line\">#####################################</div><div class=\"line\">######### 主程序不能混淆的代码 #########</div><div class=\"line\">#####################################</div><div class=\"line\"></div><div class=\"line\">-dontwarn xxx.model.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> xxx.model.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">## 等等，自己的代码自己清楚</div><div class=\"line\"></div><div class=\"line\">#####################################</div><div class=\"line\">########### 不优化泛型和反射 ##########</div><div class=\"line\">#####################################</div><div class=\"line\"></div><div class=\"line\">-keepattributes Signature</div></pre></td></tr></table></figure>\n<p>接下来是麻烦的第三方库，一般来说，如果是极光推的话，它的包名是cn.jpush, 添加如下代码即可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">-dontwarn cn.jpush.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> cn.jpush.** &#123; *; &#125;</div></pre></td></tr></table></figure>\n<p>其他的第三库也是如此，一个一个添加，太累！其实可以用第三方反编译工具（比如<a href=\"https://github.com/skylot/jadx\" target=\"_blank\" rel=\"external\">jadx</a>，打开apk后，一眼就能看到引用的所有第三方库的包名，把所有不想混淆或者不确定能不能混淆的，直接都添加又有何不可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">#####################################</div><div class=\"line\">######### 第三方库或者jar包 ###########</div><div class=\"line\">#####################################</div><div class=\"line\"></div><div class=\"line\">-dontwarn cn.jpush.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> cn.jpush.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn com.squareup.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> com.squareup.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn com.octo.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> com.octo.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn de.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> de.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn javax.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> javax.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn org.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> org.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn u.aly.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> u.aly.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn uk.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> uk.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn com.baidu.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> com.baidu.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn com.facebook.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> com.facebook.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">-dontwarn com.google.**</div><div class=\"line\">-keep <span class=\"keyword\">class</span> com.google.** &#123; *; &#125;</div><div class=\"line\"></div><div class=\"line\">## ... ...</div></pre></td></tr></table></figure>\n<h3 id=\"2-第二个技巧\"><a href=\"#2-第二个技巧\" class=\"headerlink\" title=\"2). 第二个技巧\"></a>2). 第二个技巧</h3><p>一般release版本混淆之后，像友盟这样的统计系统如果有崩溃异常，会记录如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.NullPointerException: java.lang.NullPointerException</div><div class=\"line\">\tat com.xxx.TabMessageFragment$<span class=\"number\">7</span>.run(Unknown Source)</div></pre></td></tr></table></figure>\n<p>这个Unknown Source是很要命的，排除错误无法定位到具体行了，大大降低调试效率。<br>当然，友盟支持上传Mapping文件，可帮助定位，mapping文件的位置在：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">project</span> &gt; module</div><div class=\"line\">        &gt; build &gt; outputs &gt; &#123;flavor name&#125; &gt; &#123;build type&#125; &gt; mapping.txt</div></pre></td></tr></table></figure>\n<p>如果版本一多，mapping.txt每次都要重新生成，还要上传，终归还是麻烦。<br>其实，在proguard-rules.pro中添加如下代码即可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-keepattributes SourceFile,LineNumberTable</div></pre></td></tr></table></figure>\n<p>当然apk包会大那么一点点（我这里6M的包，大个200k吧），但是再也不用mapping.txt也能定位到行了，为了这种解脱，这个代价我个人觉得是值的，而且超值！</p>\n<h2 id=\"动态设置一些额外信息\"><a href=\"#动态设置一些额外信息\" class=\"headerlink\" title=\"动态设置一些额外信息\"></a>动态设置一些额外信息</h2><p>假如想把当前的编译时间、编译的机器、最新的commit版本添加到apk，而这些信息又不好写在代码里，强大的gradle给了我创造可能的自信：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        resValue <span class=\"string\">\"string\"</span>, <span class=\"string\">\"build_time\"</span>, buildTime()</div><div class=\"line\">        resValue <span class=\"string\">\"string\"</span>, <span class=\"string\">\"build_host\"</span>, hostName()</div><div class=\"line\">        resValue <span class=\"string\">\"string\"</span>, <span class=\"string\">\"build_revision\"</span>, revision()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">def</span> buildTime() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Date().format(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">def</span> hostName() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> System.getProperty(<span class=\"string\">\"user.name\"</span>) + <span class=\"string\">\"@\"</span> + InetAddress.localHost.hostName</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">def</span> revision() &#123;</div><div class=\"line\">    <span class=\"keyword\">def</span> code = <span class=\"keyword\">new</span> ByteArrayOutputStream()</div><div class=\"line\">    exec &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'rev-parse'</span>, <span class=\"string\">'--short'</span>, <span class=\"string\">'HEAD'</span></div><div class=\"line\">        standardOutput = code</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> code.toString()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述代码实现了动态的添加了3个字符串资源: build_time、build_host、build_revision, 然后在其他地方可像如引用字符串一样使用如下：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在Activity里调用</span></div><div class=\"line\">getString(R.string.build_time)  <span class=\"comment\">// 输出2015-11-07 17:01</span></div><div class=\"line\">getString(R.string.build_host)  <span class=\"comment\">// 输出jay@deepin，这是我的电脑的用户名和PC名</span></div><div class=\"line\">getString(R.string.build_revision) <span class=\"comment\">// 输出3dd5823, 这是最后一次commit的sha值</span></div></pre></td></tr></table></figure>\n<p>这个地方，如何从命令行读取返回结果，很有意思。<br>其实这段代码来自我学习VLC源码时偶然看到，深受启发，不敢独享，特摘抄在此。<br><a href=\"https://wiki.videolan.org/AndroidCompile\" target=\"_blank\" rel=\"external\">vlc源码及编译地址</a>， 有兴趣可以过去一观。</p>\n<h2 id=\"给自己留个”后门”-点七下\"><a href=\"#给自己留个”后门”-点七下\" class=\"headerlink\" title=\"给自己留个”后门”: 点七下\"></a>给自己留个”后门”: 点七下</h2><p>了调试方便，我们往往会在debug版本留一个显示我们想看的界面（记得之前微博的一个iOS版本就泄露了一个调试界面），如何进入到一个界面，我们可以仿照android开发者选项的方式，点七下才显示，我们来实现一个：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> clickCount = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> clickTime = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">sevenClickView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onClick(View view) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (clickTime == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            clickTime = System.currentTimeMillis();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (System.currentTimeMillis() - clickTime &gt; <span class=\"number\">500</span>) &#123;</div><div class=\"line\">            clickCount = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            clickCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        clickTime = System.currentTimeMillis();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (clickCount &gt; <span class=\"number\">6</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 点七下条件达到，跳到debug界面</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>release版本肯定是不能暴露这个界面的，也不能让人用am在命令行调起，如何防止呢，可以在release版本把这个debug界面的exported设为false。</p>\n<h2 id=\"自动化构建\"><a href=\"#自动化构建\" class=\"headerlink\" title=\"自动化构建\"></a>自动化构建</h2><p>如何使用jenkins打包android和ios，并上传到蒲公英平台，这个可以参考我的另外一篇文章专门介绍: <a href=\"http://www.jayfeng.com/2015/10/22/使用jenkins自动化构建android和ios应用/\" target=\"_blank\" rel=\"external\">《使用jenkins自动化构建android和ios应用》</a>，不过，这篇文章还没写完，实际上在公司里已经一直在用了，哪天心情好了总会写完的，这里不再赘述。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>android打包因为groovy语言的强大，变的强大的同时必然也变的复杂，今天把我经历的这些门道拿出来说道一下，做一个小小的总结，后续有更新我还会添加。</p>\n","categories":[],"tags":[]},{"title":"Hello World","url":"http://gyzclw.github.io/2015/12/08/hello-world/","content":"<blockquote>\n<p>我的第一篇blog</p>\n</blockquote>\n","categories":[],"tags":["随笔"]},{"title":"Android 源码设计模式解析与实战","url":"http://gyzclw.github.io/2015/11/15/android源码设计模式/","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Andorid 源码设计模式解析与实战</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 面向对象的六大原则</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n</div><div id=\"outline-container-sec-1-1-1\" class=\"outline-4\">\n<h4 id=\"sec-1-1-1\"><span class=\"section-number-4\">1.1.1</span> 单一职责原则</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-1\">\n<ol class=\"org-ol\">\n<li>两个完全不一样的功能不能放在一个类中。\n</li>\n<li>一个类中应该是一组相关性很高的函数。\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1-2\" class=\"outline-4\">\n<h4 id=\"sec-1-1-2\"><span class=\"section-number-4\">1.1.2</span> 让程序更稳定、更灵活——开闭原则(<i>OCP</i>)</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-2\">\n<p>\n    开闭原则的定义: <i>软件中的对象（类、模块、函数等）应该对扩展是开闭的，\n对修改是封闭对.</i>  当软件需要变化时，我们应该尽量通过扩展当方式实现变化，\n而不是通过修改已有当代码来实现。\n</p>\n\n<p>\n开发中运用抽象是走向代码优化的重要一步。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1-3\" class=\"outline-4\">\n<h4 id=\"sec-1-1-3\"><span class=\"section-number-4\">1.1.3</span> 让项目拥有变化的能力&#x2013;依赖倒置原则(<i>DIP</i>)</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-3\">\n<p>\n    模块间的依赖通过抽象发送，实现类之间不发生直接的依赖关系，其依赖关系是通过\n接口或者抽象类产生的。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1-4\" class=\"outline-4\">\n<h4 id=\"sec-1-1-4\"><span class=\"section-number-4\">1.1.4</span> 系统拥有更高的灵活性&#x2013;接口隔离原则(<i>ISP</i>)</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-4\">\n<p>\n类间依赖关系应该建立在最小接口上,客户端不应该依赖它不需要的接口.\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-1-5\" class=\"outline-4\">\n<h4 id=\"sec-1-1-5\"><span class=\"section-number-4\">1.1.5</span> 更好的可扩展性&#x2013;迪米特原则(<i>LOD</i>)</h4>\n<div class=\"outline-text-4\" id=\"text-1-1-5\">\n<p>\n    一个对象应该对其他对象有最少的了解。通俗地讲一个类应该对自己需要耦合和调用\n的类知道的最少，调用者只需要知道它需要的方法即可，其他一概不管。\n</p>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2017-02-20 Mon 14:28.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\" target=\"_blank\" rel=\"external\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\" target=\"_blank\" rel=\"external\">Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\" target=\"_blank\" rel=\"external\">Org</a> mode 8.2.10)\n","categories":["orgmode"],"tags":["android"]},{"title":"about","url":"http://gyzclw.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://gyzclw.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://gyzclw.github.io/categories/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://gyzclw.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://gyzclw.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://gyzclw.github.io/tag/index-1.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://gyzclw.github.io/tags/index.html","content":"","categories":[],"tags":[]}]