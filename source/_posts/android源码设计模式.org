#+TITLE: Android 源码设计模式解析与实战
#+DATE: <2015-11-15 Sun 17:00>
#+TAGS: android
#+LAYOUT: post
#+CATEGORIES: orgmode
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{Songti SC}
* Andorid 源码设计模式解析与实战
** 面向对象的六大原则
*** 单一职责原则
 1. 两个完全不一样的功能不能放在一个类中。
 2. 一个类中应该是一组相关性很高的函数。
*** 让程序更稳定、更灵活——开闭原则(/OCP/)
    开闭原则的定义: /软件中的对象（类、模块、函数等）应该对扩展是开闭的，
对修改是封闭对./  当软件需要变化时，我们应该尽量通过扩展当方式实现变化，
而不是通过修改已有当代码来实现。

    开发中运用抽象是走向代码优化的重要一步。
*** 让项目拥有变化的能力--依赖倒置原则(/DIP/)
    模块间的依赖通过抽象发送，实现类之间不发生直接的依赖关系，其依赖关系是通过
接口或者抽象类产生的。
*** 系统拥有更高的灵活性--接口隔离原则(/ISP/)
    类间依赖关系应该建立在最小接口上,客户端不应该依赖它不需要的接口.
*** 更好的可扩展性--迪米特原则(/LOD/)
    一个对象应该对其他对象有最少的了解。通俗地讲一个类应该对自己需要耦合和调用
的类知道的最少，调用者只需要知道它需要的方法即可，其他一概不管。
